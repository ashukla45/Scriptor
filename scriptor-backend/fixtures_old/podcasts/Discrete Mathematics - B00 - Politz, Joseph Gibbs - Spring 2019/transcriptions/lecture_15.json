{
    "Blurbs": {
        "+ when I wrote the middle one. The top 100 list two basic steps and 2 recursive steps. So instead of saying there's a basis stuff in her car and it just list for different cases in about what's happening in each of the four different cases are the same. It's just how we describe breaking it out. So it's also okay to write all these different definitions for the ": [
            2160.3,
            2190.0,
            61
        ],
        "And so this is not explicitly written out much in class if it all but in the book and this is this arrow in this definition is not at the same arrow is an implication. I just want to call that out. It uses the same shape of Arrow, but this is describing a functions domain and range. So this is like a function signature or the way to think ": [
            1044.0,
            1065.8,
            31
        ],
        "And then the last step. We end up with the one plus one plus one here by the basis step. Whitby is equal to a that be in the base of stuff people today. We can think about these recursively defined functions are uses of recursively defined function by how the input gets broken down at each step and there's often going to be many uses of the recursive step ": [
            1440.3,
            1474.0,
            42
        ],
        "DNA strands, we're going to start by saying single base strands A T C and G are elements of the building. So the base is step is just on finite number of elements. We could use roster notation here to there's a few ways we could write this here. I've just written for separate statements that are all elements of statement. So a single base strands are all elements of ": [
            246.8,
            271.3,
            9
        ],
        "I want to ask you a quick question. What should we be putting in the blank for its domain here? Based on its description and based on some of the UCC. 5 4 3 2 1 oops. I'm and I just got this one. Okay Quicken again. We can again for this one. What's the domain of Base count? 5 4 3 2 1 Okay, so there's a different couple ": [
            1533.7,
            1671.7,
            45
        ],
        "I want to look at next definition of this function DNA one will write some of these definitions going forward just like the set definition of DNA strands so often when we write functions that work over recursively defined set the function will be recursively defined using the same recipe so there will be a basis step-up that talks about what to do for all of that fine art collection ": [
            1090.7,
            1123.9,
            33
        ],
        "Listen to a podcast. Okay, let's get started. Happy Friday everybody a couple of announcements. So we just to be clear about the schedule this week. There was no three follow-up and we just admitted that cuz of the midterm in for homework in the for warm up or doing the same day. They're doing Monday. So do please collaborate with anyone ask public questions about for warm up for ": [
            1.9,
            30.7,
            0
        ],
        "Quicken again. 5 4 3 2 1 and there's a couple ways we can think about this definition the definition of s one way that's kind of helpful to think about this. It's not totally complete or the only way to think about this but in the basis step We pretty much the find the bases step that ass is equal to just this set of four elements 80 GNC ": [
            443.8,
            506.0,
            14
        ],
        "San Diego podcast for more visit podcast. ": [
            2993.2,
            2996.3,
            85
        ],
        "Yep. Yep. Yeah, that's a great. That's a really good question. So your your question here is in Step. See her name answer. See it's like I looked at one of the things you Drew Drew and just has a t g c in it and I would be exactly equal to be so the thing that I want to adhere is that if we want to talk about really ": [
            841.8,
            872.2,
            25
        ],
        "a so, that's definitely true. And our set of bases is just the Single Character. So something is multiple characters. Can't be in a set of phases. But definitely more than one of these things is true. Things are both true. This is also just a reminder of some set notation before we go on to working with sets more like two different ideas for building up a set of ": [
            754.0,
            783.0,
            23
        ],
        "a t r a i guess I want to go in order a t a g..... If we were to try and write it out and roster notation. We be listening out all of these elements we can go but that's kind of what the definition is right here and be is an entire set for be to be an element of s s would have to look something like ": [
            918.8,
            947.3,
            27
        ],
        "about a functions domain and range and they're always be some set that describes the domain on the left possibly some kind of cross product and then something on the right that describes the values coming out of the function. It'll be our job to figure out how to define these functions by saying what their output ought to be for every possible input in the domain and that's what ": [
            1065.8,
            1090.7,
            32
        ],
        "about two more interesting recursive set definitions and a couple properties of them just to give you a sense of what kinds of things we can Define in the style. So we have a double helix in one of two ways that takes into strands and returns true or false based on if they form a double helix, we just defined it using... We just to find it as this ": [
            2272.8,
            2303.6,
            65
        ],
        "always equal to this part of writing down as be here is breaking this into these two different pieces of the Strand base. We're saying the length of straddle me think about it. That way is 1 plus the length of that prefix that last base counted for one will calculate the length of that hole precincts. Can I wanna pause I need to just want to give you 10 ": [
            1146.9,
            1183.4,
            35
        ],
        "and the second argument is just a base. So what's happening here is the first argument is representing the Strand and the second or even as representing the base. We're trying to count. So the first argument represents a whole strand and the second argument represents a base and we're trying to count instances of that base. This is what this actually takes as its domain. So what will happen ": [
            1700.7,
            1735.3,
            47
        ],
        "any terminology questions and questions about those definition in at work working partners for 4 homework due Monday night. We also put up right after the exam. This is also links from the for warm-up assignment mid-quarter feedback form. So you can tell us how the classes going how things are going for you we can get a sense of how much time things are taking what you're liking what ": [
            30.7,
            53.1,
            1
        ],
        "are either to two poles or the empty list. So this can't match. And in this last case we have this nested and each one ends up matching the definition the ones a natural number and two three empty list structure is in the illicit phone number in the three structures in the lisset because three of the natural number and the empty listed in the list that also works ": [
            2932.5,
            2962.3,
            83
        ],
        "bases cuz there's only four bases. That's a nice finite set. So we always know that B1 and B2 will be than this by night said what if it was a sequence of number of natural numbers, we could still have cases on finite set of cases for let's say two natural numbers be that way. If we needed to do something different for every natural number and it was ": [
            2025.2,
            2054.4,
            56
        ],
        "but it would be a problem if we describe the set of cases of incomplete left some input or some case on cover. I'm so it's something we should be careful about when writing these definitions. So, I'm one question. I want to ask about this definition. Actually. Let me just copy this definition down cuz I like the way it's written. I guess I just want I just want ": [
            1960.9,
            1983.4,
            54
        ],
        "by this repeated definition of the recursive rule. This structure of basically nested tuples and Nancy list actually really directly talks about this linked list structure that you'll see in courses like CSE 12 and things like that. So we're going to be the theme of the next week or so is that we're going to be working with recursive definition working with examples of these values. Can you see ": [
            2962.3,
            2993.2,
            84
        ],
        "can tell you if it's in the set by by checking checking that everything is a basin fills up in this way. And so this is going to we're going to work with a few definitions like this today. This isn't the only one will work with all of them are going to use this idea of starting with this fine art collection in this case just for elements and ": [
            320.6,
            339.0,
            12
        ],
        "clarifying some of these cases. I'd like to hear we had to say and is a positive integer. And we also saw some definition when we want to say that the properties like a DNA strand starts with three particular letters this motivates defining them in a more precise way to motivate the finding them in a way. It's going to be useful for proving things about them in the ": [
            163.3,
            198.4,
            6
        ],
        "constructs that you have seen or we'll see depending on what's taking you where you are in the curriculum, but there's a direct relationship here. So there's this structure in programming called a linked list that talks about building up list of numbers and we can actually use this kind of recursive definition to talk about linked open close bracket as empty list. The basic steps are always list and ": [
            2773.8,
            2818.4,
            79
        ],
        "could take that bass put it at the end of The Strand and not also counts as a DNA strand and this gives us a way to define what it means to be an element of the set of DNA strands are without needing... And without needing a sort of vague and parameter that's floating around that we Define every time this is if you give me the characters I ": [
            297.5,
            320.6,
            11
        ],
        "definition of the set. That answer your question satisfying. Oh great question. So why why we have to say beers and be as separate a second time. So I think of these steps as having like two different scopes for their variables. So all the variables that are used in the basis step are just for the bassist and in any computational calculations we want to do and that's why ": [
            1281.6,
            1320.1,
            38
        ],
        "different pieces of evidence we have here for what the domain ought to be. Right. So if we look at these parameters as they're used in base counter these arguments as they're used in base count in the first case the basis step-up. We get a bit more information write the recursive step has the first argument being broken down into a strand and then a base of the end ": [
            1671.7,
            1700.7,
            46
        ],
        "double helix double helix fees. What are interesting properties in Chinese for all exists in some of the functions above? Yeah. Yeah. Interesting interesting. So I'm going to sidebar this I'm going to talk about this you can keep them talking about this other what are interesting properties to write down what you just described because I think it's it's interesting. So you decide what if in the recursive stuff ": [
            2453.6,
            2499.3,
            71
        ],
        "element the best we actually have what kind of a process for demonstrating the atg is an element of s how do we know what we can do in the recursive step. It says we know that g is it is a base and 80 is a strand already. Here we know that a is a strand already and T is a base. And here we hit the basis where ": [
            644.8,
            669.8,
            19
        ],
        "equal to H Prime? Are the are these to recursively defined sets going to contain the same elements. It's a really interesting question. It's a really interesting question their properties like this and questions like this that are going to be the style of things. We try to prove next week. And in this case, I think it's true that if you can eat these things together and the proof ": [
            2549.5,
            2580.7,
            73
        ],
        "everything and ask is actually an infant's eyes out of all the strands of any length really the whole set of the Union of all of these repeated applications up with this recursive. And so it's not just those four things. It's all of these things anyway, Yeah. Why is a not true the if we tried to emphasize what else looks like looks like a t e g c ": [
            872.2,
            918.8,
            26
        ],
        "followed by a single or a small finite number of uses of the basis Step at the bottom. And this would be a pretty straightforward function and that we all know what length ought to do, but this would be a good justification this application of the function produces three. My brakes break the expression down to Hawaii. Result comes out. I want to work on another function next to ": [
            1474.0,
            1503.8,
            43
        ],
        "for each of these were going to ask like how it would break down based on this definition. So for a weird looking at this one to two people the recursive staff for the basis definitely doesn't matter because it's not just a single value proof that it's an element of the set using the recursive step we have to have that too is an element of L. And that ": [
            2868.1,
            2894.0,
            81
        ],
        "function and all these different cases. And finally you could also Define base count by saying that it's just this giant piecewise function and they're all of the constraints are in the piecewise conditional Clauses. So base count of sb2 is equal to Big split and everything else is defined by the piecewise function is all of these will be reasonable ways to Define base count actually didn't feel it ": [
            2190.0,
            2218.9,
            62
        ],
        "future and it also helps us get it some details of how we might actually Implement them to represent them in a program to because there's no such thing as... You actually Define everything out in the program. There's no way you can just should have stopped and you can see that this is going to be a new style of definition we use in the course. Where we do ": [
            198.4,
            225.2,
            7
        ],
        "go through. All 16 cases in this case because there's four elements here in for each one. We can concatenate a base onto the end so ga. GT G g g c and just to make the picture complete I am going to write all these in. NCC Springfield, oh, that's all the evidence we would get to which we get by applying the recursive step. Once we can fly ": [
            541.5,
            576.9,
            16
        ],
        "hands for X. I want you to talk about it for briefly but really briefly. So answer this question the witness for this case, so just think about it. I think about it for like 10 seconds first question and answer. Yep. That's a good question. So let me try and construct a case where we might worry about that. So for example, if this was not a sequence of ": [
            1983.4,
            2025.2,
            55
        ],
        "if we try to fill in this case here and you have the definition of length to think about a little bit of the definition of the basis step for this function. So what it looks like I'm going to try filling this in next. So try writing out what happens here and you can use the same idea of splitting across multiple cases if you want. What is this ": [
            1735.3,
            1756.0,
            48
        ],
        "in my mind it definitely the range of this. Range that makes sense for this definition is the natural numbers include 0 broad definition in this class. It would be different ways of writing this and there's different styles. We could use to write it. I like the middle style the best this is not a it's like a sort of a personal preference. But also I like it that ": [
            2218.9,
            2242.7,
            63
        ],
        "interesting interesting. So something like You said for all and maybe? and for all specifically so like for all S14 all as to where S1 S2 is in H. There's some property you had. And I'm just going to pick like a for it so that we don't say for all be got to keep the property on the screen. Interesting. So the base count of sa is equal to ": [
            2632.1,
            2691.3,
            75
        ],
        "interesting properties? We could write down may be using some fraules or some exist that talk about relating the results of this function cause it's useful to talk about this is an open-ended question for a minute because we're going to start asking you to come up with definitions and interesting properties more and more in home works as well. So question I have what are some interesting properties of ": [
            2428.8,
            2453.6,
            70
        ],
        "is in really important to notice and it's definition is that be too isn't really changing it all we just take it as an argument and then pass it on as an argument to the the next call or the next use of Base count keeps getting passed through all the records of calls in bass count. So that information stays consistent and just like in length. We're sort of ": [
            1878.0,
            1907.3,
            51
        ],
        "is probably kind of interesting because it means there's multiple ways to build up the same double helix, right? You could be subdue subdue Heelys. He's right only one way to build up. I don't think of an interesting property in the meantime interesting properties. Yeah. Yep. Interesting interesting Sierra trying to talk about the relationship between accounts in the size of the the two sides of the double helix ": [
            2580.7,
            2632.1,
            74
        ],
        "is we Define asset with this recursive strategy and there's two parts to this recursive strategy of defining a set. The first step is called the same recipe that used in the box of this format. You'll see in the book as well. There's a first step called a basis stuff where we just list some finite number of elements that we want to be in the Senate. So for ": [
            225.2,
            246.8,
            8
        ],
        "it having a step where we build new elements from existing elements and we can think of applying this recursive step over and over and over again to build this really big side of all the DNA strands definition of what which of these are true based on this definition. So which of these things these statements below are true 5 4 3 2 1 and Okay, look in again ": [
            339.0,
            443.8,
            13
        ],
        "it makes total sense. They can be used as part of calculations. We could fill in these values and talked about the fact that this would produce a zero that would be equal to 0 in this entire Quantified statement would evaluate the truth. So just like its we can fill in values for these in evaluating down. So I want to put up I don't expect you to internalize ": [
            2112.5,
            2136.7,
            59
        ],
        "it vary directly matches the recursive definition of beset by having two cases that correspond to the definition of the set. So these is one two cases correspond to what we Define for the set and then each of those cases as a piecewise definition for like the equality check, but all of these you will see in a reasonable ways to write this definition. So I want to talk ": [
            2242.7,
            2272.8,
            64
        ],
        "it was actually two different variables called be here. The questions was a really good notational question. Okay, cool. So I want to talk about what it would look like to trace a function like this. We talked a lot about tracing algorithms that were written with loops in pseudocode algorithm so far that we wrote in pseudocode. We're basically defining function. Another way of defining a function is interesting ": [
            1320.1,
            1351.8,
            39
        ],
        "leave a little Trace up there if anyone still copying it, but actually I need these answers. Okay. I want to go on to this next function called base count in the idea of Base count is that is going to do some amount of like counting a base. We visit before we leave if i t a n t t that counted the number of elements in the question. ": [
            1503.8,
            1533.7,
            44
        ],
        "like a when's loss for each one. We wouldn't be able to write that function as a piecewise function. We would have to find some way to sort of the space of natural numbers into these Predators finite number products that describe those cases. It's like this fundamental thing and writing functions over infinite domain is that you have to break down the infinite domain into a finite amount of ": [
            2054.4,
            2078.3,
            57
        ],
        "looks like 30 seconds or so filling in the rest of the definition of base count. Okay, any suggestions suggestions for how we should fill in this definition for base count? Europe Does a couple things I want to highlight highlight about this. So interesting is you Aspira were very explicit and sort of explanatory and matching the basis step in this answer saying look when they're not equal. I ": [
            1756.0,
            1854.8,
            49
        ],
        "mean we could just write and bass count of SP2 there when they're in a not equal case. We don't necessarily have to write 0 + that's not going to change their answer at all. But it makes it very nice and parallel to the bases step where it's clear that this is not responding to zero and the corresponding to what these matchup. And then the other thing that ": [
            1854.8,
            1878.0,
            50
        ],
        "n minus the base count of a S&S to true or not. But this is a really interesting property. This is a really interesting property to ask about right. It would be really interesting to ask. To prove or disprove this property and how we will go about doing that. So I'm not going to say whether it's true or false. I'm just feeling like I can't think fast enough ": [
            2691.3,
            2721.7,
            76
        ],
        "of elements in the bases in the bases step of the set definition what to do. If the argument is just a single base and then or cursive step this would have breaks the definition of part into whatever was used to build it up and says what to do with those pieces. What we have is in the basis step were saying that the length of the Strand is ": [
            1123.9,
            1146.9,
            34
        ],
        "of the set of DNA strand and one of the things we're going to start doing now is we're going to start to finding lots of functions over element subsets and we've done this already a lot with we written tons and tons of predicate in this class and it's always pacify some domain and their their codomain or their range is always true and false write. Those are that ": [
            983.5,
            1007.8,
            29
        ],
        "one is an element of the natural numbers. It doesn't matter either the cases. It's neither a two-pole nor the empty list. So this isn't true. So this whole item can be true of the same. Basically the same argument except the empty list that's in the second position in the tubule. So this is definitely a linked list that allows people to be a linked list. All of these ": [
            2894.0,
            2932.5,
            82
        ],
        "or 20 seconds to talk about this a new style of definition and ask any questions before we go. Okay questions before we go on questions about this new style of definition of functions before we go on. Yeah. Oh, yeah, you're asking. Is there a reason why like why couldn't I have written that has DNA Len of BS. For example, did this order is because It matches the ": [
            1183.4,
            1241.9,
            36
        ],
        "or anything. I just want to be clear that it's here and it's also on the slides that we post. So what I want to talk about today is a new way of defining sets and functions. So we've written to find a lot of sex in this course it'll different ways to find a lot of functions cuz our products have been defined as a function that produce true ": [
            73.9,
            98.3,
            3
        ],
        "or false, but I want and one of the things I want to highlight that where we've been sleeping a lot of details under the rug been hiding a lot of important information with these we put in certain places. I only read the definition of DNA and when we gave you the notation sheet on the first day of class there... It's all over the place. Marin will all ": [
            98.3,
            132.3,
            4
        ],
        "other strand and nose to probably matchup other properties like that. We could ask Justin kinds of properties to talk about here and having this recursive definition is going to let us break these values down in a better way than just talking about like... Which we can't really work with that. Well, so that's one thing we'll be addressing next week because Are super related to some particular programming ": [
            2740.4,
            2773.8,
            78
        ],
        "over again and the union of all of them. So atgc are also part of the set. We could also look at an individual strands so we can look at a strand like a t e g and we can ask questions like is 80g an element of my question that we could ask work with a bunch already that it is super why we know that this is an ": [
            613.1,
            644.8,
            18
        ],
        "pair using. Dawson said bro, I over arranged it was something strength. This is another way to define the set of double helix has the Seas helix's it sounds kind of cool the set of double helix. He's not sure. And so the idea here if we want to think about this as one of these is not one of these generating cases is the basis step tells us about ": [
            2303.6,
            2336.1,
            66
        ],
        "population for each part of it. hartsoe hands for this witness and for this Witness So when does yeah. So s equals A and B is equal to T in it so we could also have something like a GC and just putting that up so that we see if we can use these functions in the middle of the Quantified statements were used to using here right now and ": [
            2078.3,
            2112.5,
            58
        ],
        "recursive step in the set definition and So based on. these two statements these justify that are consistent with the idea would be a DNA strand. And now I know from the recursive definition that SP is also a DNA strand which it had better be because I said the domain of this function is to keep me definitions consistent. We have to use what we know from the recursive ": [
            1241.9,
            1281.6,
            37
        ],
        "right hand side using this is when Clauses of these winds statements to decide when each case supplies, we need to be a little bit careful here to make sure that we're actually covering all the cases definitely in this case. It's it's pretty clear that you either be one is equal to be too or be one isn't equal to be too. So I haven't missed any cases here, ": [
            1936.0,
            1960.9,
            53
        ],
        "s and then there's the step called the risk recursive step where we take some elements that we know or in the set combine them with some new values and build new elements that are also in this set. Here we're saying if we have some DNA strand and the base, we can stick them together at the conclusion of this statement time. We have a stranded a base. We ": [
            271.3,
            297.5,
            10
        ],
        "splitting up the Strand into a prefix and the base at the ends using the recursive definition and I'm passing on just the prefix so that keeps getting smaller. I'm afraid if we were to trace this out. We start to see the difference between adding a zero is in the ones in each step of the writing them in this piecewise style where we write multiple cases on the ": [
            1907.3,
            1936.0,
            52
        ],
        "strands. There's also this new style of definition here and just talk about if you have any questions before we go on 22nd any confusions or questions you have before we go on go for it. Already here lots of good shatter. So there's probably some question. So what what questions do folks have about this what questions do folks have so far maybe some of them will be answered. ": [
            783.0,
            835.0,
            24
        ],
        "stuff and we can know those down that we sort of split this up into a t and then the base G and then the right hand side of the recursive step. Again. We have to resolve this use of the DNA function and that again is going to break this up. and this is Again by the recursive step this time with s equals a and b equals t ": [
            1402.3,
            1437.3,
            41
        ],
        "that would be the next step of the recursive step. We be allowed to add on. A g as long as we added as a c in the other spot and that would be this part of the recursive stuff. And so on we can talk about continually building he's up and what this definition in the recursive step forces is that we always at on a new base at ": [
            2375.1,
            2400.6,
            68
        ],
        "the basis case and everything. That Cindy is also in US. Business case which says b is a proper subset of us. Well, we just have to find some element that's not indie Cindy that's not an ass and there's definitely a lot of those all of the sorry lot of those everything is longer than one is an ass but not in B and everything that Cindy is in ": [
            729.1,
            754.0,
            22
        ],
        "the end of both strands that we always have that on. I'm so we could imagine building this out. One thing I want you to think about for a minute. Mr. The prompt on your sheet is pretty open-ended. I want you to think about what are some interesting properties we could right now that we have the functions base count and lengths and things like that. What are some ": [
            2400.6,
            2428.8,
            69
        ],
        "the entire set of values that they can produce we're going to start that taken some amount of arguments taken elements of some domain and produce some other interesting values. So in this case, what we're saying is we're going to write a function and its domain is the strands of DNA. And it's co domain or range? Is the positive integers and its name? Is this DNA Len name? ": [
            1007.8,
            1044.0,
            30
        ],
        "then we can think of what are all of the elements we could build by applying the recursive Step2 all the elements that we have already written that we already know is in S & N E Basin be concatenate them together or put them together and that's a new element that we know he's an ass. So that would include a t a g a c. And we could ": [
            506.0,
            541.5,
            15
        ],
        "there and I will give us all the DNA strands of Life 3 which would be this even this even bigger set that would again be four times the number of elements in here the next time so we can imagine repeating applications. Of the recursive step and that's one way to think about this set all the sets. We can generate by just continuing to apply this over and ": [
            576.9,
            613.1,
            17
        ],
        "this whole slide right now. But what we did when we were thinking about this lecture and looking at different ways Things are Written In the book and different ways. We know these functions are written. We realized there's a bunch of styles of writing these recursively defined functions quite a few things. The middle one is the one that was on the slide except. I didn't write the 0 ": [
            2136.7,
            2160.3,
            60
        ],
        "this. This is going to call it not ask cuz it's not this isn't actually what else looks like ass would have to be a set that contains another set. That has those elements in it. So I have to be something like the result of a power sad or something like westerns. questions Okay, so let's work with these definitions a little bit more. So we have this definition ": [
            947.3,
            983.5,
            28
        ],
        "those four patterns that are allowed. And then the recursive step tells us what we're allowed to add at the end of both of them. So 480 we would be allowed to add. And then these two A's and teas that are out of the end correspond to viskase in the basis in the recursive step. We be allowed to add on 80 and then this would be ta and ": [
            2336.1,
            2375.1,
            67
        ],
        "to ask I'll just get stressed out. So we have this call to be an alien DNA 180g split up into the DNA Len of 80 by the recursive step. and this is the first step that the stakes are for tracing this out. We figure out whether we're in a basis step-up a recursive step. We figure out what any variables are that were are being used in that ": [
            1351.8,
            1402.3,
            40
        ],
        "to justify it to myself one way or another but it's definitely an interesting shape of property that we could talk about proving or disproving. I can put that property up and say well it will be interesting to ask what are the relationships between base counts on the two sides. We also might relate the count of Azon one of the strands of the counts of t's on the ": [
            2721.7,
            2740.4,
            77
        ],
        "understand that it means some number of elements and it ends with an S at the end of hiding a whole bunch of important information with what's going on with that... Can there be zero elements in a sequence that has five elements. Is there some upper bound on the number of elements? What is it? What is is really mean in every problem where we've used... Sleep extra information ": [
            132.3,
            163.3,
            5
        ],
        "us this first example. Well, all of the things that are in s are particular strands right there strands of some length there a sequence of bases and B is an entire set up here. We said that b is equal to the task as the elements of a story individual strands. The next case b is a subset of ass. That's true by the basis case. We look at ": [
            699.3,
            729.1,
            21
        ],
        "we already know that a existing Hess just by the basis step telling us. So if we think about a single strand of DNA we can actually look at this definition and say it well as we can break it up again until we finally get down to a basis step-up justifies why it's in the set. Forgetting back to this question of what particular things are in this set ": [
            669.8,
            699.3,
            20
        ],
        "we said if S1 S2 using H and S3 S4 is in NH then S1 and you said S3 S2 S4 is in h interesting interesting. There's some pretty interesting questions. We could ask. Let's say that we left the bases step the same. Let's call this new definition. each prime So it's different than H now. There's an interesting property question. We can ask we can ask is H ": [
            2499.3,
            2549.5,
            72
        ],
        "you have a natural number then you can build the temple that has that natural number followed by the rest of the list and that's also a link. That's also a member of the set of linked list. The bass on this definition which of these items below are elements of a set of linked list, which of these are elements of this set. 4 3 2 1 Okay. So ": [
            2818.4,
            2868.1,
            80
        ],
        "you're learning and I kind of think so we really appreciate your feedback. I really do read all these I really do change courses in response to feedback that I get so Spell that out and let us know how things are going. So you'll see that as a last question of four warm up. So you'll be in your face. So you don't have to like copy this link ": [
            53.1,
            73.9,
            2
        ]
    },
    "File Name": "lecture_15.flac",
    "Full Transcript": "Listen to a podcast. Okay, let's get started. Happy Friday everybody a couple of announcements. So we just to be clear about the schedule this week. There was no three follow-up and we just admitted that cuz of the midterm in for homework in the for warm up or doing the same day. They're doing Monday. So do please collaborate with anyone ask public questions about for warm up for any terminology questions and questions about those definition in at work working partners for 4 homework due Monday night. We also put up right after the exam. This is also links from the for warm-up assignment mid-quarter feedback form. So you can tell us how the classes going how things are going for you we can get a sense of how much time things are taking what you're liking what you're learning and I kind of think so we really appreciate your feedback. I really do read all these I really do change courses in response to feedback that I get so Spell that out and let us know how things are going. So you'll see that as a last question of four warm up. So you'll be in your face. So you don't have to like copy this link or anything. I just want to be clear that it's here and it's also on the slides that we post.  So what I want to talk about today is a new way of defining sets and functions. So we've written to find a lot of sex in this course it'll different ways to find a lot of functions cuz our products have been defined as a function that produce true or false, but I want and one of the things I want to highlight that where we've been sleeping a lot of details under the rug been hiding a lot of important information with these we put in certain places.  I only read the definition of DNA and when we gave you the notation sheet on the first day of class there... It's all over the place. Marin will all understand that it means some number of elements and it ends with an S at the end of hiding a whole bunch of important information with what's going on with that... Can there be zero elements in a sequence that has five elements. Is there some upper bound on the number of elements? What is it? What is is really mean in every problem where we've used... Sleep extra information clarifying some of these cases.  I'd like to hear we had to say and is a positive integer. And we also saw some definition when we want to say that the properties like a DNA strand starts with three particular letters this motivates defining them in a more precise way to motivate the finding them in a way. It's going to be useful for proving things about them in the future and it also helps us get it some details of how we might actually Implement them to represent them in a program to because there's no such thing as... You actually Define everything out in the program. There's no way you can just should have stopped and you can see that this is going to be a new style of definition we use in the course.  Where we do is we Define asset with this recursive strategy and there's two parts to this recursive strategy of defining a set. The first step is called the same recipe that used in the box of this format. You'll see in the book as well. There's a first step called a basis stuff where we just list some finite number of elements that we want to be in the Senate. So for DNA strands, we're going to start by saying single base strands A T C and G are elements of the building. So the base is step is just on finite number of elements. We could use roster notation here to there's a few ways we could write this here. I've just written for separate statements that are all elements of statement. So a single base strands are all elements of s and then there's the step called the risk recursive step where we take some elements that we know or in the set combine them with some new values and build new elements that are also in this set.  Here we're saying if we have some DNA strand and the base, we can stick them together at the conclusion of this statement time. We have a stranded a base. We could take that bass put it at the end of The Strand and not also counts as a DNA strand and this gives us a way to define what it means to be an element of the set of DNA strands are without needing... And without needing a sort of vague and parameter that's floating around that we Define every time this is if you give me the characters I can tell you if it's in the set by by checking checking that everything is a basin fills up in this way.  And so this is going to we're going to work with a few definitions like this today. This isn't the only one will work with all of them are going to use this idea of starting with this fine art collection in this case just for elements and it having a step where we build new elements from existing elements and we can think of applying this recursive step over and over and over again to build this really big side of all the DNA strands definition of what which of these are true based on this definition. So which of these things these statements below are true  5 4 3 2 1 and  Okay, look in again Quicken again.  5 4 3 2 1  and there's a couple ways we can think about this definition the definition of s one way that's kind of helpful to think about this. It's not totally complete or the only way to think about this but  in the basis step  We pretty much the find the bases step that ass is equal to just this set of four elements 80 GNC then we can think of what are all of the elements we could build by applying the recursive Step2 all the elements that we have already written that we already know is in S & N E Basin be concatenate them together or put them together and that's a new element that we know he's an ass. So that would include a t a g a c.  And we could go through.  All 16 cases in this case because there's four elements here in for each one. We can concatenate a base onto the end so ga.  GT  G g g c and just to make the picture complete I am going to write all these in.  NCC  Springfield, oh, that's all the evidence we would get to which we get by applying the recursive step. Once we can fly there and I will give us all the DNA strands of Life 3 which would be this even this even bigger set that would again be four times the number of elements in here the next time so we can imagine repeating applications.  Of the recursive step and that's one way to think about this set all the sets. We can generate by just continuing to apply this over and over again and the union of all of them. So atgc are also part of the set.  We could also look at an individual strands so we can look at a strand like a t e g and we can ask questions like is 80g an element of my question that we could ask work with a bunch already that it is super why we know that this is an element the best we actually have what kind of a process for demonstrating the atg is an element of s how do we know what we can do in the recursive step. It says we know that g is it is a base and 80 is a strand already.  Here we know that a is a strand already and T is a base.  And here we hit the basis where we already know that a existing Hess just by the basis step telling us.  So if we think about a single strand of DNA we can actually look at this definition and say it well as we can break it up again until we finally get down to a basis step-up justifies why it's in the set.  Forgetting back to this question of what particular things are in this set us this first example. Well, all of the things that are in s are particular strands right there strands of some length there a sequence of bases and B is an entire set up here. We said that b is equal to the task as the elements of a story individual strands.  The next case b is a subset of ass. That's true by the basis case. We look at the basis case and everything. That Cindy is also in US.  Business case which says b is a proper subset of us. Well, we just have to find some element that's not indie Cindy that's not an ass and there's definitely a lot of those all of the sorry lot of those everything is longer than one is an ass but not in B and everything that Cindy is in a so, that's definitely true.  And our set of bases is just the Single Character. So something is multiple characters. Can't be in a set of phases.  But definitely more than one of these things is true.  Things are both true. This is also just a reminder of some set notation before we go on to working with sets more like two different ideas for building up a set of strands. There's also this new style of definition here and just talk about if you have any questions before we go on 22nd any confusions or questions you have before we go on go for it.  Already here lots of good shatter. So there's probably some question. So what what questions do folks have about this what questions do folks have so far maybe some of them will be answered.  Yep.  Yep.  Yeah, that's a great. That's a really good question. So your your question here is in Step. See her name answer. See it's like I looked at one of the things you Drew Drew and just has a t g c in it and I would be exactly equal to be so the thing that I want to adhere is that if we want to talk about really everything and ask is actually an infant's eyes out of all the strands of any length really the whole set of the Union of all of these repeated applications up with this recursive. And so it's not just those four things. It's all of these things anyway,  Yeah.  Why is a not true the if we tried to emphasize what else looks like looks like a t e g c a t r a i guess I want to go in order a t a g..... If we were to try and write it out and roster notation. We be listening out all of these elements we can go but that's kind of what the definition is right here and be is an entire set for be to be an element of s s would have to look something like this.  This is going to call it not ask cuz it's not this isn't actually what else looks like ass would have to be a set that contains another set.  That has those elements in it. So I have to be something like the result of a power sad or something like westerns.  questions  Okay, so let's work with these definitions a little bit more.  So we have this definition of the set of DNA strand and one of the things we're going to start doing now is we're going to start to finding lots of functions over element subsets and we've done this already a lot with we written tons and tons of predicate in this class and it's always pacify some domain and their their codomain or their range is always true and false write. Those are that the entire set of values that they can produce we're going to start that taken some amount of arguments taken elements of some domain and produce some other interesting values. So in this case, what we're saying is we're going to write a function and its domain is the strands of DNA.  And it's co domain or range?  Is the positive integers and its name? Is this DNA Len name? And so this is not explicitly written out much in class if it all but in the book and this is this arrow in this definition is not at the same arrow is an implication. I just want to call that out. It uses the same shape of Arrow, but this is describing a functions domain and range. So this is like a function signature or the way to think about a functions domain and range and they're always be some set that describes the domain on the left possibly some kind of cross product and then something on the right that describes the values coming out of the function.  It'll be our job to figure out how to define these functions by saying what their output ought to be for every possible input in the domain and that's what I want to look at next definition of this function DNA one will write some of these definitions going forward just like the set definition of DNA strands so often when we write functions that work over recursively defined set the function will be recursively defined using the same recipe so there will be a basis step-up that talks about what to do for all of that fine art collection of elements in the bases in the bases step of the set definition what to do. If the argument is just a single base and then or cursive step this would have breaks the definition of part into whatever was used to build it up and says what to do with those pieces.  What we have is in the basis step were saying that the length of the Strand is always equal to this part of writing down as be here is breaking this into these two different pieces of the Strand base. We're saying the length of straddle me think about it. That way is 1 plus the length of that prefix that last base counted for one will calculate the length of that hole precincts.  Can I wanna pause I need to just want to give you 10 or 20 seconds to talk about this a new style of definition and ask any questions before we go.  Okay questions before we go on questions about this new style of definition of functions before we go on.  Yeah.  Oh, yeah, you're asking. Is there a reason why like why couldn't I have written that has DNA Len of BS. For example, did this order is because  It matches the recursive step in the set definition and So based on.  these two statements  these justify that are consistent with the idea would be a DNA strand. And now I know from the recursive definition that SP is also a DNA strand which it had better be because I said the domain of this function is to keep me definitions consistent. We have to use what we know from the recursive definition of the set.  That answer your question satisfying.  Oh great question. So why why we have to say beers and be as separate a second time. So I think of these steps as having like two different scopes for their variables. So all the variables that are used in the basis step are just for the bassist and in any computational calculations we want to do and that's why it was actually two different variables called be here.  The questions was a really good notational question.  Okay, cool.  So I want to talk about what it would look like to trace a function like this. We talked a lot about tracing algorithms that were written with loops in pseudocode algorithm so far that we wrote in pseudocode. We're basically defining function. Another way of defining a function is interesting to ask I'll just get stressed out. So we have this call to be an alien DNA 180g split up into the DNA Len of 80 by the recursive step.  and this is  the first step that the stakes are for tracing this out. We figure out whether we're in a basis step-up a recursive step. We figure out what any variables are that were are being used in that stuff and we can know those down that we sort of split this up into a t and then the base G and then the right hand side of the recursive step. Again. We have to resolve this use of the DNA function and that again is going to break this up.  and this is Again by the recursive step this time with s equals a and b equals t  And then the last step.  We end up with the one plus one plus one here by the basis step.  Whitby is equal to a that be in the base of stuff people today.  We can think about these recursively defined functions are uses of recursively defined function by how the input gets broken down at each step and there's often going to be many uses of the recursive step followed by a single or a small finite number of uses of the basis Step at the bottom.  And this would be a pretty straightforward function and that we all know what length ought to do, but this would be a good justification this application of the function produces three.  My brakes break the expression down to Hawaii. Result comes out.  I want to work on another function next to leave a little Trace up there if anyone still copying it, but actually I need these answers. Okay.  I want to go on to this next function called base count in the idea of Base count is that is going to do some amount of like counting a base. We visit before we leave if i t a n t t that counted the number of elements in the question. I want to ask you a quick question. What should we be putting in the blank for its domain here?  Based on its description and based on some of the UCC.  5 4 3 2 1  oops. I'm and I just got this one.  Okay Quicken again. We can again for this one. What's the domain of Base count?  5 4 3 2 1  Okay, so there's a different couple different pieces of evidence we have here for what the domain ought to be. Right. So if we look at these parameters as they're used in base counter these arguments as they're used in base count in the first case the basis step-up. We get a bit more information write the recursive step has the first argument being broken down into a strand and then a base of the end and the second argument is just a base. So what's happening here is the first argument is representing the Strand and the second or even as representing the base. We're trying to count. So the first argument represents a whole strand and the second argument represents a base and we're trying to count instances of that base. This is what this actually takes as its domain.  So what will happen if we try to fill in this case here and you have the definition of length to think about a little bit of the definition of the basis step for this function. So what it looks like I'm going to try filling this in next. So try writing out what happens here and you can use the same idea of splitting across multiple cases if you want. What is this looks like 30 seconds or so filling in the rest of the definition of base count.  Okay, any suggestions suggestions for how we should fill in this definition for base count?  Europe  Does a couple things I want to highlight highlight about this. So interesting is you  Aspira were very explicit and sort of explanatory and matching the basis step in this answer saying look when they're not equal. I mean we could just write and bass count of SP2 there when they're in a not equal case. We don't necessarily have to write 0 + that's not going to change their answer at all. But it makes it very nice and parallel to the bases step where it's clear that this is not responding to zero and the corresponding to what these matchup.  And then the other thing that is in really important to notice and it's definition is that be too isn't really changing it all we just take it as an argument and then pass it on as an argument to the the next call or the next use of Base count keeps getting passed through all the records of calls in bass count. So that information stays consistent and just like in length. We're sort of splitting up the Strand into a prefix and the base at the ends using the recursive definition and I'm passing on just the prefix so that keeps getting smaller.  I'm afraid if we were to trace this out. We start to see the difference between adding a zero is in the ones in each step of the writing them in this piecewise style where we write multiple cases on the right hand side using this is when Clauses of these winds statements to decide when each case supplies, we need to be a little bit careful here to make sure that we're actually covering all the cases definitely in this case. It's it's pretty clear that you either be one is equal to be too or be one isn't equal to be too. So I haven't missed any cases here, but it would be a problem if we describe the set of cases of incomplete left some input or some case on cover. I'm so it's something we should be careful about when writing these definitions.  So, I'm one question. I want to ask about this definition. Actually. Let me just copy this definition down cuz I like the way it's written.  I guess I just want I just want hands for X. I want you to talk about it for briefly but really briefly. So answer this question the witness for this case, so just think about it. I think about it for like 10 seconds first question and answer.  Yep.  That's a good question. So let me try and construct a case where we might worry about that. So for example, if this was not a sequence of bases cuz there's only four bases. That's a nice finite set. So we always know that B1 and B2 will be than this by night said what if it was a sequence of number of natural numbers, we could still have cases on finite set of cases for let's say two natural numbers be that way. If we needed to do something different for every natural number and it was like a when's loss for each one. We wouldn't be able to write that function as a piecewise function. We would have to find some way to sort of the space of natural numbers into these Predators finite number products that describe those cases.  It's like this fundamental thing and writing functions over infinite domain is that you have to break down the infinite domain into a finite amount of population for each part of it.  hartsoe hands for this witness and for this Witness  So when does yeah.  So s equals A and B is equal to T in it so we could also have something like a GC and just putting that up so that we see if we can use these functions in the middle of the Quantified statements were used to using here right now and it makes total sense. They can be used as part of calculations. We could fill in these values and talked about the fact that this would produce a zero that would be equal to 0 in this entire Quantified statement would evaluate the truth. So just like its we can fill in values for these in evaluating down.  So I want to put up I don't expect you to internalize this whole slide right now. But what we did when we were thinking about this lecture and looking at different ways Things are Written In the book and different ways. We know these functions are written. We realized there's a bunch of styles of writing these recursively defined functions quite a few things. The middle one is the one that was on the slide except. I didn't write the 0 + when I wrote the middle one.  The top 100 list two basic steps and 2 recursive steps. So instead of saying there's a basis stuff in her car and it just list for different cases in about what's happening in each of the four different cases are the same. It's just how we describe breaking it out. So it's also okay to write all these different definitions for the function and all these different cases. And finally you could also Define base count by saying that it's just this giant piecewise function and they're all of the constraints are in the piecewise conditional Clauses. So base count of sb2 is equal to Big split and everything else is defined by the piecewise function is all of these will be reasonable ways to Define base count actually didn't feel it in my mind it definitely the range of this.  Range that makes sense for this definition is the natural numbers include 0 broad definition in this class.  It would be different ways of writing this and there's different styles. We could use to write it. I like the middle style the best this is not a it's like a sort of a personal preference. But also I like it that it vary directly matches the recursive definition of beset by having two cases that correspond to the definition of the set. So these is one two cases correspond to what we Define for the set and then each of those cases as a piecewise definition for like the equality check, but all of these you will see in a reasonable ways to write this definition.  So I want to talk about two more interesting recursive set definitions and a couple properties of them just to give you a sense of what kinds of things we can Define in the style. So we have a double helix in one of two ways that takes into strands and returns true or false based on if they form a double helix, we just defined it using... We just to find it as this pair using. Dawson said bro, I over arranged it was something strength. This is another way to define the set of double helix has the Seas helix's it sounds kind of cool the set of double helix. He's not sure.  And so the idea here if we want to think about this as one of these is not one of these generating cases is the basis step tells us about those four patterns that are allowed.  And then the recursive step tells us what we're allowed to add at the end of both of them. So 480 we would be allowed to add.  And then these two A's and teas that are out of the end correspond to viskase in the basis in the recursive step. We be allowed to add on 80 and then this would be ta and that would be the next step of the recursive step.  We be allowed to add on.  A g as long as we added as a c in the other spot and that would be this part of the recursive stuff.  And so on we can talk about continually building he's up and what this definition in the recursive step forces is that we always at on a new base at the end of both strands that we always have that on. I'm so we could imagine building this out.  One thing I want you to think about for a minute. Mr. The prompt on your sheet is pretty open-ended. I want you to think about what are some interesting properties we could right now that we have the functions base count and lengths and things like that. What are some interesting properties? We could write down may be using some fraules or some exist that talk about relating the results of this function cause it's useful to talk about this is an open-ended question for a minute because we're going to start asking you to come up with definitions and interesting properties more and more in home works as well. So question I have what are some interesting properties of double helix double helix fees.  What are interesting properties in Chinese for all exists in some of the functions above?  Yeah.  Yeah.  Interesting interesting. So I'm going to sidebar this I'm going to talk about this you can keep them talking about this other what are interesting properties to write down what you just described because I think it's it's interesting. So you decide what if in the recursive stuff we said if S1 S2 using H and S3 S4 is in NH then  S1 and you said S3 S2 S4 is in h interesting interesting.  There's some pretty interesting questions. We could ask. Let's say that we left the bases step the same.  Let's call this new definition.  each prime  So it's different than H now. There's an interesting property question. We can ask we can ask is H equal to H Prime?  Are the are these to recursively defined sets going to contain the same elements. It's a really interesting question. It's a really interesting question their properties like this and questions like this that are going to be the style of things. We try to prove next week. And in this case, I think it's true that if you can eat these things together and the proof is probably kind of interesting because it means there's multiple ways to build up the same double helix, right? You could be subdue subdue Heelys. He's right only one way to build up.  I don't think of an interesting property in the meantime interesting properties. Yeah.  Yep.  Interesting interesting Sierra trying to talk about the relationship between accounts in the size of the the two sides of the double helix interesting interesting. So something like  You said for all and maybe?  and for all specifically  so like for all S14 all as to where S1 S2 is in H.  There's some property you had.  And I'm just going to pick like a for it so that we don't say for all be got to keep the property on the screen.  Interesting. So the base count of sa is equal to n minus the base count of a S&S to true or not. But this is a really interesting property. This is a really interesting property to ask about right. It would be really interesting to ask.  To prove or disprove this property and how we will go about doing that. So I'm not going to say whether it's true or false. I'm just feeling like I can't think fast enough to justify it to myself one way or another but it's definitely an interesting shape of property that we could talk about proving or disproving. I can put that property up and say well it will be interesting to ask what are the relationships between base counts on the two sides. We also might relate the count of Azon one of the strands of the counts of t's on the other strand and nose to probably matchup other properties like that. We could ask Justin kinds of properties to talk about here and having this recursive definition is going to let us break these values down in a better way than just talking about like... Which we can't really work with that. Well, so that's one thing we'll be addressing next week because  Are super related to some particular programming constructs that you have seen or we'll see depending on what's taking you where you are in the curriculum, but there's a direct relationship here. So there's this structure in programming called a linked list that talks about building up list of numbers and we can actually use this kind of recursive definition to talk about linked open close bracket as empty list. The basic steps are always list and you have a natural number then you can build the temple that has that natural number followed by the rest of the list and that's also a link. That's also a member of the set of linked list.  The bass on this definition which of these items below are elements of a set of linked list, which of these are elements of this set.  4 3 2 1  Okay. So for each of these were going to ask like how it would break down based on this definition. So for a weird looking at this one to two people the recursive staff for the basis definitely doesn't matter because it's not just a single value proof that it's an element of the set using the recursive step we have to have that too is an element of L. And that one is an element of the natural numbers. It doesn't matter either the cases. It's neither a two-pole nor the empty list. So this isn't true. So this whole item can be true of the same. Basically the same argument except the empty list that's in the second position in the tubule.  So this is definitely a linked list that allows people to be a linked list. All of these are either to two poles or the empty list. So this can't match. And in this last case we have this nested and each one ends up matching the definition the ones a natural number and two three empty list structure is in the illicit phone number in the three structures in the lisset because three of the natural number and the empty listed in the list that also works by this repeated definition of the recursive rule.  This structure of basically nested tuples and Nancy list actually really directly talks about this linked list structure that you'll see in courses like CSE 12 and things like that. So we're going to be the theme of the next week or so is that we're going to be working with recursive definition working with examples of these values.  Can you see San Diego podcast for more visit podcast. "
}