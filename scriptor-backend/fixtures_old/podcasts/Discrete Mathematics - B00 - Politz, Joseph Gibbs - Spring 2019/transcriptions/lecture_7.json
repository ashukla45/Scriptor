{
    "Blurbs": {
        "English Kent angle us up a little bit like sometimes in English. We don't mean the same thing with if then as this table so rely on this definition when you see implication in a proposition So I want to get some practice working with compound propositions. This is propositions where we have multiple different sort of parenthesized Expressions put together and I want to talk about different ways. We ": [
            390.4,
            418.8,
            13
        ],
        "Listen to a podcast. All right. Let's get started a happy Monday everybody. Welcome back. I hope you had a great weekend. So just a reminder about a couple of upcoming deadlines. So today the first main homework assignment is done. That's the one with representing colors for example in the change algorithms. So that homework is due tonight. And then there'll be a follow-up for that that's released tomorrow ": [
            1.9,
            47.9,
            0
        ],
        "Okay, I just got this one briefly just to make sure we're on the same page. and picking again with the results of discussing this + 543 2 1 Okay, cool, so they weren't D2D Great, I didn't teach you that you taught each other that that's cool. Alright, so yeah, he or not. He is a tautology here. And the things to do here is check with a truth ": [
            1745.7,
            1828.1,
            43
        ],
        "Q or R without parentheses around them and that means the same thing as print the sizing it either way. It'll be true. If any one of those values is true and in the same holds true for an where we can move the parentheses around and get the same result. You can do the truth table to check sequences of an only if all of those values are true ": [
            2707.7,
            2729.4,
            66
        ],
        "So it should be a compound proposition that uses the variables in R and somehow combines them together with the logical operations. We've learned to make sure that when we get Send a pic uhler Road here. We get the output this specified. So how would you build the compound proposition or Alexa will talk about some specific ways to do this, but there's lots of ways to do algorithms ": [
            2375.9,
            2400.8,
            58
        ],
        "True Q and Q is true. Then this produces for copying is down or anything is everyone agree with these Rose. This is what it looks like when they're not logically equivalent. We drop the truth truth table and something different. the first and fourth used to interesting take a minute folks if you had these filled in or not. Take one minute and check. Feel free to discuss and ": [
            1495.6,
            1552.1,
            37
        ],
        "a lot of ways to look at these propositions and then come up with nice like really nice English descriptions of what's going on there by simplifying them in our heads or relating them to some situation that makes sense. If the question is how to calculate the compound proposition their strategies described as a nice observation about this and the relationship between all the variables there in this compound, ": [
            617.9,
            652.0,
            19
        ],
        "a program so this actually really does come up in analyzing software which of the following which of these five choices matches this case of being a tautology. So is logically equivalent to true meaning for the right where all the truth values are true. No matter what p&q are which is a tautology. Which is a tautology. Remember to close the first round and five for 3. 2 1 ": [
            1696.9,
            1744.9,
            42
        ],
        "a proposition for any of those things happening or any of those things happening. So if we come up with variables assignment to the variables that put us in any one of those four rows one of these propositions will be over all true. Overall True Result. This is definitely not necessarily the shortest proposition that exactly matches this table. It's actually quite long but it definitely works. It definitely ": [
            2794.8,
            2827.7,
            69
        ],
        "about is I'll make new tables in the truth table for the two pieces. So I knew column values of P or Q here and I can just take that part of a compound proposition and fill it in the values for P or Q down this column into our true. So this is true and Q are true. So this is true. One of them is true in the ": [
            449.6,
            480.5,
            15
        ],
        "actually you're going to have to fill in a few to make much progress on it. But I want you to identify some of these that you think might be logically equivalent something in this table that might be lodging logically equivalent. Okay, I'm going to ask now so there's like a lot of this table to fill in so I'm actually intentionally expecting that there's some for you to ": [
            1243.7,
            1449.9,
            35
        ],
        "and false and variables that can hold true and false and show a little bit about how to work between truth tables and the expression forms of these propositions. So I want to I want to bring you the definition for the new definition and it's related to the problem. We had on the screen at the end of the day on Friday. And it was this statement that a ": [
            106.8,
            130.9,
            3
        ],
        "and so this column should be this column that we want to have for the compound proposition should be true only when both of them. So now the process of copying this over I'm not looking anymore at any of this. I'm only looking at the compound columns in order to do this this column calculation. And we get falses wherever there's at least one false. Yeah, so there's actually ": [
            551.5,
            617.9,
            18
        ],
        "and sort of intuition based ways to do this, but I want you to try this from feel free to discuss and talk about strategies. Does he do this? All right, so I don't I don't expect that anyone necessarily went through all those here and figured this out. What's the first thing you tried? I just think the one idea is with his three variables here. So let's take ": [
            2400.8,
            2523.2,
            59
        ],
        "and useful. It's also interesting to go backwards to say we have a particular truth table and we would like to come up with a proposition that reflects the truth table for the compound proposition large. And that's an interesting question because one reason that's interesting is it says if we have a particular result, we'd like to get a particular truth table result. We'd like to get Expressions correspond ": [
            2312.9,
            2341.4,
            56
        ],
        "any of these rows at the variables don't reflect any of these roads. And so what we can do here is take the the same idea from the last strategy of describing exactly that would be friends not q and not are and then we can negate it. So we take that whole thing in the gator. And I'm showing up a little equivalents hear that lets us write this ": [
            2873.6,
            2903.3,
            71
        ],
        "are logically equivalent hum. All right. I think there's some good agreement in the room. And I think that mechanically you can fill these you can fill these in for practice. I'm not going to spend a lot of time filling in the rest of this. But the point is we can identify some of these Expressions fill in the truth table see if they're equal and then we know ": [
            1600.1,
            1628.6,
            39
        ],
        "arrow q and what this means is that P implies q and Q implies P one way to write this which is true when he and Q are exactly the same. So it's kind of like a compliment X or XR is true when p and Q are different and this biconditional is true when they're exactly the same. So if they're both false it produces true and if they're ": [
            974.2,
            1010.8,
            27
        ],
        "be true if you was false than this thing will be false. But if the first part is false then no matter what the value of Q whole statement ends up being true. Then it might be scanned. It might not be to be reasonable outcome. This this operation so we talked about how and is called conjunction or disjunction operations called implication and I just I want to be ": [
            187.6,
            218.2,
            6
        ],
        "because it is something I run into in programming sometimes. Okay. So the one thing to think about that is what are examples of prepositions that are logically equivalent always produce the same results in them out of their variables and there's a big table here. I want you to think about this form and I want you to look at these fill in some if you want. I will ": [
            1221.0,
            1243.7,
            34
        ],
        "both simplify code and sometimes we can actually see if you were operations that needs to happen at the same point but this is actually where we're trying to stay strong things about what we know at different points in a program and we'd like to be able to substitute one expression for another knowing it gets the same results for lots of other reasons, but I like that one ": [
            1188.7,
            1221.0,
            33
        ],
        "both true, it produces true otherwise, and say something like if and only if That's a good question. Yeah, so all of these do have a specific usually Beyond like and or xor and not I usually end up looking them up because the ones that used in those are the common 100 representation and it's actually it's a good question to ask if we could always translate these things ": [
            1010.8,
            1062.0,
            28
        ],
        "but there's definitely ways to think about this knowledge about Peta figure things up to Okay, so I want you to work on this last column for a minute just because I want you to try a few try doing the setup of this Yourself animal move on but I want you to try doing this last call him cuz also practice with implication which we just talked about. So ": [
            652.0,
            683.0,
            20
        ],
        "clear that this is pretty much just a definition English example is maybe helping us understand a situation where the definition makes sense but this is really just a definition. This is if we use this arrow symbol, we mean implication we might read it in English as saying if P then q and that truth table is what defines implication if the first if the thing before the arrow ": [
            218.2,
            243.0,
            7
        ],
        "could try a Computing these and so let's take I want to show take this first one p or Q & P or are so reading this out loud. This is the one I'm looking at and T or r So it's worth talking about how we would figure out the different pieces here. And one thing I do in some of these situations when a compound proposition to think ": [
            418.8,
            449.6,
            14
        ],
        "did that is also a good strategy in many of these cases IG. Actually two specific strategies, although they're very closely related always work there a mechanical process there an algorithm. We could take them and build an algorithm out of them and always get a proposition that produces the same results as a truth table. They're not necessarily the strategies that were just described and they're not the only ": [
            2583.2,
            2611.4,
            61
        ],
        "discover that a condition actually always evaluates to true in the compiler could make the program Better Could optimize the program by getting rid of some code not a real eyes, and or maybe they intended to do this. Have you ever written a program? Where at the top you say like variables bullying? Are Boolean debug equals true and then you flip it from Falls to true to control ": [
            1863.5,
            1891.0,
            45
        ],
        "do on your own if you want to fill some more in after class has practice in two columns. Actually, let's start with this one. Did anyone notice that we're definitely not logically equivalent equivalent that were not yeah. The second and third one. What did you have is truth values in the second and third columns. true false false false false true true true Hey, so when p is ": [
            1449.9,
            1495.6,
            36
        ],
        "do we get we get false if any of them or false, I just wanted to put that up. To describe the situations were these Rose produce the situations were these what we can do is just look at what we look at the values of the variables in the first row corresponds to you being true and feuding true and true that produces true when we're in the situation ": [
            2729.4,
            2757.1,
            67
        ],
        "down into simpler Gates and or xor not if we actually need to build the picture using a smaller number of gates there are pictures. So this is so if I conditionals this is most of the propositional operators will need so and or not implication xor and biconditional are the ones will be using most often. Now I want to talk a little bit about some properties of propositions ": [
            1062.0,
            1094.5,
            29
        ],
        "first part isn't true basically if the sent from unknown part was false, we don't necessarily need it to be from an unknown sender. It could be from an unknown sender. We might still scan for viruses and he is being sent from manone and Q is scan for viruses if it was sent from unknown. So if p is true, then you must be true for the statement to ": [
            161.7,
            187.6,
            5
        ],
        "first round. I'm going to close this in 5 4. 3 2 1 all right, and I have a little more discussion cuz I'm an open it up. Again. There's a variety of answers that people gave so I want you to discuss for a minute and it'll open it up again. Okay, click it again with the results of discussing this one 5 4 3 2 1 so lots ": [
            1984.8,
            2099.8,
            48
        ],
        "for this first grow. In the second row that's corresponds to PB and Q are being P being true to being true and are being false. So that proposition describes the situation of the second row and so we can take a proposition and use it to describe and use it to describe each row. I'm describing each row. And so those are those are the ways to describe describe ": [
            2757.1,
            2794.8,
            68
        ],
        "have true. true true and this one has a slightly different pattern at the end where we see the false true-false at the end. So both of them showing up different pattern cuz we're only getting the false and fewer are when both of them. Then to calculate this last this column with the end. I have the two pieces together so I can just consult the rules for an ": [
            514.9,
            551.5,
            17
        ],
        "here actually a more specific thing. I want to talk about for the rest of class today. So we just spent a bunch of time taking these propositions in using truth tables as a way to think about the propositions that's interesting useful helps us think about logical equivalence helps us calculate the result for any pair of inputs or any set of inputs for the variables on this nice ": [
            2283.8,
            2312.9,
            55
        ],
        "if and only if he's interesting because that would force us to be in the this would force us to be in one of these two rows, which would be always true. Questions about this example of contradictions you feel the results. Tautology is in contradictions two interesting kinds of logical equivalence where things are equivalent to true for apologies or false for contradictions. So I'm not going to talk ": [
            2214.7,
            2253.1,
            53
        ],
        "in General Tso. One of the things that's interesting to talk about in terms of propositional logic is when two propositions that look different always produce the same results no matter what value we picked for their variables on a say that again cuz it's look different actually produce the same result no matter what values we pick for the variables. That's actually a really interesting case to think about ": [
            1094.5,
            1125.3,
            30
        ],
        "just be aware tonight. The homework is due then Thursday. We're going to keep having his usual to deadlines of a follow-up for the last homework and the warm-up for the next one. Anyway questions before we get started. Okay. So what we're going to do today is get a bunch of practice with proposition so that your practice with some of the relationships between true and false between true ": [
            80.2,
            106.8,
            2
        ],
        "main idea here is looking at each row coming up with the proposition for that row and then combining them together using either and or or sandiego.edu ": [
            2990.4,
            3005.9,
            75
        ],
        "message is scan for viruses whenever the message was sent from an unknown system. One of the things someone said during class as a way that they wanted to describe. This was if this message was sent from an unknown sender then hitscan I am one of the observations we were making at the end of class on Friday is that if the message came from someone else if this ": [
            130.9,
            161.7,
            4
        ],
        "morning. So after the homework is due this going to be a follow-up completely on your own so you don't work with your partner anymore and it's going to test the things from the homework assignment is going to go out. I'm crazy to talk about that and that's going to be practicing some of the things that we learned last week in preparation for homework on that material. So ": [
            47.9,
            80.2,
            1
        ],
        "next row. So that results in true four or true true true. And then finally there's these two rows hours produces false. Then I can take the other side of the compound proposition hear another chunk of the expression, which is T or r. And feel distant and so now I'm looking at the p in the are columns. I'm in still doing the or operation on them. So we ": [
            480.5,
            514.9,
            16
        ],
        "not, pee wee know that we're going to end up in the rows of this truth table where the values are different because p and not-p could never be never be the same value folks could never produce the same value if he'll be opposites of one another and so these must produce false C and D are always going to end up producing. values in these two rows of ": [
            2151.3,
            2172.6,
            51
        ],
        "of lots of the first the first round that was much more spread around but then people converged on C&D is the answers answers if they picked So this is interesting. So what we would have to ask her is for. Implies not-p, are there any Rose and that truth table that produce true and there are because if p is false a produces troop so we can easily find ": [
            2099.8,
            2126.0,
            49
        ],
        "of something prince in your program somewhere, right that condition could end up ended in order with other things, but the compiler can tell in a State might be able to tell in an if statement. Oh that'll always evaluate to Tru. I always run this or that always evaluate the false. I never run the program. Okay, so let's talk next about contradiction an example of a contradiction. So ": [
            1891.0,
            1918.8,
            46
        ],
        "of the variables in the truth comes out and no matter what values we assigned to the variables in a contradiction false comes out. This is a really important property because I can tell you things like the condition of that if always evaluates to true so we don't need the else Branch at all something you could learn if there was a tautology in the condition of an In ": [
            1669.1,
            1696.9,
            41
        ],
        "of those cases happen get a True Result that there's an aura underneath where if we can describe those Rose The Situation's for those Rose and an order them together we can we can get through when we expect because of any one of them is true. We want to produce true. I just want to make a comment about and and or buts and and or have a special ": [
            2663.4,
            2685.6,
            64
        ],
        "only just calculated because we have a true and a false. He said that's actually the case that makes implication be false. If we go back when we have a true for the first preposition in the falls for the second. That's what makes this be so all these cases where we have true and false are going to produce false. So 1 2 3 4 Five in a row ": [
            880.8,
            911.4,
            24
        ],
        "or Q. We've already done to work for prr so we can make one column here. That's the negation of or not or are we going to have the inverse of the opposite of the Tog? All those are all words that people used to describe this. On Friday, but the opposite value when we see true. We put a false when we see a true and now we have ": [
            825.7,
            851.8,
            22
        ],
        "p in this case is true. Then the statement is true only when Q is true it's false if he was false and if anything before the arrow is false than the whole statement is always true no matter the value of Q. So there's only this one place in the table where we get a false result for implication. And the only time that happens is if p is ": [
            243.0,
            262.6,
            8
        ],
        "property here that if we I do let's just take the example in the top left here peor Que in parentheses in order that with our it doesn't matter where we put the parentheses in the sequence of oars. If it's just a sequence of oars, we can move the parentheses around and so will start but we're going to start writing propositions where we write things like P or ": [
            2685.6,
            2707.7,
            65
        ],
        "something that produces true for this position. If we make PB truth and the things are left of the arrow not pay will befall so get some True Value is there then we get to C&D and this truth table on the right helps us with c and end with c and d wear when we have not seen if and only if he or P if and only if ": [
            2126.0,
            2151.3,
            50
        ],
        "table. We might have some information about some of these in the intuition is helpful. And then we can always write out the truth table to check ABC and E will see that there is a foster. Yeah, that's really interesting. So what I meant is as a what I would let me say one more one or two more sentences about that. So in the compiler the compiler might ": [
            1828.1,
            1863.5,
            44
        ],
        "talk about it. Alright, okay. So if you would so I'm going to ask you to do something in a minute. I do this in some of my classes. I don't think I've done it in here yet. So I'm going to ask you to hum in a minute like you're going to like humming. Okay. So if you think that these are a lot different column 1 and 4 ": [
            1552.1,
            1600.1,
            38
        ],
        "talk about these things will be working with these things more this quarter. But the first strategy where we came up with an for the describe each of the rows and then ordered them all together is called disjunctive normal form or dnf disjunction because we're using oars between things and then this other version is called conjunctive normal form because we're using Anne's between the separate sub expression. the ": [
            2962.7,
            2990.4,
            74
        ],
        "than the other it might be nice to use the smaller one in a program for some reason. Interesting. So if you noticed that these two like two or three or four different expressions are different propositions were actually doing the same thing, even though they look different you could maybe write one helper in one place and use it and all those places and simplify the code. We can ": [
            1158.5,
            1188.7,
            32
        ],
        "that produce false then we have true and true Consulting the table that produces. true and then if the first proposition is false, then we get true no matter what the value of not prr. So he's lost Hills and do these calculations and it's usually just good to do something like this form to be mechanical about it and be careful about it and we'll keep seeing some ways ": [
            911.4,
            943.9,
            25
        ],
        "that those are interchangeable with Expressions always mean the same thing. There's two special kinds of a logical equivalence that are particularly interesting and knees are actually quite interesting in the programming. They're called tautology and contradiction. I'm so these are just words to Define tautology means she is a proposition that's logical and contradiction is a proposition that logically equivalent to false. So no matter what variables assign values ": [
            1628.6,
            1669.1,
            40
        ],
        "the biconditional truth table has produces false correction doesn't the place we put the negation for this doesn't change the fact that we're doing this operation on that must be different which produces false sort of the opposite of because if we did this get a tautology for xor cuz it would be definitely two different values for x or I'm in n p if and only if p p ": [
            2172.6,
            2214.7,
            52
        ],
        "the definition before we go on. Yeah, that's a really good point. So let me let me let me re characterize out a little bit cuz the way you asked that question is actually incredibly helpful. The captures are all four of these roses the offense statement. I would say something like that in the first row. The message was the message with scan for virus. The first part is ": [
            284.4,
            332.6,
            10
        ],
        "the really interesting case to think about in terms of programming. I want to ask this question. Why might it be useful to know the two propositions that look different. I'll always produce the same result in terms of programming. Why might that matter in a program. Why would you ever care? Shrink was in there. So if we had to drop has a two compound propositions one was smaller ": [
            1125.3,
            1158.5,
            31
        ],
        "these two columns P or q and not in. These are the ones we can combine together in order to fill in this last bro. And we just need to be a little bit careful to apply the definition of implication correctly here. What's the what's the top row of this column is based on the values that we just talked? The top row this what should go here. It's ": [
            851.8,
            880.8,
            23
        ],
        "through all these I just want to make a point that there's many interesting and useful logical equivalences that we can use when we want to reason about propositions. These are all listed in the book. And so they're all is more useful for any kind of thinking we want to do to simplify propositions down or Reason about propositions, but I'm not going to talk through all of these ": [
            2253.1,
            2283.8,
            54
        ],
        "to die on different kinds of examples and in different ways to introduce one visit on your worksheet. I want introduce one new symbol. He is going to stick a new slide in so I can dry before we go on. There's a symbol on your worksheet as a top right but says biconditional and it has the this drawn on their pee in this double arrow Q. p double ": [
            943.9,
            974.2,
            26
        ],
        "to logic gates, which also tell us a little bit about how we might build a circuit specific specific up from some desired outcome in a truth table given a truth table. So there's a truth table here and there's a question on the back and I want you to think for a minute or two about how you can build a compound proposition the reflexx exactly this truth table. ": [
            2341.4,
            2375.9,
            57
        ],
        "true and Q is false. So this is what we mean when we say implication and we will read this out loud as these if-then statements. So if some if one proposition than another propositions how it read it out loud before we gone we're going to use this a bunch today to get practice with it, but I just want to make sure there's a chance for questions about ": [
            262.6,
            284.4,
            9
        ],
        "try and fill in this last for a couple minutes right now. All right. So I'm one question I have here is based on the work. We did already to calculate this first compound proposition. What column should we add that will be most helpful hear what column is going to be most helpful to adhere? not Not pee or are right because we've already done the work for P ": [
            683.0,
            825.7,
            21
        ],
        "unknown. The message was sent from an unknown sender and a message with scan for viruses. That would be part of that would be true for this if-then statement, right the results of those two things together will be true for this offense team as an if-then statement false and true row, I would just say the message was sent from an not unknown sender or unknown sender and it ": [
            332.6,
            361.3,
            11
        ],
        "was scan for viruses, which is totally reasonable in true under the sea. Cuz if it's not sent from unknown sender, we don't we might scan it. We might not. weird questions about this definition Show me see the arrow we meet application and we mean this truth table. That's the most important thing to pay attention to cuz like we just saw speaking out this definition of implication in ": [
            361.3,
            390.4,
            12
        ],
        "way to do this but they are mechanical and always work. So the first idea is to identify all of the rose that produce true as a result and the idea is let's build a proposition for combines a way to get the true in the first row a way to get the true in the second row a way to get the true in the fourth row and a ": [
            2611.4,
            2636.7,
            62
        ],
        "way to get the true in the seventh row four ways to get true. Let's try and describe those four ways individually and then put them together. One way to talk about doing this is Eminem We want to make the first wrote True or the second row true or the fourth row true or the seventh row true. If we can come up with a proposition that make any ": [
            2636.7,
            2663.4,
            63
        ],
        "what's try and split sort of on each variable other strategies the people try other strategies. Oh, that's interesting. So the bottom for the office of the top four so we can figure out some kind of negation here. We can look for patterns throughout the table people started trying to use Are the strategies? Yeah. Okay. You try basically you saw some structure and tried something. Right? So I ": [
            2523.2,
            2583.2,
            60
        ],
        "whenever we have this negation, we will talk about this more. I'd actually won a glass over in a little bit for now, but the main thing is the thing before the equal sign is the same strategies sequence, of course, but the main thing that's important here is this part where the thing inside the parentheses exactly matches that bottom row we can do it for all the rows ": [
            2903.3,
            2934.3,
            72
        ],
        "which one of these is a contradiction so that again so this should be producing values in the column with falsetta's for all possible assignments of P all possible assignments a p And just a reminder the truth table for the biconditional that we described earlier. Call askew. Is is true only when these are the same value so the truth table here is this for the biconditional? For the ": [
            1918.8,
            1984.8,
            47
        ],
        "with false. Except this time we want to make sure we're not in any of those. We need to avoid all of those instead of just getting into one of them and then we and them together instead of ordering them together because we need to avoid all of those cases. You know the one minute I have left. I just want to give you some words that we can ": [
            2934.3,
            2962.7,
            73
        ],
        "works. This process always produces something that exactly matches the table. Okay, so let's think about think about if there's any other ways to do this one thing we could do is let's try coming up with the proposition that instead of trying to get into a true. True rose. What about a proposition that avoids all the false Rose is Rose. It only produces true. If we're not in ": [
            2827.7,
            2873.6,
            70
        ]
    },
    "File Name": "lecture_7.flac",
    "Full Transcript": "Listen to a podcast.  All right. Let's get started a happy Monday everybody. Welcome back. I hope you had a great weekend. So just a reminder about a couple of upcoming deadlines. So today the first main homework assignment is done. That's the one with representing colors for example in the change algorithms. So that homework is due tonight. And then there'll be a follow-up for that that's released tomorrow morning. So after the homework is due this going to be a follow-up completely on your own so you don't work with your partner anymore and it's going to test the things from the homework assignment is going to go out.  I'm crazy to talk about that and that's going to be practicing some of the things that we learned last week in preparation for homework on that material. So just be aware tonight. The homework is due then Thursday. We're going to keep having his usual to deadlines of a follow-up for the last homework and the warm-up for the next one. Anyway questions before we get started.  Okay. So what we're going to do today is get a bunch of practice with proposition so that your practice with some of the relationships between true and false between true and false and variables that can hold true and false and show a little bit about how to work between truth tables and the expression forms of these propositions.  So I want to I want to bring you the definition for the new definition and it's related to the problem. We had on the screen at the end of the day on Friday.  And it was this statement that a message is scan for viruses whenever the message was sent from an unknown system. One of the things someone said during class as a way that they wanted to describe. This was if this message was sent from an unknown sender then  hitscan  I am one of the observations we were making at the end of class on Friday is that if the message came from someone else if this first part isn't true basically if the sent from unknown part was false, we don't necessarily need it to be from an unknown sender. It could be from an unknown sender. We might still scan for viruses and he is being sent from manone and Q is scan for viruses if it was sent from unknown. So if p is true, then you must be true for the statement to be true if you was false than this thing will be false. But if the first part is false then no matter what the value of Q whole statement ends up being true. Then it might be scanned. It might not be to be reasonable outcome.  This this operation so we talked about how and is called conjunction or disjunction operations called implication and I just I want to be clear that this is pretty much just a definition English example is maybe helping us understand a situation where the definition makes sense but this is really just a definition. This is if we use this arrow symbol, we mean implication we might read it in English as saying if P then q and that truth table is what defines implication if the first if the thing before the arrow p in this case is true. Then the statement is true only when Q is true it's false if he was false and if anything before the arrow is false than the whole statement is always true no matter the value of Q.  So there's only this one place in the table where we get a false result for implication. And the only time that happens is if p is true and Q is false. So this is what we mean when we say implication and we will read this out loud as these if-then statements. So if some if one proposition than another propositions how it read it out loud before we gone we're going to use this a bunch today to get practice with it, but I just want to make sure there's a chance for questions about the definition before we go on.  Yeah, that's a really good point. So let me let me let me re characterize out a little bit cuz the way you asked that question is actually incredibly helpful. The captures are all four of these roses the offense statement. I would say something like that in the first row. The message was the message with scan for virus. The first part is unknown. The message was sent from an unknown sender and a message with scan for viruses. That would be part of that would be true for this if-then statement, right the results of those two things together will be true for this offense team as an if-then statement false and true row, I would just say the message was sent from an not unknown sender or unknown sender and it was scan for viruses, which is totally reasonable in true under the sea.  Cuz if it's not sent from unknown sender, we don't we might scan it. We might not.  weird questions about this definition  Show me see the arrow we meet application and we mean this truth table. That's the most important thing to pay attention to cuz like we just saw speaking out this definition of implication in English Kent angle us up a little bit like sometimes in English. We don't mean the same thing with if then as this table so rely on this definition when you see implication in a proposition  So I want to get some practice working with compound propositions. This is propositions where we have multiple different sort of parenthesized Expressions put together and I want to talk about different ways. We could try a Computing these and so let's take I want to show take this first one p or Q & P or are so reading this out loud. This is the one I'm looking at and T or r  So it's worth talking about how we would figure out the different pieces here. And one thing I do in some of these situations when a compound proposition to think about is I'll make new tables in the truth table for the two pieces. So I knew column values of P or Q here and I can just take that part of a compound proposition and fill it in the values for P or Q down this column into our true. So this is true and Q are true. So this is true.  One of them is true in the next row. So that results in true four or true true true. And then finally there's these two rows hours produces false.  Then I can take the other side of the compound proposition hear another chunk of the expression, which is T or r.  And feel distant and so now I'm looking at the p in the are columns. I'm in still doing the or operation on them. So we have true.  true  true  and this one has a slightly different pattern at the end where we see the false true-false at the end. So both of them showing up different pattern cuz we're only getting the false and fewer are when both of them.  Then to calculate this last this column with the end. I have the two pieces together so I can just consult the rules for an and so this column should be this column that we want to have for the compound proposition should be true only when both of them. So now the process of copying this over I'm not looking anymore at any of this. I'm only looking at the compound columns in order to do this this column calculation.  And we get falses wherever there's at least one false.  Yeah, so there's actually a lot of ways to look at these propositions and then come up with nice like really nice English descriptions of what's going on there by simplifying them in our heads or relating them to some situation that makes sense. If the question is how to calculate the compound proposition their strategies described as a nice observation about this and the relationship between all the variables there in this compound, but there's definitely ways to think about this knowledge about Peta figure things up to  Okay, so I want you to work on this last column for a minute just because I want you to try a few try doing the setup of this Yourself animal move on but I want you to try doing this last call him cuz also practice with implication which we just talked about. So try and fill in this last for a couple minutes right now.  All right. So I'm one question I have here is based on the work. We did already to calculate this first compound proposition. What column should we add that will be most helpful hear what column is going to be most helpful to adhere?  not  Not pee or are right because we've already done the work for P or Q. We've already done to work for prr so we can make one column here. That's the negation of or not or are we going to have the inverse of the opposite of the Tog? All those are all words that people used to describe this.  On Friday, but the opposite value when we see true. We put a false when we see a true and now we have these two columns P or q and not in. These are the ones we can combine together in order to fill in this last bro.  And we just need to be a little bit careful to apply the definition of implication correctly here. What's the what's the top row of this column is based on the values that we just talked?  The top row this what should go here. It's only just calculated because we have a true and a false.  He said that's actually the case that makes implication be false. If we go back when we have a true for the first preposition in the falls for the second. That's what makes this be so all these cases where we have true and false are going to produce false. So 1 2 3 4  Five in a row that produce false then we have true and true Consulting the table that produces.  true  and then if the first proposition is false, then we get true no matter what the value of not prr. So he's lost Hills and do these calculations and it's usually just good to do something like this form to be mechanical about it and be careful about it and we'll keep seeing some ways to die on different kinds of examples and in different ways to introduce one visit on your worksheet. I want introduce one new symbol. He is going to stick a new slide in so I can dry before we go on.  There's a symbol on your worksheet as a top right but says biconditional and it has the this drawn on their pee in this double arrow Q.  p double arrow q and what this means is that P implies q and  Q implies P one way to write this which is true when he and Q are exactly the same. So it's kind of like a compliment X or XR is true when p and Q are different and this biconditional is true when they're exactly the same. So if they're both false it produces true and if they're both true, it produces true otherwise, and say something like if and only if  That's a good question. Yeah, so all of these do have a specific usually Beyond like and or xor and not I usually end up looking them up because the ones that used in those are the common 100 representation and it's actually it's a good question to ask if we could always translate these things down into simpler Gates and or xor not if we actually need to build the picture using a smaller number of gates there are pictures.  So this is so if I conditionals this is most of the propositional operators will need so and or not implication xor and biconditional are the ones will be using most often.  Now I want to talk a little bit about some properties of propositions in General Tso.  One of the things that's interesting to talk about in terms of propositional logic is when two propositions that look different always produce the same results no matter what value we picked for their variables on a say that again cuz it's look different actually produce the same result no matter what values we pick for the variables.  That's actually a really interesting case to think about the really interesting case to think about in terms of programming. I want to ask this question. Why might it be useful to know the two propositions that look different. I'll always produce the same result in terms of programming. Why might that matter in a program. Why would you ever care?  Shrink was in there. So if we had to drop has a two compound propositions one was smaller than the other it might be nice to use the smaller one in a program for some reason.  Interesting. So if you noticed that these two like two or three or four different expressions are different propositions were actually doing the same thing, even though they look different you could maybe write one helper in one place and use it and all those places and simplify the code. We can both simplify code and sometimes we can actually see if you were operations that needs to happen at the same point but this is actually where we're trying to stay strong things about what we know at different points in a program and we'd like to be able to substitute one expression for another knowing it gets the same results for lots of other reasons, but I like that one because it is something I run into in programming sometimes.  Okay. So the one thing to think about that is what are examples of prepositions that are logically equivalent always produce the same results in them out of their variables and there's a big table here. I want you to think about this form and I want you to look at these fill in some if you want. I will actually you're going to have to fill in a few to make much progress on it. But I want you to identify some of these that you think might be logically equivalent something in this table that might be lodging logically equivalent.  Okay, I'm going to ask now so there's like a lot of this table to fill in so I'm actually intentionally expecting that there's some for you to do on your own if you want to fill some more in after class has practice in two columns. Actually, let's start with this one. Did anyone notice that we're definitely not logically equivalent equivalent that were not yeah.  The second and third one. What did you have is truth values in the second and third columns.  true false false false false true true true  Hey, so when p is True Q and Q is true. Then this produces for copying is down or anything is everyone agree with these Rose. This is what it looks like when they're not logically equivalent. We drop the truth truth table and something different.  the first and fourth used to  interesting take a minute folks if you had these filled in or not. Take one minute and check.  Feel free to discuss and talk about it.  Alright, okay. So if you would so I'm going to ask you to do something in a minute. I do this in some of my classes. I don't think I've done it in here yet. So I'm going to ask you to hum in a minute like you're going to like humming. Okay. So if you think that these are a lot different column 1 and 4 are logically equivalent hum.  All right. I think there's some good agreement in the room. And I think that mechanically you can fill these you can fill these in for practice. I'm not going to spend a lot of time filling in the rest of this. But the point is we can identify some of these Expressions fill in the truth table see if they're equal and then we know that those are interchangeable with Expressions always mean the same thing.  There's two special kinds of a logical equivalence that are particularly interesting and knees are actually quite interesting in the programming. They're called tautology and contradiction. I'm so these are just words to Define tautology means she is a proposition that's logical and contradiction is a proposition that logically equivalent to false. So no matter what variables assign values of the variables in the truth comes out and no matter what values we assigned to the variables in a contradiction false comes out. This is a really important property because I can tell you things like the condition of that if always evaluates to true so we don't need the else Branch at all something you could learn if there was a tautology in the condition of an  In a program so this actually really does come up in analyzing software which of the following which of these five choices matches this case of being a tautology. So is logically equivalent to true meaning for the right where all the truth values are true. No matter what p&q are which is a tautology.  Which is a tautology.  Remember to close the first round and five for 3.  2  1  Okay, I just got this one briefly just to make sure we're on the same page.  and picking again with the results of discussing this  + 543  2  1  Okay, cool, so they weren't D2D  Great, I didn't teach you that you taught each other that that's cool. Alright, so yeah, he or not. He is a tautology here. And the things to do here is check with a truth table. We might have some information about some of these in the intuition is helpful. And then we can always write out the truth table to check ABC and E will see that there is a foster.  Yeah, that's really interesting. So what I meant is as a what I would let me say one more one or two more sentences about that. So in the compiler the compiler might discover that a condition actually always evaluates to true in the compiler could make the program Better Could optimize the program by getting rid of some code not a real eyes, and or maybe they intended to do this. Have you ever written a program? Where at the top you say like variables bullying?  Are Boolean debug equals true and then you flip it from Falls to true to control of something prince in your program somewhere, right that condition could end up ended in order with other things, but the compiler can tell in a State might be able to tell in an if statement. Oh that'll always evaluate to Tru. I always run this or that always evaluate the false. I never run the program.  Okay, so let's talk next about contradiction an example of a contradiction. So which one of these is a contradiction so that again so this should be producing values in the column with falsetta's for all possible assignments of P all possible assignments a p  And just a reminder the truth table for the biconditional that we described earlier.  Call askew.  Is is true only when these are the same value so the truth table here is this for the biconditional?  For the first round. I'm going to close this in 5 4.  3  2  1  all right, and I have a little more discussion cuz I'm an open it up. Again. There's a variety of answers that people gave so I want you to discuss for a minute and it'll open it up again.  Okay, click it again with the results of discussing this one  5 4 3 2 1  so lots of lots of the first the first round that was much more spread around but then people converged on C&D is the answers answers if they picked  So this is interesting. So what we would have to ask her is for. Implies not-p, are there any Rose and that truth table that produce true and there are because if p is false a produces troop so we can easily find something that produces true for this position. If we make PB truth and the things are left of the arrow not pay will befall so get some True Value is there then we get to C&D and this truth table on the right helps us with c and end with c and d wear when we have not seen if and only if he or P if and only if not, pee wee know that we're going to end up in the rows of this truth table where the values are different because p and not-p could never be never be the same value folks could never produce the same value if he'll be opposites of one another and so these must produce false C and D are always going to end up producing.  values in these two rows of the biconditional truth table has produces false correction doesn't the place we put the negation for this doesn't change the fact that we're doing this operation on that must be different which produces false sort of the opposite of because if we did this get a tautology for xor cuz it would be definitely two different values for x or  I'm in n p if and only if p p if and only if he's interesting because that would force us to be in the this would force us to be in one of these two rows, which would be always true.  Questions about this example of contradictions you feel the results.  Tautology is in contradictions two interesting kinds of logical equivalence where things are equivalent to true for apologies or false for contradictions.  So I'm not going to talk through all these I just want to make a point that there's many interesting and useful logical equivalences that we can use when we want to reason about propositions. These are all listed in the book. And so they're all is more useful for any kind of thinking we want to do to simplify propositions down or Reason about propositions, but I'm not going to talk through all of these here actually a more specific thing. I want to talk about for the rest of class today.  So we just spent a bunch of time taking these propositions in using truth tables as a way to think about the propositions that's interesting useful helps us think about logical equivalence helps us calculate the result for any pair of inputs or any set of inputs for the variables on this nice and useful. It's also interesting to go backwards to say we have a particular truth table and we would like to come up with a proposition that reflects the truth table for the compound proposition large.  And that's an interesting question because one reason that's interesting is it says if we have a particular result, we'd like to get a particular truth table result. We'd like to get Expressions correspond to logic gates, which also tell us a little bit about how we might build a circuit specific specific up from some desired outcome in a truth table given a truth table. So there's a truth table here and there's a question on the back and I want you to think for a minute or two about how you can build a compound proposition the reflexx exactly this truth table. So it should be a compound proposition that uses the variables in R and somehow combines them together with the logical operations. We've learned to make sure that when we get  Send a pic uhler Road here. We get the output this specified. So how would you build the compound proposition or Alexa will talk about some specific ways to do this, but there's lots of ways to do algorithms and sort of intuition based ways to do this, but I want you to try this from  feel free to discuss and talk about strategies. Does he do this?  All right, so I don't I don't expect that anyone necessarily went through all those here and figured this out. What's the first thing you tried?  I just think the one idea is with his three variables here. So let's take what's try and split sort of on each variable other strategies the people try other strategies.  Oh, that's interesting. So the bottom for the office of the top four so we can figure out some kind of negation here. We can look for patterns throughout the table people started trying to use  Are the strategies?  Yeah.  Okay.  You try basically you saw some structure and tried something. Right? So I did that is also a good strategy in many of these cases IG.  Actually two specific strategies, although they're very closely related always work there a mechanical process there an algorithm. We could take them and build an algorithm out of them and always get a proposition that produces the same results as a truth table. They're not necessarily the strategies that were just described and they're not the only way to do this but they are mechanical and always work. So the first idea is to identify all of the rose that produce true as a result and the idea is let's build a proposition for combines a way to get the true in the first row a way to get the true in the second row a way to get the true in the fourth row and a way to get the true in the seventh row four ways to get true. Let's try and describe those four ways individually and then put them together.  One way to talk about doing this is Eminem We want to make the first wrote True or the second row true or the fourth row true or the seventh row true. If we can come up with a proposition that make any of those cases happen get a True Result that there's an aura underneath where if we can describe those Rose The Situation's for those Rose and an order them together we can we can get through when we expect because of any one of them is true. We want to produce true. I just want to make a comment about and and or buts and and or have a special property here that if we  I do let's just take the example in the top left here peor Que in parentheses in order that with our it doesn't matter where we put the parentheses in the sequence of oars. If it's just a sequence of oars, we can move the parentheses around and so will start but we're going to start writing propositions where we write things like P or Q or R without parentheses around them and that means the same thing as print the sizing it either way. It'll be true. If any one of those values is true and in the same holds true for an where we can move the parentheses around and get the same result. You can do the truth table to check sequences of an only if all of those values are true do we get we get false if any of them or false, I just wanted to put that up.  To describe the situations were these Rose produce the situations were these what we can do is just look at what we look at the values of the variables in the first row corresponds to you being true and feuding true and true that produces true when we're in the situation for this first grow.  In the second row that's corresponds to PB and Q are being P being true to being true and are being false. So that proposition describes the situation of the second row and so we can take a proposition and use it to describe and use it to describe each row.  I'm describing each row. And so those are those are the ways to describe describe a proposition for any of those things happening or any of those things happening.  So if we come up with variables assignment to the variables that put us in any one of those four rows one of these propositions will be over all true. Overall True Result. This is definitely not necessarily the shortest proposition that exactly matches this table. It's actually quite long but it definitely works. It definitely works. This process always produces something that exactly matches the table.  Okay, so let's think about think about if there's any other ways to do this one thing we could do is let's try coming up with the proposition that instead of trying to get into a true. True rose. What about a proposition that avoids all the false Rose is Rose. It only produces true. If we're not in any of these rows at the variables don't reflect any of these roads.  And so what we can do here is take the the same idea from the last strategy of describing exactly that would be friends not q and not are and then we can negate it. So we take that whole thing in the gator.  And I'm showing up a little equivalents hear that lets us write this whenever we have this negation, we will talk about this more. I'd actually won a glass over in a little bit for now, but the main thing is the thing before the equal sign is the same strategies sequence, of course, but the main thing that's important here is this part where the thing inside the parentheses exactly matches that bottom row we can do it for all the rows with false.  Except this time we want to make sure we're not in any of those. We need to avoid all of those instead of just getting into one of them and then we and them together instead of ordering them together because we need to avoid all of those cases.  You know the one minute I have left. I just want to give you some words that we can talk about these things will be working with these things more this quarter. But the first strategy where we came up with an for the describe each of the rows and then ordered them all together is called disjunctive normal form or dnf disjunction because we're using oars between things and then this other version is called conjunctive normal form because we're using Anne's between the separate sub expression.  the main idea here is looking at each row coming up with the proposition for that row and then combining them together using either and or or  sandiego.edu "
}