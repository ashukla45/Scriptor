{
    "Blurbs": {
        "1 y + 1 And we can talk about the sum x + 1 + 1 + 1 + r to show is that this isn't even integer. because that's the property were trying to show is that adding together the two elements of this super working with his even x + y + 2 And we could manafort. I'm I'm not going to expand out the definition of easy ": [
            2261.8,
            2300.4,
            54
        ],
        "2 to get to a number and push through. Definition. And this is where we used. The inductive hypothesis that we got to assume at the beginning we got to assume that x + y is even and that evidence plus just the arithmetic and definition of even gets us to the goal. And we could do this for all the cases because in the cases with a plus one ": [
            2342.4,
            2372.7,
            56
        ],
        "Deuces this particular value here. That was a three-car immediately produces empty list here and this I'm just going to use the same color to highlight this corresponds to viskase. Where the number was equal so we just produced the second elements that was in that too full or like the rest of the list or that variable L produce the result we expect the other two cases. So when ": [
            496.2,
            528.4,
            11
        ],
        "Do you think the what do you think the views could serve as here? Are these going to be like Witnesses for this? Are these going to be interesting examples? Going to be counter-examples what kinds of things could be serve as if we're trying to prove or disprove this statement. So maybe one of these could be Particularly, useful counter-examples. So which of the following could be a useful ": [
            741.9,
            778.6,
            17
        ],
        "How should we express what we know in this recursive case? Is it just a case where it's I want to be careful about what we write down and then describe it to me either in English or symbolically. What do we know? What do we get to choose as the arbitrary elements? And what do we know in the recursive case? Let me know. Doing now. Yeah. I interesting ": [
            2032.8,
            2061.3,
            47
        ],
        "I'm just going to ride it again here. It's written above but just to be totally clear. I'm by structural induction must be equal to 0 0 + 0 + 0 is clearly even so that's that is very straightforward and then the recursive step. It's kind of interesting because we're saying what do we get to assume here? We get to choose an arbitrary P equals x + Interesting. ": [
            1991.9,
            2032.8,
            46
        ],
        "Listen to a podcast. Okay, let's get started. So we're going to keep working with inductor definition today do some more proofs. We're going to revisit the linked list example, we've been working with and talk about some interesting example there including the one that was at the end of the worksheet on Monday. So we thank you for all the mid-quarter feedback. I want to point out that we ": [
            1.9,
            54.4,
            0
        ],
        "Maybe by Universal generalization. Those are the strategies we know so far for talking about these for all statements. Let's think about this in terms of some particular values that we could put in here at one of the things we should do. We think about some of these statements is putting in values. And the question here is out of do you think of these are just interesting examples? ": [
            711.6,
            741.9,
            16
        ],
        "Post open for searching for homework Partners. Some people said they wanted some structured way to find people to work with on homework in the pin post on Piazza. Now, there's a fine teammates. So you can use that to look for folks that might have the same schedule or otherwise be compatible people to work with on the homework. So we're we're doing to address some concerns. I just ": [
            134.9,
            160.8,
            4
        ],
        "So if there's more than one occurrence of the elements in the original one doesn't stop that element from appearing in the list after the first once removed. 3 questions about an example about remover these link listening to another example next. I just want to stop for any any questions about this example in the future to stop for questions before we go on. Okay, cool. Let's talk about ": [
            1080.9,
            1114.2,
            23
        ],
        "So what should we be feeling in here which we be feeling in in this plane. How can we describe this set of possible positions? The way to write it down. Then x + y sorry. Is not one. I interesting so then x + y mod 2 not equal to one. Already has other ideas is that the only feel right other ideas for what we should be talking ": [
            1471.1,
            1509.3,
            33
        ],
        "We could have also started with 20in out of 100 once but this actually represent the same set of numbers represents the same set of numbers as he She is interesting because he admits more numbers numbers that we shouldn't have. For example, we can get to Zero by starting with two and subtracting one once so, it doesn't match because zero is not in the sexy plus not in ": [
            2731.3,
            2759.9,
            66
        ],
        "a counterexample or there's a way that we can prove it may be using induction or one of the other strategies. Okay. So this is the one really high level question to ask areas. Are we going to be looking for is this claim? Not true. So we're going to be looking for a counterexample or are we going to die try and do a proof Maybe by structural induction ": [
            625.6,
            711.6,
            15
        ],
        "about here. Yeah. interesting You're saying this is a weird that you're saying. This is like. is this Your question, that's what you're saying. Is this actually this guy is this describing the actual elements of pee or is it a property of elements and pee thing like this. What else do people write when Elsa people right? Yeah. Interesting parentheses, correct here. I realize I might have done too ": [
            1509.3,
            1591.9,
            34
        ],
        "adding 100. this definition doesn't Add any numbers it shouldn't or leave out any numbers. It just has multiple ways of defining some of the same numbers. So for example, once the number 120 is definitely in this set and we can talk about it being in this set for several reasons. We could have started at 1 and added 129 times and that justifies 120 being in the sun. ": [
            2702.7,
            2731.3,
            65
        ],
        "allowed to go negative. Let's assume because it's actually going to make the problem a little bit if both easier to think about and a really strong property will let them go negative. So use all four quadrants, even if we assume that all this stuff is negative, which is even on an infinite coordinate plane going negative and positive in both directions as possible. I think so. The question ": [
            1786.9,
            1843.6,
            40
        ],
        "and a number is not one of those things. So that wouldn't be a good counter example because it's simply not in the domain. We are moving 200 from this will end up with the empty list and won't be contained and I'll produce Saudi is the only one that works as a counterexample removes the first occurrence of an element that contains checks for any occurrence of an element. ": [
            1057.7,
            1080.9,
            22
        ],
        "appease here. We're not going to finish it today. But definitions on the last slide really get a connection between the structural induction property. We've been talking about and its other properties of mathematical induction and the idea is sort of an exact parallel of structural induction, which is that we can prove things about arbitrary integers or arbitrary. The number one that matches the basis step. We had an ": [
            2843.9,
            2878.0,
            69
        ],
        "as the basis of what happened when the first argument. So this first case if we evaluated all the way down to show second one be here. What is be produced as a result of as a result? Empty list so removes the three Wreck-It the trays for the second case looks like remove. Three empty list three and that not immediately just produces we can talk about it for ": [
            438.7,
            496.2,
            10
        ],
        "at this definition of remove. So we have copied the the set of Link personally Define this definition of remove function on so the question is which one of these calls to remove or uses of remove produces the result of seven and the empty list which one of these produces this result. 5 4 3 2 1 and discus Okay, looking again and again. 5 4 3 2 1 ": [
            211.3,
            362.6,
            7
        ],
        "basics step by using the recursive definition over and over again to check if it's in p some of that totally talked around here your question and say that I'm I'm going to try and not represent proof of this statement which is which is related to which is the next bus to get there. Is to show we could use some of these symbolic forms, right? So for all ": [
            1911.1,
            1956.3,
            44
        ],
        "be true, but it's not equal to zero one because the sum of 0 + 1 or odd. I'm getting over a couple details in that final proof. Cuz one more thing I want to talk about the main point here is we would use this. Analemma is the interesting part here in terms of using a proof by induction and defining another interesting recursively defined set. So I want ": [
            2450.5,
            2485.1,
            60
        ],
        "because there's all sorts of ways that could be wrong in little tiny ways that would that would make it so it's inconsistent. So we have an understanding of what this means if I give you an if I give you a value that's not an ordered pair you can say no way that's not you can go to the recursive definition and see if you can get back to ": [
            1888.3,
            1911.1,
            43
        ],
        "counterexample to this claim is any of them a counterexample is more than one of them question to ask might just write down some interesting values. 5 4 3 2 1 Okay quick and again and again. 5 4 3 2 1 so there's some conversions from the class on choosing D here and D does work as a useful counterexample. If we think about we're asking what does it ": [
            778.6,
            928.3,
            18
        ],
        "cuz they're interesting to think about but these really are the things that are elements of a lot of what we've done in talking about recursive definition so far. It's already in the set. And then we do some calculation or building on that element to talk about other elements that are also in a question. That's a great question. So there is a you're asking basically are these pairs ": [
            1750.4,
            1786.9,
            39
        ],
        "diagonal moves. I'm assuming some size of grid here I could ever reach that goal. But it ever reach this one zero goal. anything I know, right? Going to be able to go. Maybe. He'll really really far and then like come back and then would be able to do it. Being a bunch of moves in like around it and then eventually spiral into it or something interesting interesting ": [
            1162.9,
            1190.9,
            25
        ],
        "even which is there exists another integer. So that that integer times 2 is equal to this number, but we can say since x + y is even and adding. 2 to an even integer is also even this result is even and we could justify that more by taking a particular definition of even we've actually talked about that predicate e talks about their existing another manager to * ": [
            2300.4,
            2342.4,
            55
        ],
        "four there's four different cases here. So one of these is true, Either we get to choose as element p and it's equal to x + 1 y + 1 or equals in. These are the four cases we have to consider. Suzie's for cases to consider and this is the thing that I've been drawing in this box for these. proof by induction steps where this is the full ": [
            2142.0,
            2187.5,
            50
        ],
        "goal appear. And we're not that's not the thing that we're proving that we're going to prove with induction. And with this definition of a of a set we're going to prove this other interesting property. And this is the place we're going to use this word Lema which is a related interesting property that helps us get to an original goal in a property that helps us get to ": [
            1332.4,
            1366.3,
            31
        ],
        "got both kinds of feedback on flickers and hand out. So some of you wanted either more clicker questions with shorter discussion time and more discussion time for the existing clicker questions, which is why we're not making any big changes there were going to keep a lot of the way it is, Both sides have spoke up their hand out some of you like it that there's extra practice ": [
            54.4,
            80.0,
            1
        ],
        "here when we have three of the front we just produce whatever the other elements of the is because it corresponds to a case where we just returned Del Sol a c and d all produce this result of 7 followed by empty list all three of them produce that result and reiterated it removes. What's move on to proving his play in this was a claim that we had ": [
            565.9,
            602.2,
            13
        ],
        "in a minus one though, they cancel each other out. We'll just end up needing to show that x + y is even which is already the Assumption and in the one with 2-1 will be showing at x + y -2 is even once again will follow from the properties of even numbers. So the interesting thing we get out of this is that no matter how many steps ": [
            2372.7,
            2392.5,
            57
        ],
        "in a tech. I'm so this property is for all in 2 to the N is less than n factorial where we've given some very precise recursive definitions of two to the end and then factorial. One thing I want to do before we leave today is talk about if this claim is true. Is this claim true? Proclaim true Can you think of a counterexample? the counter example of ": [
            2913.2,
            2945.1,
            71
        ],
        "in class 3rd ID fast at the end of Monday you you're at based on their grading of the reason homeworks feedback. You've got a lot of knowing how to justify things on homework based on the homework that's coming in that we're grading you're all getting better at that. So good job responding to the feedback in those justifications are getting better. We made a public a public Piazza ": [
            103.4,
            134.9,
            3
        ],
        "integer and then it's just a matter of doing out some symbolic work justify this in the things people are talking about they make a lot of sense. So there's four cases we can pick here cuz we have an ore and we're trying to justify a conclusion based on that or so. We need to demonstrate it for all of those cases molesters pick the case with x + ": [
            2237.1,
            2261.8,
            53
        ],
        "integers 1 2 3 4 not including 0 which of these definitions that are forcibly Define set match the positive integers. 5 4 3 2 1 I want you to discuss is there more than one that fits the definition a lot of you were like, yeah looks I found the last one. By using the definition in a member of the set based on the basis step-up. There's no ": [
            2542.1,
            2677.3,
            63
        ],
        "is about how you would write this in code and I think trying to think of these definitions too much light code can lead to some slightly broken and allergies that are misleading. So this is definitely related to code right? We can write a program to generate this set. Of course. It's an impetus for the program's going to run for a really long time, but we can at ": [
            1843.6,
            1862.8,
            41
        ],
        "know about but there's actually a nice way to express what's going on here, which is that is a robot starts at let's say in this example starts at 0 0. There's this other property that ends up being true that we can try to prove if we look at the sum of the coordinate robot is at Battle always be even If the goal is at 10 that had ": [
            1250.3,
            1283.8,
            28
        ],
        "least as a generate some or something to watch them all print out right to have the same like basis step recursive step written down structure is this week in lots of ways. I want to see this is too much like the program that would produce it are the program that would represent it. So because I don't want to try and relate this to another notation programming notation ": [
            1862.8,
            1888.3,
            42
        ],
        "least some of the stuff that happens in class. That's just right alongside in the directory and we use this word field here. 28 indicate that song that was filmed in What I want to do days start with the example we didn't get to on Monday having to do with linked list recursively defined function called remove and I just want to start with a question with us looking ": [
            183.2,
            211.3,
            6
        ],
        "look like to do remove 100 100 empty list. With 100 is the other argument. Is this true? Not contain. That's the full body of the predicate with this value substituted in but with one more 100 at the end here for the argument to contain. And if we think about the steps this is going to take and use the definition of remove remove this argument this argument here, ": [
            928.3,
            973.9,
            19
        ],
        "many or too few parentheses. So you're saying this this new pair your getting my calculation on X and Y is also the first thing that we had written down as it's kind of like the second thing looks like another ordered pair another ordered pair of coordinates. Ask Mom to has two equal Wyman to so that's another property. We could write down X mod 2 equals y mod ": [
            1591.9,
            1628.2,
            35
        ],
        "okay, so it's interesting to after one or two faces here. This will become becomes a little a little more clear what's going on here. So remove has this interesting recursive case. We're kind of like contains. The two cases are considered are the first element in is equal to this other argument equal to this other argument two different cases part of remove. And so if we talked about ": [
            365.2,
            404.7,
            8
        ],
        "on that we had at the end of Monday that we didn't get to this prove or disprove play and I want to let you think about it for a minute and then I'm going to put this talk about this for a second. See if you believe it and then I just talked about this prove or disprove claim if you think it's true and if you think is ": [
            602.2,
            625.6,
            14
        ],
        "option and then considering other numbers and assuming the property we want for smaller numbers for numbers one less in particular using not to go on and prove it for that number. And the property I want to talk about for 1 minute and we'll be doing the proof for this is an interesting property that's important for all kinds of reasons in programming properties. Like this are interesting resume ": [
            2878.0,
            2913.2,
            70
        ],
        "or for earlier element we use to build it and that's this part. Which is filling in the values from Pete Prime into the property and this is what we would call the inductive assumption or the inductive hypothesis. S4 cases to show here has four different cases to show here when we get this assumption that x + y is an even integer that is less. Why isn't even ": [
            2209.5,
            2237.1,
            52
        ],
        "positions that I can get to by adding or subtracting one. Tristan yeah, so these are so this these two that I'm circling in blue are interesting properties to talk about their definitely interesting properties to talk about that have to do with the sun being even right exactly the right way to express it or not, but they're interesting properties of elements of the set that we may want ": [
            1680.8,
            1719.8,
            37
        ],
        "questions on the hand out. Some of you wanted us to get to all of the stuff on the handouts in class. At least for Monday and I going forward we have started posting some copies of the handouts with can you stop talking? It's really really distracting. We started posting some typed up answers on the handouts for some of the things that may be didn't get fully completed ": [
            80.0,
            103.4,
            2
        ],
        "robots. two-dimensional graphical robots robots Is also related to be Bishops in chess, if you like just imagine this idea of robot on a grid and the robot or the player you can think of this as in a game is only allowed to make a move so I can move up into the right can't make or he's almost there is a goal and the question is with these ": [
            1114.2,
            1162.9,
            24
        ],
        "set of stuff we get to assume here that came from the recursive step. What do we get to do in structural induction, we get to pick an element that came from the recursive stuff that we get to look at the elements that were used to build it. That's P Prime and we get to make the Assumption of the property were trying to prove for that smaller element ": [
            2187.5,
            2209.5,
            51
        ],
        "so there must be some other P where X + Y is even right. So let's choose a p Prime because I don't want to conflate the SRP we've been using to talk about the arbitrary elements with the element was used in the recursive definition to build it up. So it's text, sorry and we know that x + y is an even integer What else what else do ": [
            2061.3,
            2095.0,
            48
        ],
        "that are in this set of positions we can reach A movie of them written on the sheet. I'm just going to write it out in English because the interesting part. the interesting part for us right now is not necessarily which math gets us to an even integer. Just seeing those seeing a recursive structure. So in the basis step here. We know that so this is structural induction. ": [
            1956.3,
            1991.9,
            45
        ],
        "that's an odd sum of coordinates cuz 1 + 0 is odd and if we can prove that the robot always at a coordinate that has an even sum then clearly. I can never reach 1 0 and so we can use what we've been talking about in terms of defining the set of possible positions to talk about the possible positions for the robot. I'm starting in 00 as ": [
            1283.8,
            1307.6,
            29
        ],
        "the basis step and then take steps to represent the robots movement. And then if we can prove this even property it'll follow from this even property that the robot can never reach 1010 has an odd some so it can't possibly be in this set. And so one of the things I want to make a point of here is we started with a goal. This was our original ": [
            1307.6,
            1332.4,
            30
        ],
        "the original goal in a proof to finish defining this set of positions. And then we need to talk about what the proof looks like for. The first thing I want you to try and do is fill in this part of the definition. What is this part of the definition for this set of possible robot position for a minute and see what it what it looks like. Okay. ": [
            1366.3,
            1471.1,
            32
        ],
        "the set the Sky by Beenie. Dee is particularly interesting because it's really just definitionally doesn't match. What we said in class a recursive definition of asset is nothing. It doesn't match is that in class we said That basis steps. AR a finite collection of elements We said in the in basic steps. We're going to specify just some fixed number of elements that are in the set and ": [
            2759.9,
            2802.3,
            67
        ],
        "there is infinitely many primes. So kind of describe the same set as beanie, but doesn't match what we said as what it means to be a basis in the book where exactly what's in the book, but you can always express is going to be any more use the recursive step to add any internet collections. We want to talk about There's one more idea. I just want to ": [
            2802.3,
            2843.9,
            68
        ],
        "these four kinds of moves are allowed That's our original goal property that's useful to prove to get there because articulating why at any given step the robot is never going to be able to get from their 2-0 it hard to express symbolically. Like it's hard to stay at for me to figure out how to say exactly the robot can never get there with the symbols that we ": [
            1226.0,
            1250.3,
            27
        ],
        "things we've been talking about but also to Define sets we've already sort of used to it if we assumed we know about like the integers in the natural numbers. But we can Define the recursively an interesting ways. So I hear some definitions reported definitions of Z, + which is positive integers. I want you to think about which ones of these actually match the definition of the positive ": [
            2511.9,
            2542.1,
            62
        ],
        "this claim n equals n equals 1 I can feel that in. So if we filled in if we chose and equals 1 would be feeling into the one is less than 2 factorial 1 factorial type 1 factorial. And that's two is less than one that's definitely false. So n equals one is definitely a counterexample. Is there a more interesting version of this property? That would actually be ": [
            2945.1,
            2982.2,
            72
        ],
        "to ask how we could happen. Right? We look at it and some of us have this intuition like yeah that can't work but there's no way we construct this argument that says no there's no way you'd ever be able to get to the square at 10. Our goal would be to say let's say a robot starting at one can never reach the square one zero. If only ": [
            1190.9,
            1226.0,
            26
        ],
        "to poke a little more at this idea of defining sets recursively because it's talking about not wanting to say things by programming in code programming to Define things recursively. It's have a lot of data structures and a lot of things get to find a program for the work with more and more these things. We can use this definition not just for these data structure you list the ": [
            2485.1,
            2511.9,
            61
        ],
        "to prove if we're just defining the set the set p is trying to represent positions and sort of implicitly by starting with this ordered pair of 0 0 or thinking of these ordered pairs as position until I really like this last this last answer as a way to express in this set these other things because they're useful to think about Let me move this stuff down here ": [
            1719.8,
            1750.4,
            38
        ],
        "to that's another property interest in getting back to this original comment. That's not an ordered pair like the other things and some other property we can talk about people right here. You said Xbox One, Why plus one? Okay. x + 1 y - 1 what's 1 y + 1? And then two minuses scrolling up interesting. Think about your you wrote one pair for each one of these ": [
            1628.2,
            1680.8,
            36
        ],
        "tracing some particular calls here. So for example this first one remove seven empty West. 3 well that puts us in the second case of remove because 3 is not equal to 7 so this turns into three and then a call to remove on at 3. 7 because that's a ten. And then a call to remove on empty list with three and then that call to remove use ": [
            404.7,
            438.7,
            9
        ],
        "true that still uses of fur all n equals 2 is also a counterexample and 6 and 2/3 is but is there some way we could alter this property to make? UC San Diego podcast ": [
            2982.2,
            3000.3,
            73
        ],
        "turns into not true because it contains will return true immediately here. Which is definitely false. So this is a counterexample. And none of the other values examples if we try and remove 100 from the empty list. It doesn't have 100 in it so case here this is not in the domain. Because 100 isn't in the domain L the list or either the empty last are some Tuple ": [
            1014.2,
            1057.7,
            21
        ],
        "us keeps on even numbers the whole time. So this is enough this nice little Emma is enough. To argue this last property original goal. Was I cannot? Reach zero one where we would want to say something like for all p and key. And we be able to demonstrate this by using the fact that this has to be that the coordinates have to be even so that'll always ": [
            2413.6,
            2450.5,
            59
        ],
        "wanted to point out like this is the kind of thing that we posted this. If you look in the normal class directory for Monday, this is the one of the proofs at the end. I did this fast and the other section they didn't finish it. So we picked it up and put it in there so you can start looking for things like this filled in for at ": [
            160.8,
            183.2,
            5
        ],
        "way we can multiply by 2 or 3 to get to 5. So I buy a 5 is a good example of why this can't be the same set as the one below. Miss Mexico sample, so okay one is in a positive integers twenties in the positive integers cool. Nice little bonus in the basis step and then we can get to New integers by adding one or by ": [
            2677.3,
            2702.7,
            64
        ],
        "we need to choose her be aware of here? Yeah. So maybe I suppose in some direction while some was in some directions going to be important. Yeah. Yeah, so we can talk about these conversations and I want to focus on that part. So both of these observations that X and Y changing and the combinations mattering are relevant here. We need to choose here, which is that there's ": [
            2095.0,
            2142.0,
            49
        ],
        "we remove 3 from the side that has seven and three empty list will do a step that looks like this case the first case that we did but instead of doing remove empty list three will do remove with three empty words to in this position that would correspond to this result. So this also produces that result. India also produces that result we saw in this case over ": [
            528.4,
            565.9,
            12
        ],
        "we talked about taking we can always trace the steps back to whatever is where we started at and we end up getting this inductively to find property that you started if you start with an even sum every time you either add to or stay the same with respect to the even had to subtract two or stay the same with respect to the total sum and that keeps ": [
            2392.5,
            2413.6,
            58
        ],
        "which corresponds to m is equal to this first element here, which corresponds to n. Corresponds to end and when those are equal then removed, whatever we could think of it as the rest of the list the cell corresponds to this part of this list. And so we'll end up asking is 100 contained in this value 100 empty list. What this other argument 108 definition of contains this ": [
            973.9,
            1014.2,
            20
        ]
    },
    "File Name": "lecture_17.flac",
    "Full Transcript": "Listen to a podcast.  Okay, let's get started.  So we're going to keep working with inductor definition today do some more proofs. We're going to revisit the linked list example, we've been working with and talk about some interesting example there including the one that was at the end of the worksheet on Monday. So we thank you for all the mid-quarter feedback. I want to point out that we got both kinds of feedback on flickers and hand out. So some of you wanted either more clicker questions with shorter discussion time and more discussion time for the existing clicker questions, which is why we're not making any big changes there were going to keep a lot of the way it is, Both sides have spoke up their hand out some of you like it that there's extra practice questions on the hand out. Some of you wanted us to get to all of the stuff on the handouts in class.  At least for Monday and I going forward we have started posting some copies of the handouts with can you stop talking? It's really really distracting. We started posting some typed up answers on the handouts for some of the things that may be didn't get fully completed in class 3rd ID fast at the end of Monday you you're at based on their grading of the reason homeworks feedback. You've got a lot of knowing how to justify things on homework based on the homework that's coming in that we're grading you're all getting better at that. So good job responding to the feedback in those justifications are getting better. We made a public a public Piazza Post open for searching for homework Partners. Some people said they wanted some structured way to find people to work with on homework in the pin post on Piazza. Now, there's a fine teammates.  So you can use that to look for folks that might have the same schedule or otherwise be compatible people to work with on the homework. So we're we're doing to address some concerns. I just wanted to point out like this is the kind of thing that we posted this. If you look in the normal class directory for Monday, this is the one of the proofs at the end. I did this fast and the other section they didn't finish it. So we picked it up and put it in there so you can start looking for things like this filled in for at least some of the stuff that happens in class. That's just right alongside in the directory and we use this word field here.  28 indicate that song that was filmed in  What I want to do days start with the example we didn't get to on Monday having to do with linked list recursively defined function called remove and I just want to start with a question with us looking at this definition of remove. So we have copied the the set of Link personally Define this definition of remove function on so the question is which one of these calls to remove or uses of remove produces the result of seven and the empty list which one of these produces this result.  5 4 3 2 1 and discus  Okay, looking again and again.  5 4 3 2  1  okay, so it's interesting to after one or two faces here. This will become becomes a little a little more clear what's going on here. So remove has this interesting recursive case. We're kind of like contains. The two cases are considered are the first element in is equal to this other argument equal to this other argument two different cases part of remove.  And so if we talked about tracing some particular calls here.  So for example this first one remove seven empty West.  3  well that puts us in the second case of remove because 3 is not equal to 7 so this turns into three and then a call to remove on at 3.  7 because that's a ten.  And then a call to remove on empty list with three and then that call to remove use as the basis of what happened when the first argument.  So this first case if we evaluated all the way down to show second one be here. What is be produced as a result of as a result?  Empty list so removes the three Wreck-It the trays for the second case looks like remove.  Three empty list three and that not immediately just produces we can talk about it for Deuces this particular value here. That was a three-car immediately produces empty list here and this I'm just going to use the same color to highlight this corresponds to viskase.  Where the number was equal so we just produced the second elements that was in that too full or like the rest of the list or that variable L produce the result we expect the other two cases. So when we remove 3 from the side that has seven and three empty list will do a step that looks like this case the first case that we did but instead of doing remove empty list three will do remove with three empty words to in this position that would correspond to this result.  So this also produces that result.  India also produces that result we saw in this case over here when we have three of the front we just produce whatever the other elements of the is because it corresponds to a case where we just returned Del Sol a c and d all produce this result of 7 followed by empty list all three of them produce that result and reiterated it removes.  What's move on to proving his play in this was a claim that we had on that we had at the end of Monday that we didn't get to this prove or disprove play and I want to let you think about it for a minute and then I'm going to put this talk about this for a second. See if you believe it and then I just talked about this prove or disprove claim if you think it's true and if you think is a counterexample or there's a way that we can prove it may be using induction or one of the other strategies.  Okay. So this is the one really high level question to ask areas. Are we going to be looking for is this claim? Not true. So we're going to be looking for a counterexample or are we going to die try and do a proof Maybe by structural induction Maybe by Universal generalization. Those are the strategies we know so far for talking about these for all statements. Let's think about this in terms of some particular values that we could put in here at one of the things we should do. We think about some of these statements is putting in values. And the question here is out of do you think of these are just interesting examples? Do you think the what do you think the views could serve as here? Are these going to be like Witnesses for this? Are these going to be interesting examples?  Going to be counter-examples what kinds of things could be serve as if we're trying to prove or disprove this statement.  So maybe one of these could be  Particularly, useful counter-examples. So which of the following could be a useful counterexample to this claim is any of them a counterexample is more than one of them question to ask might just write down some interesting values.  5 4 3 2 1  Okay quick and again and again.  5 4 3 2 1  so there's some conversions from the class on choosing D here and D does work as a useful counterexample. If we think about we're asking what does it look like to do remove 100 100 empty list.  With 100 is the other argument.  Is this true?  Not contain. That's the full body of the predicate with this value substituted in but with one more 100 at the end here for the argument to contain.  And if we think about the steps this is going to take and use the definition of remove remove this argument this argument here, which corresponds to m is equal to this first element here, which corresponds to n.  Corresponds to end and when those are equal then removed, whatever we could think of it as the rest of the list the cell corresponds to this part of this list. And so we'll end up asking is 100 contained in this value 100 empty list.  What this other argument 108 definition of contains this turns into not true because it contains will return true immediately here.  Which is definitely false.  So this is a counterexample.  And none of the other values examples if we try and remove 100 from the empty list. It doesn't have 100 in it so case here this is  not in the domain.  Because 100 isn't in the domain L the list or either the empty last are some Tuple and a number is not one of those things. So that wouldn't be a good counter example because it's simply not in the domain. We are moving 200 from this will end up with the empty list and won't be contained and I'll produce Saudi is the only one that works as a counterexample removes the first occurrence of an element that contains checks for any occurrence of an element. So if there's more than one occurrence of the elements in the original one doesn't stop that element from appearing in the list after the first once removed.  3 questions about an example about remover these link listening to another example next. I just want to stop for any any questions about this example in the future to stop for questions before we go on.  Okay, cool. Let's talk about robots.  two-dimensional graphical robots robots  Is also related to be Bishops in chess, if you like just imagine this idea of robot on a grid and the robot or the player you can think of this as in a game is only allowed to make a move so I can move up into the right can't make or he's almost there is a goal and the question is with these diagonal moves. I'm assuming some size of grid here I could ever reach that goal. But it ever reach this one zero goal.  anything  I know, right?  Going to be able to go. Maybe. He'll really really far and then like come back and then would be able to do it.  Being a bunch of moves in like around it and then eventually spiral into it or something interesting interesting to ask how we could happen. Right? We look at it and some of us have this intuition like yeah that can't work but there's no way we construct this argument that says no there's no way you'd ever be able to get to the square at 10. Our goal would be to say let's say a robot starting at one can never reach the square one zero. If only these four kinds of moves are allowed  That's our original goal property that's useful to prove to get there because articulating why at any given step the robot is never going to be able to get from their 2-0 it hard to express symbolically. Like it's hard to stay at for me to figure out how to say exactly the robot can never get there with the symbols that we know about but there's actually a nice way to express what's going on here, which is that is a robot starts at let's say in this example starts at 0 0. There's this other property that ends up being true that we can try to prove if we look at the sum of the coordinate robot is at Battle always be even  If the goal is at 10 that had that's an odd sum of coordinates cuz 1 + 0 is odd and if we can prove that the robot always at a coordinate that has an even sum then clearly. I can never reach 1 0  and so we can use what we've been talking about in terms of defining the set of possible positions to talk about the possible positions for the robot.  I'm starting in 00 as the basis step and then take steps to represent the robots movement.  And then if we can prove this even property it'll follow from this even property that the robot can never reach 1010 has an odd some so it can't possibly be in this set. And so one of the things I want to make a point of here is we started with a goal. This was our original goal appear.  And we're not that's not the thing that we're proving that we're going to prove with induction. And with this definition of a of a set we're going to prove this other interesting property.  And this is the place we're going to use this word Lema which is a related interesting property that helps us get to an original goal in a property that helps us get to the original goal in a proof to finish defining this set of positions. And then we need to talk about what the proof looks like for. The first thing I want you to try and do is fill in this part of the definition. What is this part of the definition for this set of possible robot position for a minute and see what it what it looks like.  Okay. So what should we be feeling in here which we be feeling in in this plane. How can we describe this set of possible positions?  The way to write it down.  Then x + y sorry.  Is not one.  I interesting so then x + y mod 2 not equal to one.  Already has other ideas is that the only feel right other ideas for what we should be talking about here.  Yeah.  interesting  You're saying this is a weird that you're saying. This is like.  is this  Your question, that's what you're saying. Is this actually this guy is this describing the actual elements of pee or is it a property of elements and pee thing like this. What else do people write when Elsa people right? Yeah.  Interesting parentheses, correct here. I realize I might have done too many or too few parentheses. So you're saying this this new pair your getting my calculation on X and Y is also the first thing that we had written down as it's kind of like the second thing looks like another ordered pair another ordered pair of coordinates.  Ask Mom to has two equal Wyman to so that's another property. We could write down X mod 2 equals y mod to that's another property interest in getting back to this original comment. That's not an ordered pair like the other things and some other property we can talk about people right here.  You said Xbox One, Why plus one? Okay.  x + 1 y - 1  what's 1 y + 1?  And then two minuses scrolling up interesting. Think about your you wrote one pair for each one of these positions that I can get to by adding or subtracting one.  Tristan yeah, so these are so this these two that I'm circling in blue are interesting properties to talk about their definitely interesting properties to talk about that have to do with the sun being even right exactly the right way to express it or not, but they're interesting properties of elements of the set that we may want to prove if we're just defining the set the set p is trying to represent positions and sort of implicitly by starting with this ordered pair of 0 0 or thinking of these ordered pairs as position until I really like this last this last answer as a way to express in this set these other things because they're useful to think about  Let me move this stuff down here cuz they're interesting to think about but these really are the things that are elements of a lot of what we've done in talking about recursive definition so far. It's already in the set. And then we do some calculation or building on that element to talk about other elements that are also in a question.  That's a great question. So there is a you're asking basically are these pairs allowed to go negative. Let's assume because it's actually going to make the problem a little bit if both easier to think about and a really strong property will let them go negative. So use all four quadrants, even if we assume that all this stuff is negative, which is even on an infinite coordinate plane going negative and positive in both directions as possible.  I think so. The question is about how you would write this in code and I think trying to think of these definitions too much light code can lead to some slightly broken and allergies that are misleading. So this is definitely related to code right? We can write a program to generate this set. Of course. It's an impetus for the program's going to run for a really long time, but we can at least as a generate some or something to watch them all print out right to have the same like basis step recursive step written down structure is this week in lots of ways. I want to see this is too much like the program that would produce it are the program that would represent it. So because I don't want to try and relate this to another notation programming notation because there's all sorts of ways that could be wrong in little tiny ways that would that would make it so it's inconsistent. So we have an understanding of what this means if I give you an  if I give you a value that's not an ordered pair you can say no way that's not you can go to the recursive definition and see if you can get back to basics step by using the recursive definition over and over again to check if it's in p  some of that totally talked around here your question and say that I'm I'm going to try and not represent proof of this statement which is which is related to which is the next bus to get there.  Is to show we could use some of these symbolic forms, right? So for all that are in this set of positions we can reach  A movie of them written on the sheet. I'm just going to write it out in English because the interesting part.  the interesting part for us right now is  not necessarily which math gets us to an even integer. Just seeing those seeing a recursive structure.  So in the basis step here.  We know that so this is structural induction. I'm just going to ride it again here. It's written above but just to be totally clear. I'm by structural induction must be equal to 0 0 + 0 + 0 is clearly even  so that's that is very straightforward and then the recursive step.  It's kind of interesting because we're saying what do we get to assume here? We get to choose an arbitrary P equals x +  Interesting. How should we express what we know in this recursive case? Is it just a case where it's I want to be careful about what we write down and then describe it to me either in English or symbolically. What do we know? What do we get to choose as the arbitrary elements? And what do we know in the recursive case?  Let me know.  Doing now. Yeah.  I interesting so there must be some other P where X + Y is even right. So let's choose a p Prime because I don't want to conflate the SRP we've been using to talk about the arbitrary elements with the element was used in the recursive definition to build it up. So it's text, sorry and we know that x + y is an even  integer  What else what else do we need to choose her be aware of here?  Yeah.  So maybe I suppose in some direction while some was in some directions going to be important. Yeah.  Yeah, so we can talk about these conversations and I want to focus on that part. So both of these observations that X and Y changing and the combinations mattering are relevant here. We need to choose here, which is that there's four there's four different cases here. So one of these is true,  Either we get to choose as element p and it's equal to x + 1 y + 1 or equals in. These are the four cases we have to consider.  Suzie's for cases to consider and this is the thing that I've been drawing in this box for these.  proof by induction  steps  where this is the full set of stuff we get to assume here that came from the recursive step. What do we get to do in structural induction, we get to pick an element that came from the recursive stuff that we get to look at the elements that were used to build it. That's P Prime and we get to make the Assumption of the property were trying to prove for that smaller element or for earlier element we use to build it and that's this part.  Which is filling in the values from Pete Prime into the property and this is what we would call the inductive assumption or the inductive hypothesis.  S4 cases to show here has four different cases to show here when we get this assumption that x + y is an even integer that is less. Why isn't even integer and then it's just a matter of doing out some symbolic work justify this in the things people are talking about they make a lot of sense. So there's four cases we can pick here cuz we have an ore and we're trying to justify a conclusion based on that or so. We need to demonstrate it for all of those cases molesters pick the case with x + 1 y + 1  And we can talk about the sum x + 1 + 1 + 1 + r to show is that this isn't even integer.  because that's the property were trying to show is that adding together the two elements of this super working with his even x + y + 2  And we could manafort. I'm I'm not going to expand out the definition of easy even which is there exists another integer. So that that integer times 2 is equal to this number, but we can say since x + y is even and adding.  2 to an even  integer is also even  this result  is even and we could justify that more by taking a particular definition of even we've actually talked about that predicate e talks about their existing another manager to * 2 to get to a number and push through. Definition.  And this is where we used.  The inductive hypothesis that we got to assume at the beginning we got to assume that x + y is even and that evidence plus just the arithmetic and definition of even gets us to the goal.  And we could do this for all the cases because in the cases with a plus one in a minus one though, they cancel each other out. We'll just end up needing to show that x + y is even which is already the Assumption and in the one with 2-1 will be showing at x + y -2 is even once again will follow from the properties of even numbers.  So the interesting thing we get out of this is that no matter how many steps we talked about taking we can always trace the steps back to whatever is where we started at and we end up getting this inductively to find property that you started if you start with an even sum every time you either add to or stay the same with respect to the even had to subtract two or stay the same with respect to the total sum and that keeps us keeps on even numbers the whole time.  So this is enough this nice little Emma is enough.  To argue this last property original goal.  Was I cannot?  Reach zero one where we would want to say something like for all p and key.  And we be able to demonstrate this by using the fact that this has to be that the coordinates have to be even so that'll always be true, but it's not equal to zero one because the sum of 0 + 1 or odd. I'm getting over a couple details in that final proof. Cuz one more thing I want to talk about the main point here is we would use this.  Analemma is the interesting part here in terms of using a proof by induction and defining another interesting recursively defined set.  So I want to poke a little more at this idea of defining sets recursively because it's talking about not wanting to say things by programming in code programming to Define things recursively. It's have a lot of data structures and a lot of things get to find a program for the work with more and more these things. We can use this definition not just for these data structure you list the things we've been talking about but also to Define sets we've already sort of used to it if we assumed we know about like the integers in the natural numbers.  But we can Define the recursively an interesting ways. So I hear some definitions reported definitions of Z, + which is positive integers. I want you to think about which ones of these actually match the definition of the positive integers 1 2 3 4 not including 0 which of these definitions that are forcibly Define set match the positive integers.  5 4 3 2 1 I want you to discuss is there more than one that fits the definition a lot of you were like, yeah looks I found the last one.  By using the definition in a member of the set based on the basis step-up. There's no way we can multiply by 2 or 3 to get to 5. So I buy a 5 is a good example of why this can't be the same set as the one below.  Miss Mexico sample, so okay one is in a positive integers twenties in the positive integers cool. Nice little bonus in the basis step and then we can get to New integers by adding one or by adding 100.  this definition doesn't  Add any numbers it shouldn't or leave out any numbers. It just has multiple ways of defining some of the same numbers. So for example, once the number 120 is definitely in this set and we can talk about it being in this set for several reasons. We could have started at 1 and added 129 times and that justifies 120 being in the sun. We could have also started with 20in out of 100 once but this actually represent the same set of numbers represents the same set of numbers as he  She is interesting because he admits more numbers numbers that we shouldn't have. For example, we can get to Zero by starting with two and subtracting one once so, it doesn't match because zero is not in the sexy plus not in the set the Sky by Beenie.  Dee is particularly interesting because it's really just definitionally doesn't match. What we said in class a recursive definition of asset is nothing. It doesn't match is that in class we said  That basis steps.  AR  a finite collection of elements  We said in the in basic steps. We're going to specify just some fixed number of elements that are in the set and there is infinitely many primes. So kind of describe the same set as beanie, but doesn't match what we said as what it means to be a basis in the book where exactly what's in the book, but you can always express is going to be any more use the recursive step to add any internet collections. We want to talk about  There's one more idea. I just want to appease here. We're not going to finish it today. But definitions on the last slide really get a connection between the structural induction property. We've been talking about and its other properties of mathematical induction and the idea is sort of an exact parallel of structural induction, which is that we can prove things about arbitrary integers or arbitrary. The number one that matches the basis step. We had an option and then considering other numbers and assuming the property we want for smaller numbers for numbers one less in particular using not to go on and prove it for that number.  And the property I want to talk about for 1 minute and we'll be doing the proof for this is an interesting property that's important for all kinds of reasons in programming properties. Like this are interesting resume in a tech.  I'm so this property is for all in 2 to the N is less than n factorial where we've given some very precise recursive definitions of two to the end and then factorial.  One thing I want to do before we leave today is talk about if this claim is true. Is this claim true?  Proclaim true  Can you think of a counterexample?  the counter example of this claim  n equals  n equals 1  I can feel that in. So if we filled in if we chose and equals 1 would be feeling into the one is less than 2 factorial 1 factorial type 1 factorial.  And that's two is less than one that's definitely false. So n equals one is definitely a counterexample.  Is there a more interesting version of this property? That would actually be true that still uses of fur all n equals 2 is also a counterexample and 6 and 2/3 is but is there some way we could alter this property to make?  UC San Diego podcast "
}