{
  "Blurbs": {
    "A R A one or a two or three or a four. That means that if any of them are true the whole thing is true and if they're all false in the whole thing is false and maybe as exercise. you can think about why doesn't this formula have the same properties as the other one? cause sure. Yeah, but 3 is kind of The smallest case great cuz ": [
      2006.3,
      2052.6,
      54
    ],
    "I guess it'd green Andy red Andy blue. Then you have a triangle with these ones sea green see red and sea blue. But not as tasty blue. And then you have these corresponding edges like that and these would be in a triangle. So if I had an independent set of vertices, right? That means that none of those. Pairs of vertices would be connected. When are you connected ": [
      2416.3,
      2450.2,
      65
    ],
    "It will take polynomial time in in N to come up with a solution that will solve all of them and that's kind of Why why does this is a puzzle? Why does it entertain us? Because it is kind of this intractable NP complete problem where there is no good algorithmic way to go about solving at you kind of have to use more case-by-case intuition and logic right ": [
      590.6,
      625.2,
      14
    ],
    "Listen to a podcast. All right. Let's get started. so Alright, so let's get started. Does anybody have any questions? I guess I don't know if I announce this to your class, but I'm going to allow. for a two-sided handwritten Kevin right hand written sheet I've notes. four final Any other questions? Oh just tablet count as handwriting. So I generally don't really like that, but I'll allow it ": [
      1.9,
      133.8,
      0
    ],
    "NP complete that will show that maximum independent set is also in NP complete. Okay good. so Frank if we can if we can solve Independence that quickly we can solve three coloring quickly. Can we solve Independence it quickly. answer is what is the thing here? We have three coloring. reduces to maximum independent set Okay, let's think about a few few ways around it. If you if you ": [
      2538.8,
      2589.3,
      68
    ],
    "NP completeness and we'll talk a little bit more about this a little bit later. And proves that several problems from logic and, torrox are all NP complete problems. Meaning that P is equal to NP. If and only if any of these problems are polynomial time solvable talked about this a little bit more in detail. And so cook and Levin. There's a theorem that named after them. I ": [
      375.6,
      405.0,
      8
    ],
    "P. The reason it's kind of similar right? You can think about it and contradiction suppose that I could build this algorithm this polynomial time algorithm for be let's call it out to pee then I can build a polynomial time algorithm for using the same thing. And that contradicts the fact that there does not exist polynomial time algorithm for today. Okay, let's get into NP completeness cuz this ": [
      1161.5,
      1194.1,
      30
    ],
    "So we get both of these right not why Empire snacks, right? Any questions about that? Okay, good. So the idea is we're going to create a graph you're going to have a Vertex for each literal and its negation and you're going to draw a directed Edge from whatever whatever you whenever you have the claws X or Y Hill Drive directed Edge from not X to Y and ": [
      1623.4,
      1663.6,
      43
    ],
    "So what are X and X bar called if there's a path from one to the other end back? Strongly connected great. Thank you. strongly connected Okay, good. So here's the idea of the algorithm. Create the graph just like we said before. Right, then run the SCC algorithm then for each variable check to see if its negation is in the same SEC. If it is then you found ": [
      1733.8,
      1784.1,
      46
    ],
    "a contradiction. If not, then there's no internal contradiction. So there's a way to assign the variables to make a true any questions. That would work to that would work to that cuz that would still be polynomial in the time. So yeah, you could do that. This would be a little bit quicker though. About to be enough to show that it's in P. Let's just look at an ": [
      1784.1,
      1819.0,
      47
    ],
    "a genetic algorithm and it worked great. So there's ways around it. Okay. Okay, so last few slides. Np-hard, we're not going to really talk much about these because in general empty heart problems are basically problems that That all NP problems can reduce too but they're not necessarily in and pee. The ones that are not in NP don't really come up a lot in this class. Okay, so ": [
      2813.6,
      2847.8,
      75
    ],
    "a way. If you have a 4 sat solver than you can use it to solve the three sad so that's kind of. Guess all the stats of 3 inoperable NP complete. Okay. Oh, that's the same thing. I had in your book. You can see this this chart and it gives you reductions all starting from it also gives you the cook Levin theorem. So it gives you a ": [
      2212.2,
      2247.1,
      59
    ],
    "about that? Okay, so given that sat is NP complete first, let's define what stat is. Okay, it's called sad because that's short for satisfiability. So you're given a Boolean formula in conjunctive normal form. Something like this. Basically, you have a bunch of variables X Y and Z or maybe more and you have their their opposites right not ask not why and not Z so you make this ": [
      1276.0,
      1316.3,
      34
    ],
    "algorithm for 3 sat and I want to I want to solve sat. So, how do you do it? You take your sat problem. You you convert it into a three-step problem. And then you saw that so that's kind of how the reduction works. if you want kind of an example to to think about let's say that this is part of a formula and sat A or B ": [
      1977.4,
      2006.3,
      53
    ],
    "and your logic changes depending on how the puzzle is set up. And so you as a Puzzler You're kind of adapting to the the structure of that particular puzzle instead of applying a a a standard algorithm that will work for every puzzle. Okay knapsack that's kind of like what they were talking about here. I know that we solve knapsack using dynamic programming. But the problem about that ": [
      625.2,
      653.3,
      15
    ],
    "appetizers and so in order to do that, you need to be able to solve a knapsack problem and the you know that the waiter is saying they didn't have enough time and He brings up traveling salesman, which is another np-complete problem. Let's look at a few of our favorites Sudoku. I mean, this is kind of in general where like you have an end by and Sudoku problem. ": [
      558.5,
      590.6,
      13
    ],
    "assignments make the formula true. The objective is just find such a formula that follows a constraints. Let's think about sat in terms of NP is sat in NP. And why? Yeah, give an instance and a proposed solution. You can figure out if that is a if that's solution makes the instance true, right? It's very easy to do you just kind of have to plug in all the ": [
      1391.8,
      1438.3,
      37
    ],
    "because independent set is a set of vertices such that nothing is connected and a clique is a set of vertices such that everything is connected. So They're kind of the same problem. Okay knapsack we talked about. Three coloring we haven't talked about but I'm hoping to give you an example of another reduction that has to do with three coloring. So sat is the Clauses can be as ": [
      2118.9,
      2149.0,
      57
    ],
    "bike parts while I have all these gears and I needed to figure out how to put the gears in a certain sequence. It turns out that problem is the knapsack problem. And and the gear ratios you kind of have to take the logarithm of them. So you're getting these like really crazy irrational numbers that knapsack problem doesn't deal with well. So what did I do? I made ": [
      2784.6,
      2813.6,
      74
    ],
    "blocks that are coming and so just like the other one. It's sort of like a case-by-case basis and you're thinking on the Fly and you kind of look at the Whatever you have and make decisions based on that. You're kind of making these local decisions and it makes it a little bit more entertaining. Okay. What about Candy Crush? Another one of our favorites. Yeah. I saw this ": [
      824.7,
      856.3,
      20
    ],
    "bore or Brute Force search to describe the common tutorial explosion of limiting algorithms, especially for circuit design problems. Okay. So this is important because the circuit design problem has a lot to do with a very What's a notoriously np-complete problem called sap that we'll talk about? Okay, that's good then. In 1965, Jack Edmonds give it the first polynomial time algorithm for perfect matching on general grass. Do ": [
      275.1,
      316.3,
      5
    ],
    "by an edge? Either you're the same color, which is not allowed or you're the same vertex in that triangle, which is also not allowed. There's more than just a clique right because so a clique of size for you certainly couldn't color, right? but what about Something that's not necessarily a clique. You still couldn't color it, right? There's like a bunch of different so cases. Oh, sorry. That ": [
      2450.2,
      2501.3,
      66
    ],
    "can solve a the way you do. It is on input X you basically figure out what its images and then you solved that image with b and if it's a true reduction then that means that It will output true. If and only if the original X is an instance in a for which the results should be true. Okay. So if this function exists, we say that a ": [
      962.5,
      991.5,
      24
    ],
    "computer scientist mathematician and economist John Von Neumann, the P versus NP question in a private letter written shortly before Von neumanns death. So that was I should have put a date on here remember looking at it probably like I don't know. I should look it up. I don't want to say Okay. So you just proposed the question then in the Soviet Union jablonski invents, the term para ": [
      243.5,
      275.1,
      4
    ],
    "contradiction there's no way to to fill it in any questions. Okay good. So, let's go to 3 sat. Turns out that $0.03 is NP complete. So $0.02 5 is polynomial time 3sat. We don't know if there's a polynomial time algorithm for it. How we going to show that 3sat is NP complete. We're going to piggyback on the cook Levin theorem. That sat is NP complete then if ": [
      1878.1,
      1915.4,
      50
    ],
    "could cracks at that cracks all the MP MP problems. Okay, but all the algorithms that work in general work in exponential time. Not much faster than looking through every possible combination, but there are sat solvers that are much better than to the end. I just not a polynomial. Okay, so let's think about another problem related to sat called to sat so to set has the Restriction that ": [
      1472.3,
      1502.4,
      39
    ],
    "every Clause has exactly two literals. Okay. so I claimed that 2sat is in p. That means that there exists a polynomial time algorithm to solve to set the way that we're going to do it the way that we were going to show it is that we know that the SCC algorithm is in pee right? We've done that the first few weeks. I'm going to show you that ": [
      1502.4,
      1533.2,
      40
    ],
    "example. Okay, so I might have four variables and a bunch of these Clauses and so for example the first Clause X or Z. That means I draw on edge from Xbox to z n from z bar to X X or not W. That means I draw an edge from not X to not W&W 2X and so on right so you can just build this graph. It won't ": [
      1819.0,
      1849.3,
      48
    ],
    "figure out how to gear down the the rotation of the escapement down to the rotation of the minute hand. So the escapement will rotate once every let's say every 33 seconds and I need to turn that into once every hour question. The escapement is the part of the clock that that's attached to the pendulum. So how am I going to convert one revolution to the other using ": [
      2750.2,
      2784.6,
      73
    ],
    "find the maximum independent set the maximum set of vertices such that no two vertices are connected by an edge. There's this other problem called Clique which is just kind of the opposite. It's basically you want to find the biggest subgraph. That's it. That's a complete graph and it's the opposite because you can take the compliment of the graph and then it turned independent set into a clique ": [
      2088.9,
      2118.9,
      56
    ],
    "formula in conjunctive normal form. You can basically make it in any form you want right? Because there's an algorithm that turns any Boolean formula into conjunctive normal form and you want to know a if there exists an assignment of the variables that makes the formula true. Okay. So does there exist in assignment for this example? There's really only eight possibilities right so we can go through some ": [
      1316.3,
      1349.0,
      35
    ],
    "general knapsack is NP complete problem. There are ways to kind of get faster results depending on if your input has certain qualities. okay, another one of our favorites Tetris another reason why this is such a entertaining game is because there does not exist to our knowledge and inefficient algorithm that you can use to get the maximum score on Tetris, even if you know the entire list of ": [
      789.1,
      824.7,
      19
    ],
    "gif. Your handwriting that you printed out is the same size as your handwriting rate your regular handwriting. Is that fair? Anybody else? I understand that that's just the way people take notes these days. So I'll allow it but Meet me halfway. anything else Okay, this is the last kind of new material on Friday. I'm basically just going to go a summary over the class make sure that ": [
      133.8,
      177.6,
      1
    ],
    "he is equal to NP nobody knows and there's two kind of diagrams that we can think about if one is if they're not equal or if they're equal if they're not equal. Then the NP complete problems are different than the pee problems. And NP complete problems are kind of in this subset. Np-hard. And in this case, for example, the traveling salesman problem the optimization. Isn't there where ": [
      2847.8,
      2885.4,
      76
    ],
    "if means that they have to both be true and both be false, but if it sits negation than they're always different. Okay. So each Clause into set looks like this. How do I change an ore into an implies? Does anybody know? X or Y Isn't it not X or Y? Not X or Y. And then or is commutative right? So this is equal to y or X. ": [
      1568.4,
      1622.3,
      42
    ],
    "in this one the traveling salesman problem optimization? Isn't here so. Does that's just an example of we don't know what the what the consequences are and certain problems could be in different places. Okay, are there any questions about this? So yeah, so I guess if if there are equal then all and all peep problems are also NP complete. But we don't know so we don't we don't ": [
      2885.4,
      2928.1,
      77
    ],
    "intractability. Lists hundreds of NP complete problems there tons of them out there. Okay. so you can see them in comics and what is this one? This is XKCD. Is that right? And you can see that they're talking about the basically the knapsack problem cuz he's saying we like that we'd like to we like to buy like to spend exactly 15.05 worth of appetizers and these are the ": [
      512.7,
      558.5,
      12
    ],
    "is in in terms of see that's exponential in the size of the input. now don't even get me started on if the if the item items are measured in floating-point numbers or irrational numbers or something anything other than a integer because then you know that algorithm is going to take much longer cuz you have to kind of go through all those things that's just kind of in ": [
      757.5,
      789.1,
      18
    ],
    "is not in NP. Yeah, so there's things out there but in terms of all the NP complete problems the problems that are inside and P. We don't know. UC San Diego podcast for more visit podcast. Ucf.edu ": [
      2975.5,
      2991.4,
      79
    ],
    "is that sat is NP complete this may be hard to think about. How did they go about proving this? How do you show that all of these problems? I mean, there's many many different problems and NP basically all the problems seen in this class or NP. How do you show that all of them reduced to this one problem? Well, the book goes into it. I'm not going ": [
      1219.7,
      1243.3,
      32
    ],
    "is what the reductions are kind of leading up to. So I decision problem a and n p is said to be NP complete if all NP problems reduced to it. Remember NP problems are just problems that can be verified quickly. Stop if you can be verified quickly, then you reduced to an NP complete problem. Okay. So this is what we've said before the cook live in theorem ": [
      1194.1,
      1219.7,
      31
    ],
    "kind of grow like a flower. It's pretty cool. Anyhow. So to explain the significance he introduces the section defining p and NP and posing that P NP question. I think he's the one who came up with these these terms even though it was stated before it was stated more in a general case. Okay, so we have the question now in 71 Steve Cook to find what is ": [
      346.5,
      375.6,
      7
    ],
    "know if they are disjoint or equal or not. See if he has a good feel like MP5 linking internet. Is there any similar? LMP hard like in that purple area. There are problems there that are that are shown to not be NP. Yeah, there are problems out there. Like for example, the the halting problem. halting problem. This is proving to be np-hard and it's not NP. This ": [
      2928.1,
      2975.5,
      78
    ],
    "little quickly, but I hope you can. get the gist of it the idea Okay, so The three coloring problem is given an undirected graph. Can I color the vertices with three different colors? So that no two colors are connected by an edge. Okay, so the possible colors I'm going to use are red green and blue. So the question is is it possible? So this comes up and ": [
      2280.6,
      2310.7,
      61
    ],
    "long as you want. And three sat these the closet have to come in chunks of three. No, they're all NP complete also because You can. You can use this same. Reduction to reduce for example for sat to $0.03 in $0.05 to $0.03. What does that help? Okay. Yeah. so you can reduce 3sat to force at his three sets kind of like a subset of force at in ": [
      2149.0,
      2212.2,
      58
    ],
    "maybe like making Maps right? If you wanted to color the different states or different countries of a map so that the borders are the edges and you just don't want to bordering countries to be the same color cuz then it doesn't look good. Okay, so How we going to reduce three coloring to maximum independent set? Okay, so if I can solve maximum independent set and polynomial time ": [
      2310.7,
      2344.9,
      62
    ],
    "maybe there's like a randomized kind of algorithm that you can use to get to get the the best answer most of the time right? You might not to be guaranteed, but you can get get there. genetic algorithms I want to share just a brief anecdote is that my buddy and I are working on building the clock out of bike parts. And what I needed to do was ": [
      2711.6,
      2750.2,
      72
    ],
    "means X has an instance for that to be true then the the image of a image of Axe FX is a decision problem in be assuming Is a instance of B for which the result is true or we'll look at some examples. But the idea here is that now if I have an algorithm I'll be that can solve be. Then we can build an algorithm algue that ": [
      925.9,
      962.5,
      23
    ],
    "not y 2x. Okay, what you're going to do is figure out are there any contradictions internal contradictions if there are then there's no there's no chance of having a true assignment if there are no contradictions then it's been there's going to be some way to make it true. Okay, what is a contradiction it just means that X implies not X and not X in pi Zacks, if ": [
      1663.6,
      1691.4,
      44
    ],
    "of them or you can kind of figure it out on your own I can make X true. Why? True and Z false. Does that work? Yes, right. So sat of this would be true because there does exist an assignment any questions about that. Okay good. So here's kind of the breakdown. You have a Boolean formula Your solution for Mia is an assignment. The constraint is that the ": [
      1349.0,
      1391.8,
      36
    ],
    "on a on a on a Blog that somebody had proven Candy Crush with NP complete which is kind of funny. Also, Minesweeper. If you guys are old enough to remember this game. The classic also NP complete. Okay. So how do we classify NP complete problems were going to be using something called a reduction? Okay. So if you've taken 105, it's the same kind of concept, but we're ": [
      856.3,
      891.1,
      21
    ],
    "on the original graph all the red vertices together based on the original graph and so on. Frank salt for each graph add these edges and at the triangle then I claimed that an independent set on this graph. We built is a corresponds to a 3 coloring. How would it look here well? for each vertex maybe this would be kind of the blue one and then you have ": [
      2376.6,
      2412.6,
      64
    ],
    "polynomial time algorithm to solve it whether or not it's known. Okay, so if those two things are true, then a is also MP. Why is that? Well let out be be a polynomial time algorithm that solves be and then just use the same idea of how to build an algorithm to solve a using the reduction. Then since algorithm B & F R both polynomial time. Functions right ": [
      1089.4,
      1122.0,
      28
    ],
    "really going to be focusing on how reductions work based on algorithms. And so you're basically Thinking of the decision problem to be the set of all instances for where the result is true, right? so you can think about it as just a big set and then the reduction from one decision problem to another is a function that if if x is in the first decision problem, which ": [
      891.1,
      925.9,
      22
    ],
    "reduced Arbitrage two- Cycles. So we've done a lot of these things. Okay. So what how does it mean that reductions? Why do they have to do with relative hardness? Okay. So let's suppose that a reduces to B & B is in P remember what PBS p means that there is a known polynomial time solution for algorithm. I mean, I guess it's in P if there is a ": [
      1060.1,
      1089.4,
      27
    ],
    "reduces to be and I'll use this little notation and you can think about it as less than or equal to a kind of that sort of shows you the relative hardness of the problem so in Kind of an informal way of saying it is that a is easier than b or not. Not any harder than b. Okay, so we've seen many reductions already we've done some in ": [
      991.5,
      1027.1,
      25
    ],
    "solution was that it really only works with integer values, right? And the the runtime with dependent on the size of the integer. Okay. So let's just kind of talk about why that is considered to be an exponential time algorithm. Okay, so dep knapsack. With I don't know capacity. see and items one through n takes Big O of n c time I mean that's assuming that all of ": [
      653.3,
      697.0,
      16
    ],
    "stumble upon an MP complete problem don't lose all hope there are ways to deal with it. It's not the end of the world. Okay. So this is the statement of NP complete problem right now as we know it if any of NP complete then there are no known polynomial time solutions that can completely solve it on every input. Okay, let's break down this sentence and look for ": [
      2589.3,
      2616.0,
      69
    ],
    "take too long to build it. It'll be polynomial time to build it right and you get something like this. You run SEC and you find that there is a path which was the one that broke it. I think why okay, so there's a path from Y Bar to y. Right like that and there's a path from y to Y Bar. Okay, so that means that there's a ": [
      1849.3,
      1878.1,
      49
    ],
    "that every problem in NP reduce reduces 2 fat will talk about what it means to reduce and all the stuff but this basically lays the foundation for all NP complete problems. All we really need to do is figure out that one problem is NP complete then you can start showing the other problems or NP complete based on this problem. Okay, we'll talk a little bit more about ": [
      436.5,
      476.7,
      10
    ],
    "that in a minute. But this is the foundation of NP completeness. okay, so then as the years go by people found more and more and P complete problems and a large number of the most important optimization and graph problems are all NP complete. Graph Theory number Theory logic puzzles and games packing coding through NP complete and in this book in 1979 this classic book of computers and ": [
      476.7,
      512.7,
      11
    ],
    "the homework, especially in the graph problems, so if you remember we we reduce Max bandwidth to connectivity remember how we did that we we just kept on deleting out All the edges of of a certain weight or higher and seeing if the two points were connected, right? We reduce the longest increasing subsequence to the longest path in a dag. We did that last week. I think we ": [
      1027.1,
      1060.1,
      26
    ],
    "the items have an integer value and the capacity as an integer value, right? But think about what is that capacity? It's just some integer how much information do you need to represent an integer? I think so. in4mation 2 store integer C is really the number of bits, right? number of bits Thanks. So really the input size. Is n + log of C. So if the run time ": [
      697.0,
      757.5,
      17
    ],
    "the loopholes. Okay, so first of all Polynomial time there do exist Solutions, right? So you can use exponential time Solutions if you have the time. Okay, what else? Every input right? Maybe you have kind of certain simple cases Right, what else? completely solve right maybe approximation. Is good enough? Okay, so there's ways around it and I mean, you know a lot of A lot of problems in ": [
      2616.0,
      2677.6,
      70
    ],
    "then can I use it to solve three coloring? So the idea is to build a new graph where you make three copies of every single vertex. Okay, you make a green copy a red copy and a blue copy. Then you connect those three vertices each one of those little sets of three vertices into a triangle and then you also connect all of the green vertices together based ": [
      2344.9,
      2376.6,
      63
    ],
    "then their composition is also a polynomial time. Any questions about that? That's just what it means to be a reduction or reduction from a decision problem a to decision problem p b is defined to be a polynomial time function. Okay. Now let's think about it the other way suppose that a reduces to be an a is not in P. Then that implies that b is not in ": [
      1122.0,
      1161.5,
      29
    ],
    "things and make sure that every closet is true and that's it. So it's easily verifiable right given a formula assignment. It is not hard to tell if the assignment makes the formula true just plug plug in all the values and check Okay, so there is no known polynomial time algorithm for this for the past 50 years people have been trying to figure out one because if you ": [
      1438.3,
      1472.3,
      38
    ],
    "think it's actually that they came up with an independently and it is named after both of them. But the the consequence of the theorem is that sat is NP complete. Okay sat is a a problem. And we'll talk about a little bit more about np-complete in a minute. But just to get you to understand what that means. It means that or this whole statement. Let's say means ": [
      405.0,
      436.5,
      9
    ],
    "this world are NP complete and people have to solve them all the time. And so they use all these kind of loopholes to get around it. Stop a bunch of different ones change the problem. Seems like the easiest way to get around it restrict the instances use approximation algorithms kind of try to get a better and better exponential time algorithm if possible. Average case analysis search uristix, ": [
      2677.6,
      2711.6,
      71
    ],
    "to come out with I don't expect you to do any design problems that are related to this but there will be true and false type questions that is that are related to these Concepts. Okay, so let's kind of try to go back in time and figure out where this problem came from. So. the 1st appearance of this problem came from Kurt Godel when he asked the famous ": [
      207.6,
      243.5,
      3
    ],
    "to go into it. It's it's kind of a tedious proof. It's not super. It's not super hard. It's just very tedious and there's a version of the proof that that you can use Turing machines. If you've done 105, then it might be easier to go down that route. But we're just going to have it as a theorem and and go from there. Okay, are there any questions ": [
      1243.3,
      1276.0,
      33
    ],
    "to sat reduces to sec. Cancel this reduction is based on a few logic facts about logic. First. One is the transitivity of implication a implies b b and t i c that means a and Paiste. Second is that if you have a if and only if statement with a with a variable and its negation, then that is a contradiction make that can't happen. Cuz if and only ": [
      1533.2,
      1568.4,
      41
    ],
    "was a mistake. Okay. So clean H has an independent set of size n if and only if G is three colorable, right? So this is kind of what we said. So that that's introduction and I don't know of a polynomial time algorithm to solve either these problems. It turns out they're both NP complete. But one reducer to the other so if I know that three coloring is ": [
      2501.3,
      2538.8,
      67
    ],
    "way to show all of these problems are NP complete. We're not going to go over all the problems. I just want to highlight a few Racine stat3 sat independent set clique. Traveling salesman and then there's all these other wanted all these other weird ones. Okay. Any questions about that? Okay. I want to go through one more reduction example, we're kind of going to go through it a ": [
      2247.1,
      2280.6,
      60
    ],
    "we can show sat reduces to 3 sat we know the free set is NP complete right basically take any NP problem reduce at the sap and then reduce it to $0.03 and so you can kind of chain these reductions as you go. Okay, so here's the idea behind this reduction. Let's say this is a clause in sat you can replace this Clause with a string of closet ": [
      1915.4,
      1945.0,
      51
    ],
    "when if you go into two, then you can solve it. Okay. Let's look at a few NP complete problems. Okay, we've seen these ones sat 3sat hamiltonian path. That's also NP complete the decision version of traveling salesman. Independence set now we talked about this before we use the backtracking algorithm to figure this out. Right? It's basically you start with a graph undirected graph and you try to ": [
      2052.6,
      2088.9,
      55
    ],
    "with three literals each and the way you do is you start with A1 A2. And then you introduce this new variable y14. You put a positive y 1 in 1 clause and a negated why one of the other clause You keep on doing this with Y2, and basically you just kind of keep on going like that. Okay. So now the idea here is suppose I have an ": [
      1945.0,
      1977.4,
      52
    ],
    "you can find both of those to beat, you know, if you can find both of those implications, then you found a contradiction. But remember what we said before implication is commute transitive. So X implies not x what is what does that mean in my graph? There is a path exactly could be a path with many edges. from X to X negation and from X negation 2x. Okay. ": [
      1691.4,
      1733.8,
      45
    ],
    "you guys remember the perfect matching? We did it with bipartite graphs using network flow. So there is a polynomial time solution to that problem for grass in general. It's pretty cool. You can look it up. It's like one of those very clever algorithms. It breaks up the graph into all these cases and it talks about these vertices that are called blossoms and you kind of Cuz I ": [
      316.3,
      346.5,
      6
    ],
    "you have considered all the topics today. We're just going to kind of talk about P versus NP. It's not going to be a very heavy lecture. It's more just so that you can familiarize yourself with the difference between the two or basically the consequences of the statement if it's equal or not equal and Some examples of some history so it's so so forth. I don't expect you ": [
      177.6,
      207.6,
      2
    ]
  },
  "Class Name": "cse101",
  "Date": "03132019",
  "Full Transcript": "Listen to a podcast.  All right.  Let's get started.  so  Alright, so let's get started. Does anybody have any questions?  I guess I don't know if I announce this to your class, but I'm going to allow.  for a two-sided  handwritten Kevin right hand written  sheet  I've notes.  four final  Any other questions?  Oh just tablet count as handwriting.  So I generally don't really like that, but I'll allow it gif.  Your handwriting that you printed out is the same size as your handwriting rate your regular handwriting.  Is that fair?  Anybody else?  I understand that that's just the way people take notes these days. So I'll allow it but  Meet me halfway.  anything else  Okay, this is the last kind of new material on Friday. I'm basically just going to go a summary over the class make sure that you have considered all the topics today. We're just going to kind of talk about P versus NP. It's not going to be a very heavy lecture. It's more just so that you can familiarize yourself with the difference between the two or basically the consequences of the statement if it's equal or not equal and  Some examples of some history so it's so so forth. I don't expect you to come out with I don't expect you to do any design problems that are related to this but there will be true and false type questions that is that are related to these Concepts.  Okay, so  let's kind of try to go back in time and figure out where this problem came from. So.  the 1st  appearance of this problem came from Kurt Godel when he asked the famous computer scientist mathematician and economist John Von Neumann, the P versus NP question in a private letter written shortly before Von neumanns death. So that was I should have put a date on here remember looking at it probably like  I don't know. I should look it up. I don't want to say  Okay.  So you just proposed the question then in the Soviet Union jablonski invents, the term para bore or Brute Force search to describe the common tutorial explosion of limiting algorithms, especially for circuit design problems. Okay. So this is important because the circuit design problem has a lot to do with a very  What's a notoriously np-complete problem called sap that we'll talk about?  Okay, that's good then.  In 1965, Jack Edmonds give it the first polynomial time algorithm for perfect matching on general grass. Do you guys remember the perfect matching? We did it with bipartite graphs using network flow. So there is a polynomial time solution to that problem for grass in general. It's pretty cool. You can look it up. It's like one of those very clever algorithms. It breaks up the graph into all these cases and it talks about these vertices that are called blossoms and you kind of  Cuz I kind of grow like a flower. It's pretty cool. Anyhow.  So to explain the significance he introduces the section defining p and NP and posing that P NP question. I think he's the one who came up with these these terms even though it was stated before it was stated more in a general case.  Okay, so we have the question now in 71 Steve Cook to find what is NP completeness and we'll talk a little bit more about this a little bit later.  And proves that several problems from logic and, torrox are all NP complete problems. Meaning that P is equal to NP. If and only if any of these problems are polynomial time solvable talked about this a little bit more in detail.  And so cook and Levin.  There's a theorem that named after them. I think it's actually that they came up with an independently and it is named after both of them. But the the consequence of the theorem is that sat is NP complete. Okay sat is a a problem.  And we'll talk about a little bit more about np-complete in a minute. But just to get you to understand what that means. It means that or this whole statement. Let's say  means that every problem  in NP  reduce reduces  2  fat will talk about what it means to reduce and all the stuff but this basically lays the foundation for all NP complete problems. All we really need to do is figure out that one problem is NP complete then you can start showing the other problems or NP complete based on this problem. Okay, we'll talk a little bit more about that in a minute. But this is the foundation of NP completeness.  okay, so then as the years go by people found more and more and P complete problems and  a large number of the most important optimization  and graph problems are all NP complete.  Graph Theory number Theory logic puzzles and games packing coding through NP complete and in this book in 1979 this classic book of computers and intractability.  Lists hundreds of NP complete problems there tons of them out there.  Okay.  so you can see them in comics and  what is this one? This is XKCD.  Is that right?  And you can see that they're talking about the  basically the knapsack problem cuz he's saying we like that we'd like to  we like to buy like to spend exactly 15.05 worth of appetizers and these are the appetizers and so in order to do that, you need to be able to solve a knapsack problem and the  you know that the waiter is saying they didn't have enough time and  He brings up traveling salesman, which is another np-complete problem. Let's look at a few of our favorites Sudoku. I mean, this is kind of in general where like you have an end by and Sudoku problem. It will take polynomial time in in N to come up with a solution that will solve all of them and that's kind of  Why why does this is a puzzle? Why does it entertain us? Because it is kind of this intractable NP complete problem where there is no good algorithmic way to go about solving at you kind of have to use more case-by-case intuition and logic right and your logic changes depending on how the puzzle is set up. And so you as a Puzzler  You're kind of adapting to the the structure of that particular puzzle instead of applying a a a standard algorithm that will work for every puzzle.  Okay knapsack that's kind of like what they were talking about here. I know that we solve knapsack using dynamic programming. But the problem about that solution was that it really only works with integer values, right? And the the runtime with dependent on the size of the integer. Okay. So let's just kind of talk about why that is considered to be an exponential time algorithm. Okay, so dep knapsack.  With I don't know capacity.  see and items  one through n takes  Big O of n c time I mean that's assuming that all of the items have an integer value and the capacity as an integer value, right? But think about what is that capacity? It's just some integer how much information do you need to represent an integer?  I think so.  in4mation  2 store  integer C is really the number of bits, right?  number of bits  Thanks. So really the input size.  Is n + log of C.  So if the run time is in in terms of see that's exponential in the size of the input.  now don't even get me started on if the  if the item items are measured in floating-point numbers or irrational numbers or something anything other than a integer because then you know that algorithm is going to take much longer cuz you have to kind of go through all those things that's just kind of in general knapsack is NP complete problem. There are ways to kind of get faster results depending on if your input has certain qualities.  okay, another one of our favorites Tetris another reason why this is such a entertaining game is because  there does not exist to our knowledge and inefficient algorithm that you can use to get the maximum score on Tetris, even if you know the entire list of blocks that are coming and so just like the other one. It's sort of like a case-by-case basis and you're thinking on the Fly and you kind of look at the  Whatever you have and make decisions based on that. You're kind of making these local decisions and it makes it a little bit more entertaining. Okay. What about Candy Crush?  Another one of our favorites. Yeah. I saw this on a on a on a Blog that somebody had  proven Candy Crush with NP complete which is kind of funny.  Also, Minesweeper.  If you guys are old enough to remember this game.  The classic also NP complete. Okay. So how do we classify NP complete problems were going to be using something called a reduction? Okay. So if you've taken 105, it's the same kind of concept, but we're really going to be focusing on how reductions work based on algorithms. And so you're basically  Thinking of the decision problem to be the set of all instances for where the result is true, right?  so you can think about it as just a big set and then the reduction from one decision problem to another is a function that if if x is in the first decision problem, which means X has an instance for that to be true then the the image of a image of Axe FX is a decision problem in be assuming  Is a instance of B for which the result is true or we'll look at some examples.  But the idea here is that now if I have an algorithm I'll be that can solve be.  Then we can build an algorithm algue that can solve a the way you do. It is on input X you basically figure out what its images and then you solved that image with b and if it's a true reduction then that means that  It will output true. If and only if the original X is an instance in a for which the results should be true.  Okay. So if this function exists, we say that a reduces to be and I'll use this little notation and you can think about it as less than or equal to a kind of that sort of shows you the relative hardness of the problem so in  Kind of an informal way of saying it is that a is easier than b or not. Not any harder than b.  Okay, so we've seen many reductions already we've done some in the homework, especially in the graph problems, so if you remember we we reduce Max bandwidth to connectivity remember how we did that we we just kept on deleting out  All the edges of of a certain weight or higher and seeing if the two points were connected, right?  We reduce the longest increasing subsequence to the longest path in a dag. We did that last week. I think we reduced Arbitrage two- Cycles. So we've done a lot of these things.  Okay.  So what how does it mean that reductions? Why do they have to do with relative hardness?  Okay. So let's suppose that a reduces to B & B is in P remember what PBS p means that there is a known polynomial time solution for algorithm.  I mean, I guess it's in P if there is a polynomial time algorithm to solve it whether or not it's known.  Okay, so if those two things are true, then a is also MP. Why is that? Well let out be be a polynomial time algorithm that solves be and then just use the same idea of how to build an algorithm to solve a using the reduction.  Then since algorithm B & F R both polynomial time.  Functions right then their composition is also a polynomial time.  Any questions about that?  That's just what it means to be a reduction or reduction from a decision problem a to decision problem p b is defined to be a polynomial time function.  Okay.  Now let's think about it the other way suppose that a reduces to be an a is not in P. Then that implies that b is not in P. The reason it's kind of similar right? You can think about it and contradiction suppose that I could build this algorithm this polynomial time algorithm for be let's call it out to pee then I can build a polynomial time algorithm for using the same thing.  And that contradicts the fact that there does not exist polynomial time algorithm for today.  Okay, let's get into NP completeness cuz this is what the reductions are kind of leading up to. So I decision problem a and n p is said to be NP complete if all NP problems reduced to it.  Remember NP problems are just problems that can be verified quickly.  Stop if you can be verified quickly, then you reduced to an NP complete problem. Okay. So this is what we've said before the cook live in theorem is that sat is NP complete this may be hard to think about. How did they go about proving this? How do you show that all of these problems? I mean, there's many many different problems and NP basically all the problems seen in this class or NP. How do you show that all of them reduced to this one problem?  Well, the book goes into it. I'm not going to go into it. It's it's kind of a tedious proof. It's not super.  It's not super hard. It's just very tedious and there's a version of the proof that that you can use Turing machines. If you've done 105, then it might be easier to go down that route. But we're just going to have it as a theorem and and go from there. Okay, are there any questions about that?  Okay, so given that sat is NP complete first, let's define what stat is.  Okay, it's called sad because that's short for satisfiability. So you're given a Boolean formula in conjunctive normal form.  Something like this.  Basically, you have a bunch of variables X Y and Z or maybe more and you have their their opposites right not ask not why and not Z so you make this formula in conjunctive normal form. You can basically make it in any form you want right? Because there's an algorithm that turns any  Boolean formula into conjunctive normal form  and you want to know a if there exists an assignment of the variables that makes the formula true. Okay. So does there exist in assignment for this example?  There's really only eight possibilities right so we can go through some of them or you can kind of figure it out on your own I can make X true.  Why?  True and Z false. Does that work?  Yes, right. So sat of this would be true because there does exist an assignment any questions about that.  Okay good.  So here's kind of the breakdown. You have a Boolean formula Your solution for Mia is an assignment. The constraint is that the assignments make the formula true. The objective is just find such a formula that follows a constraints.  Let's think about sat in terms of NP is sat in NP.  And why?  Yeah, give an instance and a proposed solution. You can figure out if that is a if that's solution makes the instance true, right? It's very easy to do you just kind of have to plug in all the things and make sure that every closet is true and that's it.  So it's easily verifiable right given a formula assignment. It is not hard to tell if the assignment makes the formula true just  plug plug in all the values  and check  Okay, so there is no known polynomial time algorithm for this for the past 50 years people have been trying to figure out one because if you could cracks at that cracks all the MP MP problems.  Okay, but all the algorithms that work in general work in exponential time. Not much faster than looking through every possible combination, but there are sat solvers that are much better than to the end. I just not a polynomial.  Okay, so let's think about another problem related to sat called to sat so to set has the Restriction that every Clause has exactly two literals.  Okay.  so  I claimed that 2sat is in p.  That means that there exists a polynomial time algorithm to solve to set the way that we're going to do it the way that we were going to show it is that we know that the SCC algorithm is in pee right? We've done that the first few weeks. I'm going to show you that to sat reduces to sec.  Cancel this reduction is based on a few logic facts about logic. First. One is the transitivity of implication a implies b b and t i c that means a and Paiste.  Second is that if you have a if and only if statement with a with a variable and its negation, then that is a contradiction make that can't happen.  Cuz if and only if means that they have to both be true and both be false, but if it sits negation than they're always different.  Okay. So each Clause into set looks like this. How do I change an ore into an implies? Does anybody know?  X or Y  Isn't it not X or Y?  Not X or Y.  And then or is commutative right? So this is equal to y or X.  So we get both of these right not why Empire snacks, right?  Any questions about that?  Okay, good. So  the idea is we're going to  create a graph you're going to have a Vertex for each literal and its negation and you're going to draw a directed Edge from whatever whatever you whenever you have the claws X or Y Hill Drive directed Edge from not X to Y and not y 2x.  Okay, what you're going to do is figure out are there any contradictions internal contradictions if there are then there's no there's no chance of having a true assignment if there are no contradictions then it's been there's going to be some way to make it true.  Okay, what is a contradiction it just means that X implies not X and not X in pi Zacks, if you can find both of those to beat, you know, if you can find both of those implications, then you found a contradiction.  But remember what we said before implication is commute transitive.  So X implies not x what is what does that mean in my graph?  There is a path exactly could be a path with many edges.  from X to X  negation and from X negation 2x. Okay. So what are X and X bar called if there's a path from one to the other end back?  Strongly connected great. Thank you.  strongly  connected  Okay, good. So here's the idea of the algorithm.  Create the graph just like we said before.  Right, then run the SCC algorithm then for each variable check to see if its negation is in the same SEC. If it is then you found a contradiction. If not, then there's no internal contradiction. So there's a way to assign the variables to make a true any questions.  That would work to that would work to that cuz that would still be polynomial in the time. So yeah, you could do that. This would be a little bit quicker though.  About to be enough to show that it's in P. Let's just look at an example.  Okay, so I might have four variables and a bunch of these Clauses and so for example the first Clause X or Z. That means I draw on edge from Xbox to z n from z bar to X X or not W. That means I draw an edge from not X to not W&W 2X and so on right so you can just build this graph. It won't take too long to build it. It'll be polynomial time to build it right and you get something like this.  You run SEC and you find that there is a path which was the one that broke it. I think why okay, so there's a path from Y Bar to y.  Right like that and there's a path from y to Y Bar.  Okay, so that means that there's a contradiction there's no way to to fill it in any questions.  Okay good. So, let's go to 3 sat.  Turns out that $0.03 is NP complete.  So $0.02 5 is polynomial time 3sat. We don't know if there's a polynomial time algorithm for it. How we going to show that 3sat is NP complete. We're going to piggyback on the cook Levin theorem. That sat is NP complete then if we can show sat reduces to 3 sat we know the free set is NP complete right basically take any NP problem reduce at the sap and then reduce it to $0.03 and so you can kind of chain these reductions as you go.  Okay, so here's the idea behind this reduction.  Let's say this is a clause in sat you can replace this Clause with a string of closet with three literals each and the way you do is you start with A1 A2.  And then you introduce this new variable y14. You put a positive y 1 in 1 clause and a negated why one of the other clause  You keep on doing this with Y2, and basically you just kind of keep on going like that.  Okay. So now the idea here is  suppose I have an algorithm for 3 sat and I want to I want to solve sat.  So, how do you do it? You take your sat problem. You you convert it into a three-step problem. And then you saw that so that's kind of how the reduction works.  if you want kind of an example to to think about  let's say that this is part of a formula and sat A or B A R A one or a two or three or a four.  That means that if any of them are true the whole thing is true and if they're all false in the whole thing is false and maybe as exercise.  you can think about  why doesn't this formula have the same properties as the other one?  cause  sure. Yeah, but 3 is kind of  The smallest case great cuz when if you go into two, then you can solve it.  Okay.  Let's look at a few NP complete problems. Okay, we've seen these ones sat 3sat hamiltonian path.  That's also NP complete the decision version of traveling salesman.  Independence set now we talked about this before we use the backtracking algorithm to figure this out. Right? It's basically you start with a graph undirected graph and you try to find the maximum independent set the maximum set of vertices such that no two vertices are connected by an edge.  There's this other problem called Clique which is just kind of the opposite. It's basically you want to find the biggest subgraph. That's it. That's a complete graph and it's the opposite because you can take the compliment of the graph and then it turned independent set into a clique because independent set is a set of vertices such that nothing is connected and a clique is a set of vertices such that everything is connected. So  They're kind of the same problem.  Okay knapsack we talked about.  Three coloring we haven't talked about but I'm hoping to give you an example of another reduction that has to do with three coloring.  So sat is the Clauses can be as long as you want.  And three sat these the closet have to come in chunks of three.  No, they're all NP complete also because  You can.  You can use this same.  Reduction to reduce for example for sat to $0.03 in $0.05 to $0.03. What does that help?  Okay.  Yeah.  so  you can reduce 3sat to force at his three sets kind of like a subset of force at in a way.  If you have a 4 sat solver than you can use it to solve the three sad so that's kind of.  Guess all the stats of 3 inoperable NP complete.  Okay.  Oh, that's the same thing. I had in your book. You can see this this chart and it gives you reductions all starting from it also gives you the cook Levin theorem. So it gives you a way to show all of these problems are NP complete. We're not going to go over all the problems. I just want to highlight a few Racine stat3 sat independent set clique.  Traveling salesman and then there's all these other wanted all these other weird ones.  Okay.  Any questions about that?  Okay.  I want to go through one more reduction example, we're kind of going to go through it a little quickly, but I hope you can.  get the gist of it the idea Okay, so  The three coloring problem is given an undirected graph. Can I color the vertices with three different colors? So that no two colors are connected by an edge.  Okay, so the possible colors I'm going to use are red green and blue. So the question is is it possible? So this comes up and maybe like making Maps right? If you wanted to color the different states or different countries of a map so that the borders are the edges and you just don't want to bordering countries to be the same color cuz then it doesn't look good. Okay, so  How we going to reduce three coloring to maximum independent set?  Okay, so if I can solve maximum independent set and polynomial time then can I use it to solve three coloring?  So the idea is to build a new graph where you make three copies of every single vertex.  Okay, you make a green copy a red copy and a blue copy.  Then you connect those three vertices each one of those little sets of three vertices into a triangle and then you also connect all of the green vertices together based on the original graph all the red vertices together based on the original graph and so on.  Frank salt for each graph add these edges  and at the triangle  then I claimed that an independent set on this graph. We built is a corresponds to a 3 coloring.  How would it look here well?  for each vertex  maybe this would be kind of the blue one and then you have  I guess it'd green Andy red Andy blue. Then you have a triangle with these ones sea green see red and sea blue.  But not as tasty blue.  And then you have these corresponding edges like that and these would be in a triangle.  So if I had an independent set of vertices, right? That means that none of those.  Pairs of vertices would be connected. When are you connected by an edge? Either you're the same color, which is not allowed or you're the same vertex in that triangle, which is also not allowed.  There's more than just a clique right because so a clique of size for you certainly couldn't color, right?  but what about  Something that's not necessarily a clique. You still couldn't color it, right?  There's like a bunch of different so cases.  Oh, sorry.  That was a mistake.  Okay.  So clean H has an independent set of size n if and only if G is three colorable, right? So this is kind of what we said.  So that that's introduction and I don't know of a polynomial time algorithm to solve either these problems. It turns out they're both NP complete.  But one reducer to the other so if I know that three coloring is NP complete that will show that maximum independent set is also in NP complete.  Okay good.  so  Frank if we can if we can solve Independence that quickly we can solve three coloring quickly. Can we solve Independence it quickly.  answer is  what is the thing here? We have three coloring.  reduces to maximum independent set  Okay, let's think about a few few ways around it. If you if you stumble upon an MP complete problem don't lose all hope there are ways to deal with it. It's not the end of the world. Okay. So this is the statement of NP complete problem right now as we know it if any of NP complete then there are no known polynomial time solutions that can completely solve it on every input.  Okay, let's break down this sentence and look for the loopholes. Okay, so first of all  Polynomial time there do exist Solutions, right? So you can use exponential time Solutions if you have the time.  Okay, what else?  Every input right? Maybe you have  kind of certain  simple  cases  Right, what else?  completely solve  right maybe approximation.  Is good enough?  Okay, so there's ways around it and I mean, you know a lot of  A lot of problems in this world are NP complete and people have to solve them all the time. And so they use all these kind of loopholes to get around it.  Stop a bunch of different ones change the problem.  Seems like the easiest way to get around it restrict the instances use approximation algorithms kind of try to get a better and better exponential time algorithm if possible.  Average case analysis search uristix, maybe there's like a randomized kind of algorithm that you can use to get to get the the best answer most of the time right? You might not to be guaranteed, but you can get get there.  genetic algorithms  I want to share just a brief anecdote is that my buddy and I are working on building the clock out of bike parts. And what I needed to do was figure out how to gear down the the rotation of the escapement down to the rotation of the minute hand. So the escapement will rotate once every let's say every 33 seconds and I need to turn that into once every hour question.  The escapement is the part of the clock that that's attached to the pendulum.  So how am I going to convert one revolution to the other using bike parts while I have all these gears and I needed to figure out how to put the gears in a certain sequence.  It turns out that problem is the knapsack problem.  And and the gear ratios you kind of have to take the logarithm of them. So you're getting these like really crazy irrational numbers that knapsack problem doesn't deal with well. So what did I do? I made a genetic algorithm and it worked great. So there's ways around it. Okay. Okay, so last few slides. Np-hard, we're not going to really talk much about these because in general empty heart problems are basically problems that  That all NP problems can reduce too but they're not necessarily in and pee. The ones that are not in NP don't really come up a lot in this class.  Okay, so he is equal to NP nobody knows and there's two kind of diagrams that we can think about if one is if they're not equal or if they're equal if they're not equal. Then the NP complete problems are different than the pee problems.  And NP complete problems are kind of in this subset. Np-hard. And in this case, for example, the traveling salesman problem the optimization.  Isn't there where in this one the traveling salesman problem optimization?  Isn't here so.  Does that's just an example of we don't know what the what the consequences are and certain problems could be in different places.  Okay, are there any questions about this?  So yeah, so I guess if if there are equal then all and all peep problems are also NP complete.  But we don't know so we don't we don't know if they are disjoint or equal or not.  See if he has a good feel like MP5 linking internet. Is there any similar?  LMP hard like in that purple area. There are problems there that are that are shown to not be NP.  Yeah, there are problems out there. Like for example, the the halting problem.  halting  problem. This is proving to be np-hard and it's not NP.  This is not in NP. Yeah, so there's things out there but in terms of all the NP complete problems the problems that are inside and P. We don't know.  UC San Diego podcast for more visit podcast. Ucf.edu ",
  "Section": "a00",
  "Time": "1500",
  "Audio URL": "http://podcast-media.ucsd.edu/Podcasts/wi19/cse101_a00_eoacc2krxy/cse101_a00-03132019-1500.mp3",
  "File Name": "lecture_27.flac"
}