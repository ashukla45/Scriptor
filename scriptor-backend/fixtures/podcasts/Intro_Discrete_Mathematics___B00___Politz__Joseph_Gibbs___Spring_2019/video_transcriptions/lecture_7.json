{
    "Blurbs": {
        "Alright, let's get started. Happy Monday everybody. Welcome back. I hope you had a great weekend. So just a reminder about a couple of upcoming deadlines. So today the first main homework assignment is done. That's the one with representing colors for example in the change algorithms. So that homework is due tonight and then there will be a follow-up for that that's released tomorrow morning. So after the homework ": [
            21.1,
            48.8,
            0
        ],
        "And I'm showing up a little equivalents care that lets us write this whenever we have this negation, we will talk about this property more. I'd actually want a glass over in a little bit for now. But the main thing is the thing before the equal sign is the same strategy just with a negation in front of it, but it's a sequence of course, but the main thing ": [
            2896.0,
            2922.2,
            74
        ],
        "Have you ever written a program? Where at the top you say like variables false? Are bully and debug equals true and then you flip it from Falls to true to control of something prince in your program somewhere, right that condition could end up ended in order with other things, but the compiler can tell in a State might be able to tell in an if statement. Oh that'll ": [
            1876.9,
            1900.5,
            47
        ],
        "I meant is as a what I would let me say one more one or two more sentences about that. So in the compiler the compiler might discover that a condition actually always evaluates to true and the compiler could make the program Better Could optimize the program by getting rid of some code. And so the programmer might not have realized and or maybe they intended to do this. ": [
            1852.8,
            1876.9,
            46
        ],
        "I want you to discuss for a minute and it'll open it up again. Okay, click it again with the results of discussing this one 5 4 3 2 1 so lots of lots of the first the first round that was much were spread around but then people converged on C&D is the answers answers if they picked So this is interesting. So what we would have to ask ": [
            2001.3,
            2113.8,
            50
        ],
        "Rose and only produces true if we're not in any of these rows at the variables don't reflect any of these roads. And so what we can do here is take the the same idea from the last strategy of describing the throw exactly that would be not p and not q and not are and then we can negate it. So we take that whole thing in the gator. ": [
            2869.6,
            2894.9,
            73
        ],
        "always evaluate to Tru. I always run this or that always evaluate the false. I never run the program. Okay, so let's talk next about contradiction an example of a contradiction. So which one of these is a contradiction so that again so this should be producing values in the column with falsetta's for all possible assignments of P all possible assignments a p And just a reminder the truth ": [
            1900.5,
            1939.3,
            48
        ],
        "always produce the same results them out of their variables and there's a big table here. I want you to think about this form and I want you to look at these fill in some if you want to watch what you're going to have to fill in a few to make much progress on it. But I want you to identify some of these that you think might be ": [
            1231.7,
            1249.1,
            35
        ],
        "and it's actually it's a good question to ask if we could always translate these things down into simpler Gates like and or xor not or if we actually need the gates for them if we can always build the picture using a smaller number be there are pictures. So so this is so if I conditionals this is most of the propositional operators will need so and or not ": [
            1051.7,
            1083.2,
            29
        ],
        "and then come up with nice really nice English descriptions of what's going on there by simplifying them in our heads or relating them to some situation that makes sense. If the question is how to calculate the compound proposition. Their strategy guide is a nice observation about this and the relationship between all the variables there in this compound out but there's definitely ways to think about this simplification ": [
            620.8,
            656.9,
            19
        ],
        "as a result and the idea is let's build a proposition for that combines a way to get the true in the first row a way to get the true in the second row away to get the true in the fourth row and a way to get the true in the seventh row four ways to get true. Let's try and describe those four ways individually and then put ": [
            2622.1,
            2643.7,
            64
        ],
        "being true and are being false. So that proposition describes the situation of the second row and so we can take a proposition and use it to describe and use it to describe each row. I'm describing each row. And so those are those are the ways to describe those four and then we can combine them together with or to describe a proposition for any of those things happening ": [
            2764.1,
            2796.5,
            70
        ],
        "both true, it produces true otherwise, and say something like if and only if That's a good question. Yeah, so all of these other specific and usually Beyond like and or xor and not I usually end up looking them up because the ones that get used in those are the common ones that gets used when we talk about logic circuits, but they all do have a pictorial representation ": [
            1010.1,
            1051.7,
            28
        ],
        "calculated because we have a true and a false. He said that's actually the case that makes implication be false. If we go back when we have a true for the first preposition in the falls for the second. That's what make this be. So all these cases where we have true than false are going to produce false. So 1 2 3 4 Five in a row that produce ": [
            880.3,
            911.3,
            24
        ],
        "can fill these you can fill these in for practice and not going to spend a lot of time filling in the rest of this week and identify some of these Expressions fill in the truth table see if they're equal and then we know that those are Beats aren't interchangeable with one another those expressions always mean the same thing. There's two special kinds of logical equivalence that are ": [
            1615.9,
            1640.0,
            40
        ],
        "don't I don't expect that anyone necessarily went through all those here and figured this out. What strategies were you trying? What did you first thing you tried? Interesting. So one idea. Is this three variables here. So let's take let's try and split sort of on each variable other strategies. The people tried other strategies of people try. Oh, that's interesting for the bottom for the office of the ": [
            2499.0,
            2550.6,
            61
        ],
        "don't mean the same thing with if then as this table will rely on this definition when you see implication in a proposition So I want to get some practice working with compound propositions. This is propositions where we have multiple different sort of parenthesized Expressions put together and I want to talk about different ways. We could try Computing these and so let's take I want to show us ": [
            394.2,
            425.2,
            13
        ],
        "false in variables and show a little bit about how to work between truth tables in the expression forms of these propositions. So I want to I want to bring you the definition for the new definition and it's related to the problem. We had on the screen at the end of the day on Friday. And it was the statement that a message is scan for viruses whenever the ": [
            106.1,
            132.2,
            3
        ],
        "false then no matter what the value of whole statement ends up being true. Then it might be scanned. It might not be in both of those will be reasonable outcome. This this operation so we talked about how and is called conjunction or disjunction operations called implication and I just I want to be clear that this is pretty much just a definition. The English example is maybe helping ": [
            191.6,
            222.7,
            6
        ],
        "false then we have true and true Consulting the table that produces. true and then if the first proposition is false, then we get true no matter what the value of not prr. So these last two else produced and do these calculations and it's usually just good to do something like this tabular form to be mechanical about it and be careful about it and we'll keep seeing some ": [
            911.3,
            942.9,
            25
        ],
        "first one here peor que and peor are the reading this out loud. This is the one I'm looking at and T or r So it's worth talking about how we would figure out the different pieces here. And one thing I do in some of these situations when I have a compound proposition to think about is I'll make new tables in the truth table for the two pieces ": [
            425.2,
            453.9,
            14
        ],
        "for viruses. That would be what the p&q part of the statement that would be true for this if-then statement, right? The results of those two things together would be true for this offense to call Centro. I would just say the message was sent from an not unknown sender or unknown sender and it was scan for viruses, which is totally reasonable in true under the system. Statement cuz ": [
            334.9,
            366.8,
            11
        ],
        "from unknown part was false, we don't necessarily needed to be from an unknown sender. It could be from an unknown sender. We might still scan for viruses and scan for viruses if it was sent from unknown. So if p is true then Q must be true for the statement to be true if you was false than this thing will be false. But if the first part is ": [
            163.5,
            191.6,
            5
        ],
        "get at ology 4X or cuz it would be definitely two different values for x or Nnp, if and only if p p if and only if he's interesting because that would force us to be in so this would force us to be in one of these two rows, which would be always true. Questions about this example of contradictions you feel the results. The psychology is in contradictions ": [
            2205.8,
            2240.9,
            54
        ],
        "if he'll be opposites of one another and so these must produce false C and D are always going to end up pretty Values in these two rows of the biconditional truth table always produces false Direction doesn't the place we put the negation for this doesn't change the contradiction or not. It's the fact that we're doing this operation on two values must be different which produces false you ": [
            2161.8,
            2205.8,
            53
        ],
        "if it's not sent from unknown sender, we don't we might scan it we might not. weird questions about this definition Show me see the arrow we meet application to be mean this truth table. I'm not the most important thing to pay attention to cuz like we just saw speaking out this definition of implication in English can tangle us up a little bit like sometimes in English. We ": [
            366.8,
            394.2,
            12
        ],
        "implication exorun biconditional or the ones will be using most often. some properties of propositions in general What are the things that's interesting to talk about in terms of propositional logic is when two propositions that look different always produce the same results no matter what value we picked for their variables on a say that again cuz it's when two propositions look different actually produce the same result no ": [
            1083.2,
            1118.6,
            30
        ],
        "in analyzing software. So question that I have is which of the following which of these is a tautology which of these these five choices matches this case of being a tautology. So is logically equivalent to true meaning if it's this case for the right where all the values are true no matter what p&q are which is a tautology. Which is a tautology. Lemon, I close the first ": [
            1698.8,
            1736.6,
            43
        ],
        "in both parts of the proposition and then you can use that knowledge about Peter figure things out to I want you to work on this last column for a minute just because I want you to try a few try doing the set. This yourself, but I want you to try doing this last time to salsa practice with implication which we just talked about. So try and fill ": [
            656.9,
            682.8,
            20
        ],
        "in order that with our it doesn't matter where we put the parentheses in the sequence of oars. If it's just a sequence of oars, we can move the parentheses around and so will start but we're going to start writing propositions where we write things like P or Q or R without parentheses around them. That means the same thing as bread the sizing it either way. It'll be ": [
            2693.4,
            2713.4,
            67
        ],
        "in right now. All right. So I'm one question I have here is based on the work. We did already to calculate this first compound proposition. What column should we add that will be most helpful hear what column is going to be most helpful to adhere? Not P or are right because we've already done the work for P or Q. We've already done to work for prr so ": [
            682.8,
            828.0,
            21
        ],
        "interesting question because one reason that interesting is it says if we have a particular result, we'd like to get a particular truth table result. We like to get freshened Expressions correspond to logic gates, which also tell us a little bit about how we might build a circuit given that we want some specific output for some specific inputs buildup from some desired outcome. We have in a truth ": [
            2328.5,
            2354.1,
            58
        ],
        "is due this going to be a follow-up completely on your own so you don't work with your partner anymore. It's going to test the things from the homework and then the second warm up assignment is going to go out already went out and talked about that and that's going to be practicing some of the things that we learned last week in preparation for Homework on that material ": [
            48.8,
            78.8,
            1
        ],
        "is true it's false if he was false and if the thing before the arrow is false than the whole statement is always true no matter the value of Q. So there's only this one place in the table where we get a false result for implication. And the only time that happens is if p is true and Q is false. So this is what we mean when we ": [
            246.4,
            266.6,
            8
        ],
        "kind of thinking we want to do to simplify propositions down or Reason about propositions, but I'm not going to talk through all of these here is actually a more specific thing. I want to talk about for the rest of class today. So we just spent a bunch of time taking these propositions and using truth tables as a way to think about the propositions. That's interesting useful how ": [
            2274.8,
            2304.0,
            56
        ],
        "let me let me let me re characterize out a little bit cuz the way you asked that question is actually incredibly helpful. So the overall statement the captors are all four of these Rose is the offense statement in the first row. The message was the message with scan for virus. The first part is unknown. The message was sent from an unknown sender and the message was scan ": [
            309.2,
            334.9,
            10
        ],
        "logically equivalent something in this table that might be logical logically equivalent to see which ones of these are similar. Okay, I'm going to ask now so there's like a lot of this table to fill in so I'm actually intentionally expecting that there's some for you to do on your own if you want to feel some more in after class has practice but two columns. Actually, let's start ": [
            1249.1,
            1464.8,
            36
        ],
        "matter what values we picked for the variables. That's actually a really interesting case to think about the really interesting case to think about in terms of programming. I want to ask this question. Why might it be useful to know the two propositions that look different. I'll always produce the same result in terms of programming. Why might that matter in a program. Why would you ever care? Shrink ": [
            1118.6,
            1153.7,
            31
        ],
        "message was sent from an unknown system. One of the things someone said during class as a way that they wanted to describe this if this message was sent from an unknown sender then I expand. And one of the observations we were making at the end of class on Friday is that if the message came from someone else if this first part isn't true basically if the scent ": [
            132.2,
            163.5,
            4
        ],
        "new columns in the truth table for P or Q here and I can just take that part of a compound proposition and fill it in. So if I'm feeling in the values for P or Q down this column of this is true and Q are true. So this is true. One of them is true in the next bro. So that results in true four or true true ": [
            453.9,
            484.7,
            15
        ],
        "not logically equivalent. We drop the tooth truth table and something different. the first and fourth used to interesting take a minute folks if you had these filled in or not the first and fourth are logically equivalent to focus on one take one minute and check. Feel free to discuss and talk about it. Alright, okay. So if you so I'm going to ask you to do something in ": [
            1518.7,
            1586.0,
            38
        ],
        "one helper in one place and use it and all those places and simplify the code so we can both simplify code and sometimes we can actually faster if you are operations that need to happen to get to the same point. So this is actually relevant for programming and this ends up this kind of thing ends up coming up for implementing compilers to where we're trying to stay ": [
            1180.4,
            1207.5,
            33
        ],
        "or any of those things. Play come up with variables assignment to the variables that put us in any one of those four of these propositions will be for them all together and it will result in a overall true. Overall True Result. This is definitely not necessarily shortest proposition that exactly matches this table. It's actually quite long but it definitely works definitely work. This process always produces something ": [
            2796.5,
            2829.3,
            71
        ],
        "p double arrow q and with this means is that P implies q and Q implies P one way to write this which is true when you are exactly the same. So it's kind of like a compliment X or XR is true when p and Q are different and this biconditional is true when they're exactly the same. So if they're both false it produces true and if they're ": [
            971.2,
            1010.1,
            27
        ],
        "particularly interesting and knees are actually quite interesting in the context of programming. They're called tautology and contradiction. I'm so these are just words to Define tautology means a tautology is a proposition that's logically equivalent to true and contradiction is a proposition that so no matter what variables we assign values. We assigned to the variables and it's hot ology true comes out and no matter what value is ": [
            1640.0,
            1673.2,
            41
        ],
        "q and not P or are in. These are the ones we can combine together in order to fill in this last bro. And we just need to be a little bit careful to apply the definition of implication correctly here. What's the what's the top row of this column is based on the values that we just talk? The top row of this one should go here. We just ": [
            854.6,
            880.3,
            23
        ],
        "round and five for 3. 2 1 Okay, I just got this one briefly just to make sure we're on the same page. and picking again with the results of discussing this and for 3 2 1 okay, cool, Yeah, this is when we're showing look so they weren't D2D give yourself a round of applause. Great, I didn't teach you that you taught each other that that's cool. Alright, ": [
            1736.6,
            1815.5,
            44
        ],
        "say implication and we will read this out loud as these if-then statements. So if some if one proposition than another propositions how it read it out loud before we gone we're going to use this a bunch today to get practice with it, but I just want to make sure there's a chance for questions about the definition before we go on. messages. That's a really good point. So ": [
            266.6,
            309.2,
            9
        ],
        "situations for those Rose and an order them together we can we can get through when we expect because of any one of them is true. We want to produce true. I just want to make a comment about and and or buts and and or have a special property here that if we I do. Let's just take the example in the top left ear peor Que in parentheses ": [
            2671.7,
            2693.4,
            66
        ],
        "so just be aware tonight. The homework is due then Thursday. We're going to keep having these usual to deadline of a follow-up for the last homework and the warm-up for the next one any Logistics questions before we get started. Okay. So what we're going to do today is get a bunch of practice proposition a practice with some of the relationships between true and false between true and ": [
            78.8,
            106.1,
            2
        ],
        "so yeah peor not pee is the tautology here. And I'm the things to do here is check with a truth table. We might have some intuition about some of these in the intuition is helpful. And then we can always write out the truth table to check the truth table for a b c and e will see that there is a foster. Yeah, that's really interesting. So what ": [
            1815.5,
            1852.8,
            45
        ],
        "strong things about what we know at different points in a program and we'd like to be able to substitute one expression for another knowing it gets the same results that is for lots of other reasons, but I like that one because it is something I run into in programming sometimes. The one thing to think about that is what are examples of prepositions that are logically equivalent that ": [
            1207.5,
            1231.7,
            34
        ],
        "sure that that when we get the info Set up a particular row here. We get the output this specified. So how would you build a compound proposition or Alexa to do this? But there's lots of algorithms and sort of intuition based ways to do that. I want you to try this from feel free to discuss and talk about strategies. Does he do this? All right, so I ": [
            2384.6,
            2499.0,
            60
        ],
        "table for the biconditional that we described earlier. Call askew. Is is true only when these are the same value so the truth table here is this for the biconditional? For the first round. I'm going to close this in 5 4. 3 2 1 all right, and I have a little more disgusting so I can open it up. Again. There's a variety of answers that people gave so ": [
            1939.3,
            2001.3,
            49
        ],
        "table table to build an expression. So there's a truth table here and there's a question on the back and I want you to think for a minute or two about how you can build a compound proposition the reflexx exactly this truth table. So it should be a compound proposition that uses the variable in R and somehow combines them together with a logical operations. We've learned to make ": [
            2354.1,
            2384.6,
            59
        ],
        "that exactly matches the table. Okay, so I must think about think about if there's any other ways to do this one thing we could do is let's try coming up with the proposition that instead of trying to get into a true route avoids the fall throws guy that tries to get into one of the true rose. What about a proposition that avoids all the false Rose is ": [
            2829.3,
            2869.6,
            72
        ],
        "that's important here is this part where the thing inside the parentheses exactly matches that bottom row I all the rows with false. Except this time we want to make sure we're not in any of those ropes. We need to avoid all of those rows instead of just getting into one of them. So we get all these properties one for each of the rows and then we and ": [
            2922.2,
            2948.2,
            75
        ],
        "the end where we see the false true-false at the end. So both of us showing up different pattern cuz we're only getting the false in pee or are when both of the columns B&R. Then to calculate this last this column with the end. I have the two pieces together so I can just consult the rules for an and so this column should be this column that we ": [
            525.0,
            553.5,
            17
        ],
        "the minute. I do this in some of my classes. I don't think I've done it in here yet. So I'm going to ask you to hum in a minute like you're going to like humming. So if you think that these are lot different column 1 and 4 are logically equivalent hum. All right. I think there's some good agreement in a room and I think that mechanically you ": [
            1586.0,
            1615.9,
            39
        ],
        "the situations were these Rose produce the situation for these what we can do is just look at the values of the variables in the first row corresponds to pee being true and Q being true and are being true. That's when that produces true when were in the situation for this first grow. In the second row that's corresponds to PB and Q are being P being true to ": [
            2737.9,
            2764.1,
            69
        ],
        "them together instead of ordering them together because we need to avoid all of those cases. You know the one minute I have left. I just want to give you some words that we can talk about these things will be working with these things more this quarter. But the first strategy where we came up with an for the describe each of the rows and then ordered them all ": [
            2948.2,
            2972.1,
            76
        ],
        "them together. So one way to talk about doing this is I'm in a we want to make the first wrote True or the second row true or the fourth row true or the seventh row true. If we can come up with a proposition that makes any of those cases happen to get a True Result that there's an aura underneath here where we can describe those Rose the ": [
            2643.7,
            2671.7,
            65
        ],
        "there a mechanical process there an algorithm. We could take them and get them out of them and always get a proposition that produces the same results as a truth table. They're not necessarily the strategies that we're just described and they're not the only way to do this, but they are mechanical and always work. So the first idea is to identify all of the rose that produce true ": [
            2595.1,
            2622.1,
            63
        ],
        "this truth table on the right helped us was seeing with c and d wear when we have not seen if and only if he or P if and only if not, pee wee know that we're going to end up in the rows of this truth table for the values are different because he could never be never be the same value folks could never produce the same value ": [
            2141.5,
            2161.8,
            52
        ],
        "to think about logical equivalence help us calculate the result for any pair of inputs or any set of inputs for the variables on this nice and useful. It's also interesting to go backwards to say we have a particular truth table and we would like to come up with the proposition that reflects his truth table probably a compound proposition and if the truth table large And that's an ": [
            2304.0,
            2328.5,
            57
        ],
        "together is called disjunctive normal form or dnf disjunction because we're using auras between things and then this other version is called conjunctive normal form because we're using Anne's between the separate sub expressions. the main idea here is looking at each row coming up with the proposition for that row and then combining them together using either and or or is appropriate for if we're trying to ": [
            2972.1,
            2999.7,
            77
        ],
        "top four so we can figure out some kind of negation here. We can look for patterns throughout the table people started trying to use Are the strategies? Yeah. You try basically you saw some structure and tried something right that I did that is also a good strategy in many of these cases are so specific strategy. I'm actually two specific strategies. Although they're very closely related always work ": [
            2550.6,
            2595.1,
            62
        ],
        "true. And then finally there's these two rows hours produce. Then I can take the other side of the compound proposition hear another chunk of the expression, which is P or r. And feel distant and so now I'm looking at the p in the are columns and still doing the or operation on them. So we have true. true true and this one has a slightly different pattern at ": [
            484.7,
            525.0,
            16
        ],
        "true. If any one of those values is true and in the same holds holds for and where we can move the parentheses around and get the same result. You can do the truth table to check sequences of an only if all of those values are true do we get we get false if any of them or false, I just wanted to put that up. What to describe ": [
            2713.4,
            2737.9,
            68
        ],
        "two interesting kinds of logical equivalence where things are either equivalent to True 450 ologies or false for contradictions. So I'm not going to talk through all these I just want to make a point that there's many interesting and useful logical equivalences that we can use when we want to reason about propositions. These are all listed in the book. And so they're all is more useful for any ": [
            2240.9,
            2274.8,
            55
        ],
        "us understand a situation where the definition makes sense but this is really just a definition. This is if we use this arrow symbol, we mean implication we might read it in English as saying if P then q and that truth table is what defines implication if the first if the thing before the arrow p in this case is true. Then the statement is true only when Q ": [
            222.7,
            246.4,
            7
        ],
        "want to have for the compound proposition should be true only when both of them. So now the process of copying this over I'm not looking anymore at any of this. I'm only looking at the compound columns in order to do this this column calculation. And we get bosses wherever there's at least one false. Yeah, so then there's actually a lot of ways to look at these propositions ": [
            553.5,
            620.8,
            18
        ],
        "was in there. So if we have to drop has a two compound propositions one was smaller than the other it might be nice to use the smaller one in a program for some reason. All interesting. So if you noticed that these two like two or three or four different expressions are different propositions were actually doing the same thing, even though they look different you could maybe write ": [
            1153.7,
            1180.4,
            32
        ],
        "ways to die on different kinds of examples and in different ways. I want to introduce one on your worksheet. I want to introduce one new symbol here. I'm just going to stick in your slide in so I can dry before we go on. there's a symbol on your worksheet at the top, right but says biconditional and it has the this drawn on their p double arrow q ": [
            942.9,
            971.2,
            26
        ],
        "we assigned to the variables in a contradiction false comes out. This is a really important property because I can tell you things like the condition of that if always evaluates to true so we don't need the else Branch at all, right? That's something you could learn if there was a tautology in the condition of an a In a program so this actually really does come up in ": [
            1673.2,
            1698.8,
            42
        ],
        "we can make one column here. That's the negation of or not pee or are that Colin is going to have the inverse of the opposite of the toggle? Those are all words that people used to describe this. On Friday, but the the opposite value when we see true we put a false when we see also put a true and now we have these two columns P or ": [
            828.0,
            854.6,
            22
        ],
        "with this one. Definitely not logically equivalent equivalent. We're not. Yeah. The second and third one. What did you have is truth values in the second and third columns. true false false false false true true true Hey, so when p is true and Q is true. Then this produces false copying this down or anything is everyone agree with these Rose. This is what it looks like when they're ": [
            1464.8,
            1518.7,
            37
        ],
        "your is four. Implies not-p, are there any Rose and that truth table that produced true and there are because if p is false a produces troop so we can easily find something that produces true for this position. If we make PB truth and the things the left of the arrow not pee will befall so we'll get some True Value is there then we get to C&D and ": [
            2113.8,
            2141.5,
            51
        ]
    },
    "File Name": "Intro_Discrete_Mathematics___B00___Politz__Joseph_Gibbs___Spring_2019-lecture_7.flac",
    "Full Transcript": "Alright, let's get started. Happy Monday everybody. Welcome back. I hope you had a great weekend. So just a reminder about a couple of upcoming deadlines. So today the first main homework assignment is done. That's the one with representing colors for example in the change algorithms. So that homework is due tonight and then there will be a follow-up for that that's released tomorrow morning. So after the homework is due this going to be a follow-up completely on your own so you don't work with your partner anymore. It's going to test the things from the homework and then the second warm up assignment is going to go out already went out and talked about that and that's going to be practicing some of the things that we learned last week in preparation for Homework on that material so just be aware tonight. The homework is due then Thursday. We're going to keep having these usual to deadline of a follow-up for the last homework and the warm-up for the next one any Logistics questions before we get started.  Okay. So what we're going to do today is get a bunch of practice proposition a practice with some of the relationships between true and false between true and false in variables and show a little bit about how to work between truth tables in the expression forms of these propositions.  So I want to I want to bring you the definition for the new definition and it's related to the problem. We had on the screen at the end of the day on Friday.  And it was the statement that a message is scan for viruses whenever the message was sent from an unknown system. One of the things someone said during class as a way that they wanted to describe this if this message was sent from an unknown sender then  I expand.  And one of the observations we were making at the end of class on Friday is that if the message came from someone else if this first part isn't true basically if the scent from unknown part was false, we don't necessarily needed to be from an unknown sender. It could be from an unknown sender. We might still scan for viruses and scan for viruses if it was sent from unknown. So if p is true then Q must be true for the statement to be true if you was false than this thing will be false. But if the first part is false then no matter what the value of whole statement ends up being true. Then it might be scanned. It might not be in both of those will be reasonable outcome.  This this operation so we talked about how and is called conjunction or disjunction operations called implication and I just I want to be clear that this is pretty much just a definition. The English example is maybe helping us understand a situation where the definition makes sense but this is really just a definition. This is if we use this arrow symbol, we mean implication we might read it in English as saying if P then q and that truth table is what defines implication if the first if the thing before the arrow p in this case is true. Then the statement is true only when Q is true it's false if he was false and if the thing before the arrow is false than the whole statement is always true no matter the value of Q.  So there's only this one place in the table where we get a false result for implication. And the only time that happens is if p is true and Q is false. So this is what we mean when we say implication and we will read this out loud as these if-then statements. So if some if one proposition than another propositions how it read it out loud before we gone we're going to use this a bunch today to get practice with it, but I just want to make sure there's a chance for questions about the definition before we go on.  messages.  That's a really good point. So let me let me let me re characterize out a little bit cuz the way you asked that question is actually incredibly helpful. So the overall statement the captors are all four of these Rose is the offense statement in the first row. The message was the message with scan for virus. The first part is unknown. The message was sent from an unknown sender and the message was scan for viruses. That would be what the p&q part of the statement that would be true for this if-then statement, right? The results of those two things together would be true for this offense to call Centro. I would just say the message was sent from an not unknown sender or unknown sender and it was scan for viruses, which is totally reasonable in true under the system.  Statement cuz if it's not sent from unknown sender, we don't we might scan it we might not.  weird questions about this definition  Show me see the arrow we meet application to be mean this truth table. I'm not the most important thing to pay attention to cuz like we just saw speaking out this definition of implication in English can tangle us up a little bit like sometimes in English. We don't mean the same thing with if then as this table will rely on this definition when you see implication in a proposition  So I want to get some practice working with compound propositions. This is propositions where we have multiple different sort of parenthesized Expressions put together and I want to talk about different ways. We could try Computing these and so let's take I want to show us first one here peor que and peor are the reading this out loud. This is the one I'm looking at and T or r  So it's worth talking about how we would figure out the different pieces here. And one thing I do in some of these situations when I have a compound proposition to think about is I'll make new tables in the truth table for the two pieces new columns in the truth table for P or Q here and I can just take that part of a compound proposition and fill it in. So if I'm feeling in the values for P or Q down this column of this is true and Q are true. So this is true.  One of them is true in the next bro. So that results in true four or true true true. And then finally there's these two rows hours produce.  Then I can take the other side of the compound proposition hear another chunk of the expression, which is P or r.  And feel distant and so now I'm looking at the p in the are columns and still doing the or operation on them. So we have true.  true  true  and this one has a slightly different pattern at the end where we see the false true-false at the end. So both of us showing up different pattern cuz we're only getting the false in pee or are when both of the columns B&R.  Then to calculate this last this column with the end. I have the two pieces together so I can just consult the rules for an and so this column should be this column that we want to have for the compound proposition should be true only when both of them. So now the process of copying this over I'm not looking anymore at any of this. I'm only looking at the compound columns in order to do this this column calculation.  And we get bosses wherever there's at least one false.  Yeah, so then there's actually a lot of ways to look at these propositions and then come up with nice really nice English descriptions of what's going on there by simplifying them in our heads or relating them to some situation that makes sense. If the question is how to calculate the compound proposition. Their strategy guide is a nice observation about this and the relationship between all the variables there in this compound out but there's definitely ways to think about this simplification in both parts of the proposition and then you can use that knowledge about Peter figure things out to I want you to work on this last column for a minute just because I want you to try a few try doing the set.  This yourself, but I want you to try doing this last time to salsa practice with implication which we just talked about. So try and fill in right now.  All right. So I'm one question I have here is based on the work. We did already to calculate this first compound proposition. What column should we add that will be most helpful hear what column is going to be most helpful to adhere?  Not P or are right because we've already done the work for P or Q. We've already done to work for prr so we can make one column here. That's the negation of or not pee or are that Colin is going to have the inverse of the opposite of the toggle? Those are all words that people used to describe this.  On Friday, but the the opposite value when we see true we put a false when we see also put a true and now we have these two columns P or q and not P or are in. These are the ones we can combine together in order to fill in this last bro.  And we just need to be a little bit careful to apply the definition of implication correctly here. What's the what's the top row of this column is based on the values that we just talk?  The top row of this one should go here. We just calculated because we have a true and a false.  He said that's actually the case that makes implication be false. If we go back when we have a true for the first preposition in the falls for the second. That's what make this be. So all these cases where we have true than false are going to produce false. So 1 2 3 4  Five in a row that produce false then we have true and true Consulting the table that produces.  true  and then if the first proposition is false, then we get true no matter what the value of not prr. So these last two else produced and do these calculations and it's usually just good to do something like this tabular form to be mechanical about it and be careful about it and we'll keep seeing some ways to die on different kinds of examples and in different ways. I want to introduce one on your worksheet. I want to introduce one new symbol here. I'm just going to stick in your slide in so I can dry before we go on.  there's a symbol on your worksheet at the top, right but says biconditional and it has the this drawn on their p double arrow q p double arrow q and with this means is that P implies q and  Q implies P one way to write this which is true when you are exactly the same. So it's kind of like a compliment X or XR is true when p and Q are different and this biconditional is true when they're exactly the same. So if they're both false it produces true and if they're both true, it produces true otherwise, and say something like if and only if  That's a good question. Yeah, so all of these other specific and usually Beyond like and or xor and not I usually end up looking them up because the ones that get used in those are the common ones that gets used when we talk about logic circuits, but they all do have a pictorial representation and it's actually it's a good question to ask if we could always translate these things down into simpler Gates like and or xor not or if we actually need the gates for them if we can always build the picture using a smaller number be there are pictures.  So so this is so if I conditionals this is most of the propositional operators will need so and or not implication exorun biconditional or the ones will be using most often.  some properties of propositions in general  What are the things that's interesting to talk about in terms of propositional logic is when two propositions that look different always produce the same results no matter what value we picked for their variables on a say that again cuz it's when two propositions look different actually produce the same result no matter what values we picked for the variables.  That's actually a really interesting case to think about the really interesting case to think about in terms of programming. I want to ask this question. Why might it be useful to know the two propositions that look different. I'll always produce the same result in terms of programming. Why might that matter in a program. Why would you ever care?  Shrink was in there. So if we have to drop has a two compound propositions one was smaller than the other it might be nice to use the smaller one in a program for some reason.  All interesting. So if you noticed that these two like two or three or four different expressions are different propositions were actually doing the same thing, even though they look different you could maybe write one helper in one place and use it and all those places and simplify the code so we can both simplify code and sometimes we can actually faster if you are operations that need to happen to get to the same point. So this is actually relevant for programming and this ends up this kind of thing ends up coming up for implementing compilers to where we're trying to stay strong things about what we know at different points in a program and we'd like to be able to substitute one expression for another knowing it gets the same results that is for lots of other reasons, but I like that one because it is something I run into in programming sometimes.  The one thing to think about that is what are examples of prepositions that are logically equivalent that always produce the same results them out of their variables and there's a big table here. I want you to think about this form and I want you to look at these fill in some if you want to watch what you're going to have to fill in a few to make much progress on it. But I want you to identify some of these that you think might be logically equivalent something in this table that might be logical logically equivalent to see which ones of these are similar.  Okay, I'm going to ask now so there's like a lot of this table to fill in so I'm actually intentionally expecting that there's some for you to do on your own if you want to feel some more in after class has practice but two columns. Actually, let's start with this one. Definitely not logically equivalent equivalent.  We're not. Yeah.  The second and third one. What did you have is truth values in the second and third columns.  true false false false false true true true  Hey, so when p is true and Q is true. Then this produces false copying this down or anything is everyone agree with these Rose. This is what it looks like when they're not logically equivalent. We drop the tooth truth table and something different.  the first and fourth used to  interesting take a minute folks if you had these filled in or not the first and fourth are logically equivalent to focus on one take one minute and check.  Feel free to discuss and talk about it.  Alright, okay. So if you so I'm going to ask you to do something in the minute. I do this in some of my classes. I don't think I've done it in here yet. So I'm going to ask you to hum in a minute like you're going to like humming. So if you think that these are lot different column 1 and 4 are logically equivalent hum.  All right. I think there's some good agreement in a room and I think that mechanically you can fill these you can fill these in for practice and not going to spend a lot of time filling in the rest of this week and identify some of these Expressions fill in the truth table see if they're equal and then we know that those are Beats aren't interchangeable with one another those expressions always mean the same thing.  There's two special kinds of logical equivalence that are particularly interesting and knees are actually quite interesting in the context of programming. They're called tautology and contradiction. I'm so these are just words to Define tautology means a tautology is a proposition that's logically equivalent to true and contradiction is a proposition that so no matter what variables we assign values. We assigned to the variables and it's hot ology true comes out and no matter what value is we assigned to the variables in a contradiction false comes out. This is a really important property because I can tell you things like the condition of that if always evaluates to true so we don't need the else Branch at all, right? That's something you could learn if there was a tautology in the condition of an a  In a program so this actually really does come up in in analyzing software. So question that I have is which of the following which of these is a tautology which of these these five choices matches this case of being a tautology. So is logically equivalent to true meaning if it's this case for the right where all the values are true no matter what p&q are which is a tautology.  Which is a tautology.  Lemon, I close the first round and five for 3.  2  1  Okay, I just got this one briefly just to make sure we're on the same page.  and picking again with the results of discussing this  and for 3  2  1  okay, cool, Yeah, this is when we're showing look so they weren't D2D give yourself a round of applause.  Great, I didn't teach you that you taught each other that that's cool. Alright, so yeah peor not pee is the tautology here. And I'm the things to do here is check with a truth table. We might have some intuition about some of these in the intuition is helpful. And then we can always write out the truth table to check the truth table for a b c and e will see that there is a foster.  Yeah, that's really interesting. So what I meant is as a what I would let me say one more one or two more sentences about that. So in the compiler the compiler might discover that a condition actually always evaluates to true and the compiler could make the program Better Could optimize the program by getting rid of some code. And so the programmer might not have realized and or maybe they intended to do this. Have you ever written a program? Where at the top you say like variables false?  Are bully and debug equals true and then you flip it from Falls to true to control of something prince in your program somewhere, right that condition could end up ended in order with other things, but the compiler can tell in a State might be able to tell in an if statement. Oh that'll always evaluate to Tru. I always run this or that always evaluate the false. I never run the program.  Okay, so let's talk next about contradiction an example of a contradiction. So which one of these is a contradiction so that again so this should be producing values in the column with falsetta's for all possible assignments of P all possible assignments a p  And just a reminder the truth table for the biconditional that we described earlier.  Call askew.  Is is true only when these are the same value so the truth table here is this for the biconditional?  For the first round. I'm going to close this in 5 4.  3  2  1  all right, and I have a little more disgusting so I can open it up. Again. There's a variety of answers that people gave so I want you to discuss for a minute and it'll open it up again.  Okay, click it again with the results of discussing this one  5 4 3 2 1  so lots of lots of the first the first round that was much were spread around but then people converged on C&D is the answers answers if they picked  So this is interesting. So what we would have to ask your is four. Implies not-p, are there any Rose and that truth table that produced true and there are because if p is false a produces troop so we can easily find something that produces true for this position. If we make PB truth and the things the left of the arrow not pee will befall so we'll get some True Value is there then we get to C&D and this truth table on the right helped us was seeing with c and d wear when we have not seen if and only if he or P if and only if not, pee wee know that we're going to end up in the rows of this truth table for the values are different because he could never be never be the same value folks could never produce the same value if he'll be opposites of one another and so these must produce false C and D are always going to end up pretty  Values in these two rows of the biconditional truth table always produces false Direction doesn't the place we put the negation for this doesn't change the contradiction or not. It's the fact that we're doing this operation on two values must be different which produces false you get at ology 4X or cuz it would be definitely two different values for x or  Nnp, if and only if p p if and only if he's interesting because that would force us to be in so this would force us to be in one of these two rows, which would be always true.  Questions about this example of contradictions you feel the results.  The psychology is in contradictions two interesting kinds of logical equivalence where things are either equivalent to True 450 ologies or false for contradictions.  So I'm not going to talk through all these I just want to make a point that there's many interesting and useful logical equivalences that we can use when we want to reason about propositions. These are all listed in the book. And so they're all is more useful for any kind of thinking we want to do to simplify propositions down or Reason about propositions, but I'm not going to talk through all of these here is actually a more specific thing. I want to talk about for the rest of class today.  So we just spent a bunch of time taking these propositions and using truth tables as a way to think about the propositions. That's interesting useful how to think about logical equivalence help us calculate the result for any pair of inputs or any set of inputs for the variables on this nice and useful. It's also interesting to go backwards to say we have a particular truth table and we would like to come up with the proposition that reflects his truth table probably a compound proposition and if the truth table large  And that's an interesting question because one reason that interesting is it says if we have a particular result, we'd like to get a particular truth table result. We like to get freshened Expressions correspond to logic gates, which also tell us a little bit about how we might build a circuit given that we want some specific output for some specific inputs buildup from some desired outcome. We have in a truth table table to build an expression. So there's a truth table here and there's a question on the back and I want you to think for a minute or two about how you can build a compound proposition the reflexx exactly this truth table. So it should be a compound proposition that uses the variable in R and somehow combines them together with a logical operations. We've learned to make sure that that when we get the info  Set up a particular row here. We get the output this specified. So how would you build a compound proposition or Alexa to do this? But there's lots of algorithms and sort of intuition based ways to do that. I want you to try this from  feel free to discuss and talk about strategies. Does he do this?  All right, so I don't I don't expect that anyone necessarily went through all those here and figured this out. What strategies were you trying? What did you first thing you tried?  Interesting. So one idea. Is this three variables here. So let's take let's try and split sort of on each variable other strategies. The people tried other strategies of people try.  Oh, that's interesting for the bottom for the office of the top four so we can figure out some kind of negation here. We can look for patterns throughout the table people started trying to use  Are the strategies?  Yeah.  You try basically you saw some structure and tried something right that I did that is also a good strategy in many of these cases are so specific strategy.  I'm actually two specific strategies. Although they're very closely related always work there a mechanical process there an algorithm. We could take them and get them out of them and always get a proposition that produces the same results as a truth table. They're not necessarily the strategies that we're just described and they're not the only way to do this, but they are mechanical and always work. So the first idea is to identify all of the rose that produce true as a result and the idea is let's build a proposition for that combines a way to get the true in the first row a way to get the true in the second row away to get the true in the fourth row and a way to get the true in the seventh row four ways to get true. Let's try and describe those four ways individually and then put them together.  So one way to talk about doing this is I'm in a we want to make the first wrote True or the second row true or the fourth row true or the seventh row true. If we can come up with a proposition that makes any of those cases happen to get a True Result that there's an aura underneath here where we can describe those Rose the situations for those Rose and an order them together we can we can get through when we expect because of any one of them is true. We want to produce true. I just want to make a comment about and and or buts and and or have a special property here that if we  I do. Let's just take the example in the top left ear peor Que in parentheses in order that with our it doesn't matter where we put the parentheses in the sequence of oars. If it's just a sequence of oars, we can move the parentheses around and so will start but we're going to start writing propositions where we write things like P or Q or R without parentheses around them. That means the same thing as bread the sizing it either way. It'll be true. If any one of those values is true and in the same holds holds for and where we can move the parentheses around and get the same result. You can do the truth table to check sequences of an only if all of those values are true do we get we get false if any of them or false, I just wanted to put that up.  What to describe the situations were these Rose produce the situation for these what we can do is just look at the values of the variables in the first row corresponds to pee being true and Q being true and are being true. That's when that produces true when were in the situation for this first grow.  In the second row that's corresponds to PB and Q are being P being true to being true and are being false. So that proposition describes the situation of the second row and so we can take a proposition and use it to describe and use it to describe each row.  I'm describing each row. And so those are those are the ways to describe those four and then we can combine them together with or to describe a proposition for any of those things happening or any of those things.  Play come up with variables assignment to the variables that put us in any one of those four of these propositions will be for them all together and it will result in a overall true. Overall True Result. This is definitely not necessarily shortest proposition that exactly matches this table. It's actually quite long but it definitely works definitely work. This process always produces something that exactly matches the table.  Okay, so I must think about think about if there's any other ways to do this one thing we could do is let's try coming up with the proposition that instead of trying to get into a true route avoids the fall throws guy that tries to get into one of the true rose. What about a proposition that avoids all the false Rose is Rose and only produces true if we're not in any of these rows at the variables don't reflect any of these roads.  And so what we can do here is take the the same idea from the last strategy of describing the throw exactly that would be not p and not q and not are and then we can negate it. So we take that whole thing in the gator.  And I'm showing up a little equivalents care that lets us write this whenever we have this negation, we will talk about this property more. I'd actually want a glass over in a little bit for now. But the main thing is the thing before the equal sign is the same strategy just with a negation in front of it, but it's a sequence of course, but the main thing that's important here is this part where the thing inside the parentheses exactly matches that bottom row I all the rows with false.  Except this time we want to make sure we're not in any of those ropes. We need to avoid all of those rows instead of just getting into one of them. So we get all these properties one for each of the rows and then we and them together instead of ordering them together because we need to avoid all of those cases.  You know the one minute I have left. I just want to give you some words that we can talk about these things will be working with these things more this quarter. But the first strategy where we came up with an for the describe each of the rows and then ordered them all together is called disjunctive normal form or dnf disjunction because we're using auras between things and then this other version is called conjunctive normal form because we're using Anne's between the separate sub expressions.  the main idea here is looking at each row coming up with the proposition for that row and then combining them together using either and or or is appropriate for if we're trying to "
}