{
    "Blurbs": {
        "0 + that's not going to change their answer at all. But it makes it very nice and parallel to the bases step when it's clear that does not equal is always corresponding to zero and the corresponding to what these matchup. And then the other thing that isn't really important to notice and it's definition is that be too isn't really changing at all. We just take it as ": [
            1867.4,
            1893.1,
            52
        ],
        "Already here lots of good shatter. So there's probably some question. So what what questions do folks have about this what questions do folks have so far maybe some of them will be answered. Yep. Yep. Yeah, that's a great. That's a really good question. So your your question here is in Pepsi or dancer. See it's like one of the things you Drew Drew and just has a t ": [
            833.8,
            871.6,
            25
        ],
        "Base count is that is going to do some amount of like counting a base. We use this before we leave if i t a n t t that counted the number of elements and saw was think about implementing this in the question. I want to ask you a quick question open is the domain of what should we be putting in the blank Forest domain here. Based on ": [
            1528.4,
            1550.3,
            46
        ],
        "H. There's some property you had. And I'm just going to pick like a for it so that we don't say for all be got to keep the property on the screen. Interesting. So the Viscount of essay is equal to n minus the base count of A's and S to I actually don't know if I can't I can't think quite fast enough to tell if this is true ": [
            2664.3,
            2705.9,
            77
        ],
        "I think about it for like 10 seconds first. skip that's a good question. So let me try and construct a case where we might worry about that. So for example, if this was not a sequence of bases cuz there's only four bases. That's a nice finite set. So we always know that B1 and B2 will be there in a finite set. What if it was a sequence ": [
            2003.0,
            2041.3,
            57
        ],
        "I'm going to talk about this you can keep them talking about this other what are interesting properties to write down what you just described because I think it's it's interesting. So you just said what if in the recursive stuff we said if S1 S2 is an h and S3 S4 is in h then S1 and you said S3 S2 S4 is in h interesting interesting. There's some ": [
            2496.0,
            2532.1,
            73
        ],
        "I'm so it's something we should be careful about when writing these definitions. One question. I want to ask about this definition actually just copy this definition down cuz I like the way it's written. Unless I just want I just want to hands 4X. I want you to talk about it for briefly but really briefly so answer this question witness for this case. So just think about it, ": [
            1975.7,
            2003.0,
            56
        ],
        "Okay, let's get started. Happy Friday everybody a couple of announcements. So we just to be clear about the schedule this week. There was no 3 follow up and we just admitted that cuz of the midterm in for homework in the for warm up or doing the same day. They're doing Monday. So do please collaborate with anyone at public questions about for warm up for any terminology questions ": [
            13.2,
            39.3,
            0
        ],
        "So this can't match. And in this last case we have this nested and each one ends up matching the definition the ones a natural number and the two three empty list structure is in the lead in the three structures in the lisset because three of the natural number and the empty list is in the list that also works by this repeated definition of the recursive rule. This ": [
            2942.5,
            2976.9,
            85
        ],
        "So this part of writing down SP here is breaking this into these two different pieces of the Strand which is like the prefix all the way up to the very last base and B, which is the very last base the length of a strand on me. Think about it. That way is 1 plus the length of that prefix that last base counted for 1 calculate the length ": [
            1159.6,
            1182.9,
            36
        ],
        "This isn't the only one will work with but all of them are going to use this idea of starting with this fine art collection in this case just four elements and it having a stop where we build new elements from existing elements and we can think of applying this recursive step over and over and over again to build this really big side of all the DNA strands ": [
            338.0,
            355.4,
            13
        ],
        "We can think about these recursively defined functions are uses of recursively defined function by how the input gets broken down at each step in his off and going to be many uses of the recursive step followed by a single or a small finite number of uses of the basis Step at the bottom. And this would be a pretty straightforward function and that we all know what length ": [
            1467.5,
            1495.4,
            44
        ],
        "a bunch of styles of writing these recursively defined functions. Wait a few things. The middle one is the one that was on the slide except. I didn't write the 0 + when I wrote the middle one. The top 100 list to basis stuff and to recursive Step 2 instead of saying there's a basis stuff in her curse of stuff and just listen to be really explicit about ": [
            2157.6,
            2184.6,
            62
        ],
        "all understand that it means some number of elements and it ends with an a number and at the end... Smee hiding a whole bunch of important information with what's going on with that... Can there be zero elements in a sequence that has five elements. Is there some upper bound on the number of elements? What is it? What is is really mean in every problem where we've used ": [
            139.2,
            168.1,
            5
        ],
        "amount of arguments taking elements of some domain and produce some other interesting values is what we're saying is we're going to remain is strands of DNA. And it's co domain or range? Is the positive integers and its name? Is this DNA one name? And so this is not explicitly written out much in class if it all in the book and this is this arrow in this definition ": [
            1025.0,
            1059.8,
            31
        ],
        "an argument and then pass it on as an argument to the the next call or the next use of Base count keeps getting passed through all the records of calls and bass count. So that information stays consistent and just like in length. We're sort of splitting up the Strand into a prefix and the base at the end using the recursive definition and I'm passing on just the ": [
            1893.1,
            1921.7,
            53
        ],
        "an element of the natural numbers definitely be there the cases. It's neither a two-pole nor the empty list. So this isn't true. So this whole item can be true. Basically the same argument empty list that's in the second position in the tubule. So this is definitely a linked list. There's nothing to be a linked list. All of these are either to two poles or the empty list. ": [
            2901.6,
            2942.5,
            84
        ],
        "and questions about those definition and then work working partners for for homework due Monday night. We also put up right after the exam is also links from the for warm up assignment mid-quarter feedback form. So you can tell us how the classes going how things are going for you we can get a sense of how much time things are taking what you're liking what you're learning. So ": [
            39.3,
            61.9,
            1
        ],
        "and then something on the right that describes the values coming out of the function. Be our job to figure out how to define these functions by saying what their output ought to be for every possible input in the domain and that's what I want to look at. Next is a definition from the function DNA one. And this is going to model how will write some of these ": [
            1083.2,
            1106.5,
            33
        ],
        "ask Justin kinds of properties to talk about here and having this recursive definition is going to let us break these values down in a better way than just talking about like... Which we can't really work with that. Well, so that's one thing we'll be addressing next week is one more example because Are super related to some particular programming constructs that you have seen or will see depending ": [
            2751.3,
            2784.6,
            80
        ],
        "ask like how it would break down based on this definition. So for a weird looking at this one to two people the recursive staff for the basis definitely doesn't match the basis that because it's not just a single empty list value proof that it's an element of the set using the recursive step we have to have that too is an element of L. And that one is ": [
            2876.0,
            2901.6,
            83
        ],
        "at an individual strands we could look at a strand like a t e g and we can ask questions like is 80g an element of my question that we could ask even though it work when it is super why we know that this is an element the best. We actually I was kind of a process for demonstrating the atg is an element the best how do we ": [
            627.0,
            659.0,
            19
        ],
        "but it's definitely an interesting shape of property that we can talk about proving or disproving. I can put that property up and say well it will be interesting to ask between base counts on the two sides. We also might relate the count of Azon one of the strands of the counts of cheese on the other strand and no should probably matchup other properties like that. We can ": [
            2730.5,
            2751.3,
            79
        ],
        "can Define in the style. So we've talked a lot about double helix of a double helix in one of two ways that takes into strands and returns true or false based on if they form a double helix, we just defined it using..... Since that brawl I over arranged it was something strength. This is another way to define the set of double helix has the Seas helix's it ": [
            2288.1,
            2326.3,
            67
        ],
        "concatenate them together and put them together and that's a new element that we know is an S. So that would include a a a a a t a g a c. And we could go through. All 16 cases in this case because there's four elements here in for each one. We can concatenate a base onto the end so ga. GT G g g c and just to ": [
            533.6,
            570.0,
            16
        ],
        "defining them in a more precise way it motivates to finding them in a way. It's going to be useful for proving things about them in the future and it also helps us get it some details of how we might actually implementing them to represent them in a program to because there's no such thing as you have to actually Define everything out in the program. There's no way ": [
            198.6,
            219.7,
            7
        ],
        "definition of what which of these are true based on this definition. So which of these things these statements below are true 5 4 3 2 1 and Okay Quicken again Quicken again. 5 4 3 2 1 and there's a couple ways we can think about this definition the definition of s one way that's kind of helpful to think about this. It's not totally complete or the only ": [
            355.4,
            498.9,
            14
        ],
        "definitions going forward. So this definition said it has two steps just like this that definition of DNA strand so often when we write functions that work over recursively defined set. The function will be recursively defined using the same recipe so there will be a basis that talks about what to do for all of that fine art collection of elements in the basement in the basement step of ": [
            1106.5,
            1133.1,
            34
        ],
        "different styles. We could use to write it. I like the middle style the best this is not a it's like a sort of a personal preference. But also I like it that it vary directly matches the recursive definition of the set by having two cases that correspond to the definition of the set. So these is one two cases correspond to what we Define for the set and ": [
            2239.7,
            2263.7,
            65
        ],
        "doing now, is it going to start to finding lots of function over elements of Seth and we've done this already written tons and tons of predicate in this class and if it's always specify some domain and their their codomain or their range is always true and false write those of that the entire set of values that they can produce but we're going to start that taken. So ": [
            996.2,
            1025.0,
            30
        ],
        "element that's not indie Cindy. That's not an ass and there's definitely a lot of those all of the same element can be sorry lot of those everything is longer than one is an ass but not in B and everything that Cindy is in s so that's definitely true. And our set of bases is just being single character. So something is multiple characters can't be in a set ": [
            746.0,
            770.2,
            23
        ],
        "evaluate the truth, right? So just like if we can fill in values for the use in evaluating down. So I want to put up I don't expect you to internalize this whole slide right now. But what we did when we were thinking about this lecture and looking at different ways Things are Written In the book and different ways. We know these functions are written. We realize there's ": [
            2131.7,
            2157.6,
            61
        ],
        "extra information clarifying some of these cases. I'd like to hear we had to say and is a positive integer and there's lots of thinking is involved in its we also saw some definition where we had to be careful about for example saying it and is greater than 3 when we want to say that I like properties like a DNA strand starts with three particular letters this motivates ": [
            168.1,
            198.6,
            6
        ],
        "finite number of products that describe those cases. They dislike this fundamental thing and writing functions over infinite domain is that you have to break down the infinite domain into a finite amount of population for each part of it. All right, so hands for this witness and for this Witness. So when I see ya. So s equals A and B is equal to T. So we could all ": [
            2070.8,
            2107.1,
            59
        ],
        "four things. It's all of these things anyway, dinosaur costume why is a not true the if we tried to emphasize what else looks like looks like a t e g c a t r a i guess I want to go in order a t a g..... The elements of asked if we were to try and write it out in roster notation. We be listening out all of ": [
            900.4,
            939.3,
            27
        ],
        "g c in it and I would be exactly equal to be so the thing that I want to adhere is that if we want to talk about really everything and ask is actually an infant's eyes out of all the strands of any length really the whole set is the union of all of these repeated applications up with this recursive set up and so it's not just those ": [
            871.6,
            900.4,
            26
        ],
        "have to resolve this use of the DNA function and that again is going to break this up. and this is Again by the recursive step this time with s equals a and b equals t And then the last step. We end up with one plus one plus one here. And this is by the basis step. Whitby is equal to that being the base of stuff people today. ": [
            1423.6,
            1466.2,
            43
        ],
        "if we have some DNA strand and a base, we can stick them together in the conclusion of this statement time. We have a strand and a base. We can take that bass put it at the end of The Strand and not also counts as a DNA strand and this gives us a way to define what it means to be an element of the set of DNA strand ": [
            292.0,
            315.1,
            11
        ],
        "in this definition for base count? Does a couple things I want to highlight highlight about this? So one that's interesting is you Aspira were very explicit and sort of explanatory and matching the bases step in this answer saying look when they're not equal. I mean we could just write and bass count of SP2 there when they're in a knot equal case. We don't necessarily have to write ": [
            1808.7,
            1867.4,
            51
        ],
        "is another way of defining the function algorithm so far that we wrote in pseudocode. We're basically defining function. Another way of defining a function is interesting to ask I'll just get traced out. So we have this call to be an alien Call obits dnalien atg split up into the DNA Len of a t by the recursive step. NSS The first step that the stakes if we're tracing ": [
            1350.8,
            1401.0,
            41
        ],
        "is defined by the piecewise function. It's all of these would be reasonable ways to Define base town. I also just want to highlight here cuz I actually didn't fill it in mind to find it that definitely the range of this. Range that makes sense for this definition is the natural numbers include 0 broad definition in this class. It would be different ways of writing this and there's ": [
            2216.9,
            2239.7,
            64
        ],
        "is not at the same Arrow as an implication. I just want to call that out if uses the same shape of Arrow, but this is describing a functions domain and range. So this is like a function signature or the way to think about a functions domain and range and there will always be some set that describes the domain on the left possibly some kind of cross product ": [
            1059.8,
            1083.2,
            32
        ],
        "is the first argument is representing the Strand and the second or even as representing the bass were trying to count. So the first argument represents a whole strand and the second argument represents a base and we're trying to count instances of that bass. So this is actually takes What will happen if we try to fill in this case here and you have the definition of length to ": [
            1711.5,
            1748.0,
            49
        ],
        "is to keep me definition of consistent. We have to use what we know from the recursive definition of the set. That answer your question satisfying. Oh great question. So why why do we have to say beers and be as separate a second time? So I think of these steps as having like two different scopes for their variables. So all the variables that are used in the base ": [
            1280.3,
            1320.1,
            39
        ],
        "its description and based on some of the UCC. 5 4 3 2 1 oops Mom, and I just got this one. Okay Quicken again Quicken again for this one. What's the domain of Base count? 5 4 3 2 1 Okay, so there's a different couple different pieces of evidence we have here for what the domain ought to be. Right. So if we look at these parameters as ": [
            1550.3,
            1688.0,
            47
        ],
        "just putting that up so that we see if we can use these functions in the middle of the Quantified statements were used to using here right now. And it makes total sense. They can be used as part of calculations. We could fill in these values and talked about the fact that this would produce a zero that would be equal to zero in this entire Quantified statement would ": [
            2107.1,
            2131.7,
            60
        ],
        "know we can do it in the recursive step. It says we know that Jesus is a base and 80 is a strand already. Here we know that a is a strand already and T is a base. And here we hit the basis step where we already know that exists and is just by the basis step telling us. So if we think about a single strand of DNA ": [
            659.0,
            688.8,
            20
        ],
        "looks like ass would have to be a set that contains another set. That has those elements in it have to be something like the result of a power sad or something way. We built like westerns. any questions Okay, so let's work with these definitions a little bit more. We have this definition of the set of DNA strand and one of the things that we're going to start ": [
            960.0,
            996.2,
            29
        ],
        "make the picture complete I am going to write all these in. NCC Cancel. That's all the evidence we would get to which we get by applying the recursive step. Once we can apply the recursive step again and talk about all the elements that will give us all the DNA strands of length 3, which would be this even this even bigger set that would again be four times ": [
            570.0,
            597.5,
            17
        ],
        "minute. Mr. The prompt on your sheet is pretty open-ended. I want you to think about what are some interesting properties we could right now that we have the functions bass count in length and things like that. What are some interesting properties? We could write down may be using some fraules or some exist that talk about relating the results of this function cause I think it's useful to ": [
            2422.9,
            2447.8,
            71
        ],
        "number then you can build the temple that has that natural number followed by the rest of the list and that's also a link. That's also a member of the scent of life. So based on this definition which of these items below are elements of a set of linked list, which of these are elements of 5 4 3 2 1 Okay. So for each of these we can ": [
            2825.9,
            2876.0,
            82
        ],
        "of a prefix. God I want to pause just want to give you 10 or 20 seconds to talk about that since the new style of definition and ask any questions before we go to the 22nd. Okay questions before we go on questions about this new style of definition of functions before we go on. Yeah. Oh, yeah, you're acting is there a reason why why couldn't I have ": [
            1182.9,
            1235.8,
            37
        ],
        "of natural numbers number of natural numbers. We could still have cases on a finite set of cases for that way if we needed to do something different for every natural number and it was like a wins loss for each one. We wouldn't be able to write that function as a piecewise function have to find some way to sort of the space of natural numbers into these Predators ": [
            2041.3,
            2070.8,
            58
        ],
        "of phases. So definitely more than one of these things is true. It's think about you a reminder of some set notation before we go on to working with sets more. I want to fly to breaking down strands or building up a set of strands definition here. If you have any questions before we go on your sins are questions you had before we go on go for it. ": [
            770.2,
            801.1,
            24
        ],
        "of steps are just for the basis step in any computational calculations. We want to do in the recursive step get their own variables actually two different variables called be here. The questions was a really good notational question. cool I want to talk about what it would look like to try something like this. We talked a lot about tracing algorithms that were written with loops in pseudocode. This ": [
            1320.1,
            1350.8,
            40
        ],
        "on what classes you're planning on taking where you are in a gallon. There's a direct relationship here. So there's this structure in programming called a linked list that talks about building up list of numbers and we can actually use this kind of recursive definition to talk about open close bracket as empty list. The basic steps are always kind of linked list list and you have a natural ": [
            2784.6,
            2825.9,
            81
        ],
        "only one way to build up. Everything of an interesting property in the meantime interesting properties. Yeah. Yep. Interesting interesting Sierra trying to talk about the relationship between accounts in the size of the the two sides of the double helix interesting interesting. So something like You said for all and maybe? and for all you specifically so like for all S14 all as to where S1 S2 is in ": [
            2599.3,
            2664.3,
            76
        ],
        "or not. But this is a really interesting property, right? This is a really interesting property to ask about right. It would be really interesting to ask. To prove or disprove this property and how we will go about doing it. So I'm not going to say whether it's true or false. I'm just feeling like I can't think fast enough to justify it to myself one way or another ": [
            2705.9,
            2730.5,
            78
        ],
        "ought to do, but this would be a good justification that this application of the function produces three. My brakes break the expression down to Hawaii. Result comes out. So we'll work on another function next and I'll leave a little Trace up there if anyone still copying it actually I need these answers. I want to go on to this next function called base count in the idea of ": [
            1495.4,
            1528.4,
            45
        ],
        "prefix so they keeps getting smaller. I'm afraid if we were to trace this out. We start to see the difference between adding a zero is in the ones in each step of the writing them in this piecewise style where we write multiple cases on the right hand side using this large curly brace and then losing when Clauses of these women statements to decide when each case supplies, ": [
            1921.7,
            1952.9,
            54
        ],
        "pretty interesting questions. We could ask. Let's say that we left the bases step the same. Let's call this new definition. East Prime So it's different than H now. There's an interesting property question. We can ask we can ask is H equal to H Prime? Are the are these to recursively defined Seth's going to contain the same elements that it's a really interesting question. It's a really interesting ": [
            2532.1,
            2570.1,
            74
        ],
        "question their properties like this and questions like this that are going to be the style of things. We try to prove next week. And in this case, I think it's true. Maybe things together and the proof is probably kind of interesting because it means there's multiple ways to build up the same double helix, right? You could be lots of different orders these subdue subdue Heelys. He's right ": [
            2570.1,
            2599.3,
            75
        ],
        "set up here. We said that b is equal to Vista. So that should ask is the elements of a story individual strands. This next case b is a subset of us by the basis case. We can look at the bases case and everything. That Cindy is also a mess. This next case which says b is a proper subset of us. Well, we just have to find some ": [
            720.7,
            746.0,
            22
        ],
        "sounds kind of cool the set of double helix. He's not sure. And so the idea here if we want to think about this as one of these is not one of these generating cases is the basis step tells us about those four patterns that are allowed. And then the recursive step tells us what we're allowed to add at the end of both of them. So 480 we ": [
            2326.3,
            2361.8,
            68
        ],
        "spot and that would be this part of their Christmas stuff. And so on we can talk about continually building these up and what this definition in the recursive step forces is that we always at on a new base at the end of both strands that we always have that on. I'm so we can imagine building this out. One thing I want you to think about for a ": [
            2393.2,
            2422.9,
            70
        ],
        "structure of basically nested tuples in the empty list really directly talks about this linked list structure that you'll see in courses like CSE 12 and things like that. So we're going to be the theme of the next week or so is that we're going to be working with recursive definition working with examples of these values. ": [
            2976.9,
            2997.3,
            86
        ],
        "talk about this is an open-ended question for a minute because we're going to start asking you to come up with definitions and interesting properties more and more in home works as well? What are some interesting properties of double helix double helix fees? What are interesting properties in Chinese for all exists in some of the functions above? Yeah, yeah. Yeah. Interesting interesting. So I'm going to sidebar this ": [
            2447.8,
            2496.0,
            72
        ],
        "the book as well. There's a first step called a basis stuff where we just list some finite number of elements that we want to be in the set. So we're going to start by saying single base strands A T C and G are elements of the building. So the base is step is just on finite number of elements location here to there's a few ways we could ": [
            244.9,
            268.8,
            9
        ],
        "the number of elements in here the next time so we can imagine repeating applications. Of the recursive step and that's one way to think about this set is that if any set we can all the sets we can generate by just continuing to apply this over and over again and the union of all of them. So atgc are also part of the set. We could also look ": [
            597.5,
            627.0,
            18
        ],
        "the set definition what to do. If the argument is just a single base and then. The sort of breaks the definition of part into whatever was used to build it up and says what to do with those pieces. What we have is in the basis step were saying that the length of the Strand is always equal to and then we can break the argument into two pieces. ": [
            1133.1,
            1159.6,
            35
        ],
        "then each of those cases out of a piecewise definition for like the equality checks in the other things that are meaningful for that case, but all of these you will see in a reasonable ways to write this definition So I want to talk about two more interesting recursive set definitions and a couple properties of them just to give you a sense of what kinds of things we ": [
            2263.7,
            2288.1,
            66
        ],
        "these elements would never be able to finish because we can go up to any length but that's kind of what the elements look like. And what bees definition is right here and be is an entire set for be to be an element of s s would have to look something like this. This is going to call it not us cuz it's not this isn't actually what else ": [
            939.3,
            960.0,
            28
        ],
        "they're used in base, these are given as there used in base count in the first case the basis step. It looks an awful lot. Like it's just two bases that we get a bit more information write the recursive step has the first argument being broken down into a strand and then a base of the end and the second argument is just a base. So what's happening here ": [
            1688.0,
            1711.5,
            48
        ],
        "think about a little bit of the definition of the bases step for you to try filling this in neck. So try writing out what happens here and you can use the same idea what a across multiple cases if you want, what does this look like 30 seconds or so filling in the rest of the definition of base count. Okay, any suggestions suggestions for how we should fill ": [
            1748.0,
            1808.7,
            50
        ],
        "this link or anything. I just want to be clear that it's here and it's also on the slides that we post. So what I want to talk about today is a new way of defining sets and functions. So we Britain to find a lot of sex in this course in a different ways to find a lot of functions cuz our products have been defined functions that produce ": [
            80.7,
            105.1,
            3
        ],
        "this out is we figure out whether we're in a basis stepper a cursive step. We figure out when any variables are that we are being used in that and we can know those down that we sort of split this up into a p and then the base G and then the right hand side of the recursive step told us to do this. Next step is again, we ": [
            1401.0,
            1423.6,
            42
        ],
        "true or false and one of the things I want to highlight that where we've been I mean, we've been sleeping a lot of details under the rug been hiding a lot of important information with these we put in certain places. I only read the definition of DNA and when we gave you the notation sheet on the first day of your... It's all over the place. Marin will ": [
            105.1,
            139.2,
            4
        ],
        "way to think about this but in the basis step We pretty much the find the bases step that ass is equal to just this set of four elements 80 GNC then we can think of applying what are all of the elements we could build by applying the recursive Step2 all the elements that we have already that we already know is an S and any base in be ": [
            498.9,
            533.6,
            15
        ],
        "we can actually look at this definition and say it again until we finally get down to a basis step-up justifies why it's in the set. Getting back to this question of what particular things are in this set s this first example, well, all of the things that are in a particular strands right there strands of some length there a sequence of bases and B is an entire ": [
            688.8,
            720.7,
            21
        ],
        "we need to be careful here to make sure that we're actually covering all the cases right definitely in this case. It's it's pretty clear that you either be one is equal to be 2 or be one isn't equal to be too. So I haven't missed any cases here, but it would be a problem if we describe incomplete right that left some input or some case on cover. ": [
            1952.9,
            1975.7,
            55
        ],
        "we really appreciate your feedback. I really do read all these I really do change courses in response to feedback that I get so please fill that out and let us know how things are going. So you'll see that as the last question of for warm-up. So you'll be that link will be in your face at the end of that assignment. So you don't have to like copy ": [
            61.9,
            80.7,
            2
        ],
        "what's happening in each of the four different cases. So it's also okay to write all these different definitions for the function and all these different cases. And finally you could also Define base count by saying that it's just this giant piecewise function and they're all of the constraints are in the piecewise conditional Clauses. So base count of sb2 is equal to Big split and everything else is ": [
            2184.6,
            2216.9,
            63
        ],
        "without needing... And without needing a sort of vague and parameter that's floating around we Define every time this is saying if you give me the characters I can tell you if it's in the set by by checking to checking that everything is a basin let it build up in this way. And so this is going to work in a work with a few definitions like this today. ": [
            315.1,
            338.0,
            12
        ],
        "would be allowed to add. And then these two A's and teas that are out of the end correspond to viskase in the bases in the recursive step. We be allowed to add on 80 and then this would be ta and that would be the next step of the recursive step. We be allowed to add on. A g as long as we added a c in the other ": [
            2361.8,
            2393.2,
            69
        ],
        "write this here. I've just written for separate statements that are all elements of statements O A T C and G. Those single base strands are all elements of s and then there's the step called the recursive step where we take some elements that we know or in the set combine them with the new values and build new elements that are also in this set. Here we're saying ": [
            268.8,
            292.0,
            10
        ],
        "written it as DNA Len of BS example, did this order is because It matches the recursive step in the step definition and So based on. these two statements these justify that are consistent with the idea is definitely a DNA strand and now I know from the recursive definition that SP is also a DNA strand which it had better be because I said the domain of this function ": [
            1235.8,
            1280.3,
            38
        ],
        "you can just say I should have stopped and you can see that this is going to be a new style of definition we use in the course. Where we do is we Define asset with this recursive strategy and there's two parts to this recursive strategy of defining a set. The first step is called the same recipe that used in the box of this format. You'll see in ": [
            219.7,
            244.9,
            8
        ]
    },
    "File Name": "Intro_Discrete_Mathematics___B00___Politz__Joseph_Gibbs___Spring_2019-lecture_15.flac",
    "Full Transcript": "Okay, let's get started. Happy Friday everybody a couple of announcements. So we just to be clear about the schedule this week. There was no 3 follow up and we just admitted that cuz of the midterm in for homework in the for warm up or doing the same day. They're doing Monday. So do please collaborate with anyone at public questions about for warm up for any terminology questions and questions about those definition and then work working partners for for homework due Monday night. We also put up right after the exam is also links from the for warm up assignment mid-quarter feedback form. So you can tell us how the classes going how things are going for you we can get a sense of how much time things are taking what you're liking what you're learning. So we really appreciate your feedback. I really do read all these I really do change courses in response to feedback that I get so please fill that out and let us know how things are going. So you'll see that as the last question of for warm-up. So you'll be that link will be in your face at the end of that assignment. So you don't have to like copy this link or anything. I just want to be clear that it's here and it's also on the slides that we post.  So what I want to talk about today is a new way of defining sets and functions. So we Britain to find a lot of sex in this course in a different ways to find a lot of functions cuz our products have been defined functions that produce true or false and one of the things I want to highlight that where we've been I mean, we've been sleeping a lot of details under the rug been hiding a lot of important information with these we put in certain places.  I only read the definition of DNA and when we gave you the notation sheet on the first day of your... It's all over the place. Marin will all understand that it means some number of elements and it ends with an a number and at the end... Smee hiding a whole bunch of important information with what's going on with that... Can there be zero elements in a sequence that has five elements. Is there some upper bound on the number of elements? What is it? What is is really mean in every problem where we've used extra information clarifying some of these cases.  I'd like to hear we had to say and is a positive integer and there's lots of thinking is involved in its we also saw some definition where we had to be careful about for example saying it and is greater than 3 when we want to say that I like properties like a DNA strand starts with three particular letters this motivates defining them in a more precise way it motivates to finding them in a way. It's going to be useful for proving things about them in the future and it also helps us get it some details of how we might actually implementing them to represent them in a program to because there's no such thing as you have to actually Define everything out in the program. There's no way you can just say I should have stopped and you can see that this is going to be a new style of definition we use in the course.  Where we do is we Define asset with this recursive strategy and there's two parts to this recursive strategy of defining a set. The first step is called the same recipe that used in the box of this format. You'll see in the book as well. There's a first step called a basis stuff where we just list some finite number of elements that we want to be in the set. So we're going to start by saying single base strands A T C and G are elements of the building. So the base is step is just on finite number of elements location here to there's a few ways we could write this here. I've just written for separate statements that are all elements of statements O A T C and G. Those single base strands are all elements of s and then there's the step called the recursive step where we take some elements that we know or in the set combine them with the new values and build new elements that are also in this set.  Here we're saying if we have some DNA strand and a base, we can stick them together in the conclusion of this statement time. We have a strand and a base. We can take that bass put it at the end of The Strand and not also counts as a DNA strand and this gives us a way to define what it means to be an element of the set of DNA strand without needing... And without needing a sort of vague and parameter that's floating around we Define every time this is saying if you give me the characters I can tell you if it's in the set by by checking to checking that everything is a basin let it build up in this way.  And so this is going to work in a work with a few definitions like this today. This isn't the only one will work with but all of them are going to use this idea of starting with this fine art collection in this case just four elements and it having a stop where we build new elements from existing elements and we can think of applying this recursive step over and over and over again to build this really big side of all the DNA strands definition of what which of these are true based on this definition. So which of these things these statements below are true  5 4 3 2 1 and  Okay Quicken again Quicken again.  5 4 3 2 1  and there's a couple ways we can think about this definition the definition of s one way that's kind of helpful to think about this. It's not totally complete or the only way to think about this but  in the basis step  We pretty much the find the bases step that ass is equal to just this set of four elements 80 GNC then we can think of applying what are all of the elements we could build by applying the recursive Step2 all the elements that we have already that we already know is an S and any base in be concatenate them together and put them together and that's a new element that we know is an S. So that would include a a a a a t a g a c.  And we could go through.  All 16 cases in this case because there's four elements here in for each one. We can concatenate a base onto the end so ga.  GT  G g g c and just to make the picture complete I am going to write all these in.  NCC  Cancel. That's all the evidence we would get to which we get by applying the recursive step. Once we can apply the recursive step again and talk about all the elements that will give us all the DNA strands of length 3, which would be this even this even bigger set that would again be four times the number of elements in here the next time so we can imagine repeating applications.  Of the recursive step and that's one way to think about this set is that if any set we can all the sets we can generate by just continuing to apply this over and over again and the union of all of them. So atgc are also part of the set.  We could also look at an individual strands we could look at a strand like a t e g and we can ask questions like is 80g an element of my question that we could ask even though it work when it is super why we know that this is an element the best. We actually I was kind of a process for demonstrating the atg is an element the best how do we know we can do it in the recursive step. It says we know that Jesus is a base and 80 is a strand already.  Here we know that a is a strand already and T is a base.  And here we hit the basis step where we already know that exists and is just by the basis step telling us.  So if we think about a single strand of DNA we can actually look at this definition and say it again until we finally get down to a basis step-up justifies why it's in the set.  Getting back to this question of what particular things are in this set s this first example, well, all of the things that are in a particular strands right there strands of some length there a sequence of bases and B is an entire set up here. We said that b is equal to Vista. So that should ask is the elements of a story individual strands.  This next case b is a subset of us by the basis case. We can look at the bases case and everything. That Cindy is also a mess.  This next case which says b is a proper subset of us. Well, we just have to find some element that's not indie Cindy. That's not an ass and there's definitely a lot of those all of the same element can be sorry lot of those everything is longer than one is an ass but not in B and everything that Cindy is in s so that's definitely true.  And our set of bases is just being single character. So something is multiple characters can't be in a set of phases. So definitely more than one of these things is true.  It's think about you a reminder of some set notation before we go on to working with sets more. I want to fly to breaking down strands or building up a set of strands definition here. If you have any questions before we go on your sins are questions you had before we go on go for it.  Already here lots of good shatter. So there's probably some question. So what what questions do folks have about this what questions do folks have so far maybe some of them will be answered.  Yep.  Yep.  Yeah, that's a great. That's a really good question. So your your question here is in Pepsi or dancer. See it's like one of the things you Drew Drew and just has a t g c in it and I would be exactly equal to be so the thing that I want to adhere is that if we want to talk about really everything and ask is actually an infant's eyes out of all the strands of any length really the whole set is the union of all of these repeated applications up with this recursive set up and so it's not just those four things. It's all of these things anyway,  dinosaur costume  why is a not true the if we tried to emphasize what else looks like looks like a t e g c a t r a i guess I want to go in order a t a g..... The elements of asked if we were to try and write it out in roster notation. We be listening out all of these elements would never be able to finish because we can go up to any length but that's kind of what the elements look like. And what bees definition is right here and be is an entire set for be to be an element of s s would have to look something like this.  This is going to call it not us cuz it's not this isn't actually what else looks like ass would have to be a set that contains another set.  That has those elements in it have to be something like the result of a power sad or something way. We built like westerns.  any questions  Okay, so let's work with these definitions a little bit more.  We have this definition of the set of DNA strand and one of the things that we're going to start doing now, is it going to start to finding lots of function over elements of Seth and we've done this already written tons and tons of predicate in this class and if it's always specify some domain and their their codomain or their range is always true and false write those of that the entire set of values that they can produce but we're going to start that taken. So amount of arguments taking elements of some domain and produce some other interesting values is what we're saying is we're going to remain is strands of DNA.  And it's co domain or range?  Is the positive integers and its name? Is this DNA one name? And so this is not explicitly written out much in class if it all in the book and this is this arrow in this definition is not at the same Arrow as an implication. I just want to call that out if uses the same shape of Arrow, but this is describing a functions domain and range. So this is like a function signature or the way to think about a functions domain and range and there will always be some set that describes the domain on the left possibly some kind of cross product and then something on the right that describes the values coming out of the function.  Be our job to figure out how to define these functions by saying what their output ought to be for every possible input in the domain and that's what I want to look at. Next is a definition from the function DNA one.  And this is going to model how will write some of these definitions going forward. So this definition said it has two steps just like this that definition of DNA strand so often when we write functions that work over recursively defined set. The function will be recursively defined using the same recipe so there will be a basis that talks about what to do for all of that fine art collection of elements in the basement in the basement step of the set definition what to do. If the argument is just a single base and then. The sort of breaks the definition of part into whatever was used to build it up and says what to do with those pieces.  What we have is in the basis step were saying that the length of the Strand is always equal to and then we can break the argument into two pieces. So this part of writing down SP here is breaking this into these two different pieces of the Strand which is like the prefix all the way up to the very last base and B, which is the very last base the length of a strand on me. Think about it. That way is 1 plus the length of that prefix that last base counted for 1 calculate the length of a prefix.  God I want to pause just want to give you 10 or 20 seconds to talk about that since the new style of definition and ask any questions before we go to the 22nd.  Okay questions before we go on questions about this new style of definition of functions before we go on.  Yeah.  Oh, yeah, you're acting is there a reason why why couldn't I have written it as DNA Len of BS example, did this order is because  It matches the recursive step in the step definition and So based on.  these two statements  these justify that are consistent with the idea is definitely a DNA strand and now I know from the recursive definition that SP is also a DNA strand which it had better be because I said the domain of this function is to keep me definition of consistent. We have to use what we know from the recursive definition of the set.  That answer your question satisfying.  Oh great question. So why why do we have to say beers and be as separate a second time? So I think of these steps as having like two different scopes for their variables. So all the variables that are used in the base of steps are just for the basis step in any computational calculations. We want to do in the recursive step get their own variables actually two different variables called be here.  The questions was a really good notational question.  cool  I want to talk about what it would look like to try something like this. We talked a lot about tracing algorithms that were written with loops in pseudocode. This is another way of defining the function algorithm so far that we wrote in pseudocode. We're basically defining function. Another way of defining a function is interesting to ask I'll just get traced out. So we have this call to be an alien Call obits dnalien atg split up into the DNA Len of a t by the recursive step.  NSS  The first step that the stakes if we're tracing this out is we figure out whether we're in a basis stepper a cursive step. We figure out when any variables are that we are being used in that and we can know those down that we sort of split this up into a p and then the base G and then the right hand side of the recursive step told us to do this. Next step is again, we have to resolve this use of the DNA function and that again is going to break this up.  and this is Again by the recursive step this time with s equals a and b equals t  And then the last step.  We end up with one plus one plus one here. And this is by the basis step.  Whitby is equal to that being the base of stuff people today.  We can think about these recursively defined functions are uses of recursively defined function by how the input gets broken down at each step in his off and going to be many uses of the recursive step followed by a single or a small finite number of uses of the basis Step at the bottom.  And this would be a pretty straightforward function and that we all know what length ought to do, but this would be a good justification that this application of the function produces three.  My brakes break the expression down to Hawaii. Result comes out.  So we'll work on another function next and I'll leave a little Trace up there if anyone still copying it actually I need these answers.  I want to go on to this next function called base count in the idea of Base count is that is going to do some amount of like counting a base. We use this before we leave if i t a n t t that counted the number of elements and saw was think about implementing this in the question. I want to ask you a quick question open is the domain of what should we be putting in the blank Forest domain here.  Based on its description and based on some of the UCC.  5 4 3 2 1  oops  Mom, and I just got this one.  Okay Quicken again Quicken again for this one. What's the domain of Base count?  5 4 3 2 1  Okay, so there's a different couple different pieces of evidence we have here for what the domain ought to be. Right. So if we look at these parameters as they're used in base, these are given as there used in base count in the first case the basis step. It looks an awful lot. Like it's just two bases that we get a bit more information write the recursive step has the first argument being broken down into a strand and then a base of the end and the second argument is just a base. So what's happening here is the first argument is representing the Strand and the second or even as representing the bass were trying to count. So the first argument represents a whole strand and the second argument represents a base and we're trying to count instances of that bass. So this is actually takes  What will happen if we try to fill in this case here and you have the definition of length to think about a little bit of the definition of the bases step for you to try filling this in neck. So try writing out what happens here and you can use the same idea what a across multiple cases if you want, what does this look like 30 seconds or so filling in the rest of the definition of base count.  Okay, any suggestions suggestions for how we should fill in this definition for base count?  Does a couple things I want to highlight highlight about this? So one that's interesting is you  Aspira were very explicit and sort of explanatory and matching the bases step in this answer saying look when they're not equal. I mean we could just write and bass count of SP2 there when they're in a knot equal case. We don't necessarily have to write 0 + that's not going to change their answer at all. But it makes it very nice and parallel to the bases step when it's clear that does not equal is always corresponding to zero and the corresponding to what these matchup.  And then the other thing that isn't really important to notice and it's definition is that be too isn't really changing at all. We just take it as an argument and then pass it on as an argument to the the next call or the next use of Base count keeps getting passed through all the records of calls and bass count. So that information stays consistent and just like in length. We're sort of splitting up the Strand into a prefix and the base at the end using the recursive definition and I'm passing on just the prefix so they keeps getting smaller.  I'm afraid if we were to trace this out. We start to see the difference between adding a zero is in the ones in each step of the writing them in this piecewise style where we write multiple cases on the right hand side using this large curly brace and then losing when Clauses of these women statements to decide when each case supplies, we need to be careful here to make sure that we're actually covering all the cases right definitely in this case. It's it's pretty clear that you either be one is equal to be 2 or be one isn't equal to be too. So I haven't missed any cases here, but it would be a problem if we describe incomplete right that left some input or some case on cover. I'm so it's something we should be careful about when writing these definitions.  One question. I want to ask about this definition actually just copy this definition down cuz I like the way it's written.  Unless I just want I just want to hands 4X. I want you to talk about it for briefly but really briefly so answer this question witness for this case. So just think about it, I think about it for like 10 seconds first.  skip  that's a good question. So let me try and construct a case where we might worry about that. So for example, if this was not a sequence of bases cuz there's only four bases. That's a nice finite set. So we always know that B1 and B2 will be there in a finite set. What if it was a sequence of natural numbers number of natural numbers. We could still have cases on a finite set of cases for that way if we needed to do something different for every natural number and it was like a wins loss for each one. We wouldn't be able to write that function as a piecewise function have to find some way to sort of the space of natural numbers into these Predators finite number of products that describe those cases.  They dislike this fundamental thing and writing functions over infinite domain is that you have to break down the infinite domain into a finite amount of population for each part of it.  All right, so hands for this witness and for this Witness.  So when I see ya.  So s equals A and B is equal to T. So we could all just putting that up so that we see if we can use these functions in the middle of the Quantified statements were used to using here right now. And it makes total sense. They can be used as part of calculations. We could fill in these values and talked about the fact that this would produce a zero that would be equal to zero in this entire Quantified statement would evaluate the truth, right? So just like if we can fill in values for the use in evaluating down.  So I want to put up I don't expect you to internalize this whole slide right now. But what we did when we were thinking about this lecture and looking at different ways Things are Written In the book and different ways. We know these functions are written. We realize there's a bunch of styles of writing these recursively defined functions. Wait a few things. The middle one is the one that was on the slide except. I didn't write the 0 + when I wrote the middle one.  The top 100 list to basis stuff and to recursive Step 2 instead of saying there's a basis stuff in her curse of stuff and just listen to be really explicit about what's happening in each of the four different cases. So it's also okay to write all these different definitions for the function and all these different cases. And finally you could also Define base count by saying that it's just this giant piecewise function and they're all of the constraints are in the piecewise conditional Clauses. So base count of sb2 is equal to Big split and everything else is is defined by the piecewise function. It's all of these would be reasonable ways to Define base town. I also just want to highlight here cuz I actually didn't fill it in mind to find it that definitely the range of this.  Range that makes sense for this definition is the natural numbers include 0 broad definition in this class.  It would be different ways of writing this and there's different styles. We could use to write it. I like the middle style the best this is not a it's like a sort of a personal preference. But also I like it that it vary directly matches the recursive definition of the set by having two cases that correspond to the definition of the set. So these is one two cases correspond to what we Define for the set and then each of those cases out of a piecewise definition for like the equality checks in the other things that are meaningful for that case, but all of these you will see in a reasonable ways to write this definition  So I want to talk about two more interesting recursive set definitions and a couple properties of them just to give you a sense of what kinds of things we can Define in the style. So we've talked a lot about double helix of a double helix in one of two ways that takes into strands and returns true or false based on if they form a double helix, we just defined it using..... Since that brawl I over arranged it was something strength. This is another way to define the set of double helix has the Seas helix's it sounds kind of cool the set of double helix. He's not sure.  And so the idea here if we want to think about this as one of these is not one of these generating cases is the basis step tells us about those four patterns that are allowed.  And then the recursive step tells us what we're allowed to add at the end of both of them. So 480 we would be allowed to add.  And then these two A's and teas that are out of the end correspond to viskase in the bases in the recursive step. We be allowed to add on 80 and then this would be ta and that would be the next step of the recursive step.  We be allowed to add on.  A g as long as we added a c in the other spot and that would be this part of their Christmas stuff.  And so on we can talk about continually building these up and what this definition in the recursive step forces is that we always at on a new base at the end of both strands that we always have that on. I'm so we can imagine building this out.  One thing I want you to think about for a minute. Mr. The prompt on your sheet is pretty open-ended. I want you to think about what are some interesting properties we could right now that we have the functions bass count in length and things like that. What are some interesting properties? We could write down may be using some fraules or some exist that talk about relating the results of this function cause I think it's useful to talk about this is an open-ended question for a minute because we're going to start asking you to come up with definitions and interesting properties more and more in home works as well? What are some interesting properties of double helix double helix fees?  What are interesting properties in Chinese for all exists in some of the functions above?  Yeah, yeah. Yeah.  Interesting interesting. So I'm going to sidebar this I'm going to talk about this you can keep them talking about this other what are interesting properties to write down what you just described because I think it's it's interesting. So you just said what if in the recursive stuff we said if S1 S2 is an h and S3 S4 is in h then  S1 and you said S3 S2 S4 is in h interesting interesting.  There's some pretty interesting questions. We could ask. Let's say that we left the bases step the same.  Let's call this new definition.  East Prime  So it's different than H now. There's an interesting property question. We can ask we can ask is H equal to H Prime?  Are the are these to recursively defined Seth's going to contain the same elements that it's a really interesting question. It's a really interesting question their properties like this and questions like this that are going to be the style of things. We try to prove next week. And in this case, I think it's true. Maybe things together and the proof is probably kind of interesting because it means there's multiple ways to build up the same double helix, right? You could be lots of different orders these subdue subdue Heelys. He's right only one way to build up.  Everything of an interesting property in the meantime interesting properties. Yeah.  Yep.  Interesting interesting Sierra trying to talk about the relationship between accounts in the size of the the two sides of the double helix interesting interesting. So something like  You said for all and maybe?  and for all you specifically  so like for all S14 all as to where S1 S2 is in H.  There's some property you had.  And I'm just going to pick like a for it so that we don't say for all be got to keep the property on the screen.  Interesting. So the Viscount of essay is equal to n minus the base count of A's and S to I actually don't know if I can't I can't think quite fast enough to tell if this is true or not. But this is a really interesting property, right? This is a really interesting property to ask about right. It would be really interesting to ask.  To prove or disprove this property and how we will go about doing it. So I'm not going to say whether it's true or false. I'm just feeling like I can't think fast enough to justify it to myself one way or another but it's definitely an interesting shape of property that we can talk about proving or disproving. I can put that property up and say well it will be interesting to ask between base counts on the two sides. We also might relate the count of Azon one of the strands of the counts of cheese on the other strand and no should probably matchup other properties like that. We can ask Justin kinds of properties to talk about here and having this recursive definition is going to let us break these values down in a better way than just talking about like... Which we can't really work with that. Well, so that's one thing we'll be addressing next week is one more example because  Are super related to some particular programming constructs that you have seen or will see depending on what classes you're planning on taking where you are in a gallon. There's a direct relationship here. So there's this structure in programming called a linked list that talks about building up list of numbers and we can actually use this kind of recursive definition to talk about open close bracket as empty list. The basic steps are always kind of linked list list and you have a natural number then you can build the temple that has that natural number followed by the rest of the list and that's also a link. That's also a member of the scent of life.  So based on this definition which of these items below are elements of a set of linked list, which of these are elements of  5 4 3 2 1  Okay. So for each of these we can ask like how it would break down based on this definition. So for a weird looking at this one to two people the recursive staff for the basis definitely doesn't match the basis that because it's not just a single empty list value proof that it's an element of the set using the recursive step we have to have that too is an element of L. And that one is an element of the natural numbers definitely be there the cases. It's neither a two-pole nor the empty list. So this isn't true. So this whole item can be true. Basically the same argument empty list that's in the second position in the tubule.  So this is definitely a linked list. There's nothing to be a linked list. All of these are either to two poles or the empty list. So this can't match. And in this last case we have this nested and each one ends up matching the definition the ones a natural number and the two three empty list structure is in the lead in the three structures in the lisset because three of the natural number and the empty list is in the list that also works by this repeated definition of the recursive rule.  This structure of basically nested tuples in the empty list really directly talks about this linked list structure that you'll see in courses like CSE 12 and things like that. So we're going to be the theme of the next week or so is that we're going to be working with recursive definition working with examples of these values. "
}