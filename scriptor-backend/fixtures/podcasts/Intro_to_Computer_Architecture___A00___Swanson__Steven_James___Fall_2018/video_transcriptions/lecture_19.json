{
  "Blurbs": {
    "80s. And this is a funeral by cryptography. This is a symmetric key crypto system. That means that there's some secret called the key that one of the tabs may have that it's using to communicate with another with the website or maybe that the Chrome's the stuff that's outside. Any sandbox, which is Chrome itself might be used to manage those connections really cool. If I could find out ": [
      882.9,
      913.4,
      18
    ],
    "All right all the fluff for the rest of the course, which is the rest of today and next week is the final questions questions about the final or the course. Well mostly about the course content preferably so start asking when you stop I'll leave and then I'll come back on Thursday and do it again. Are there any questions? No questions. Yes. It is an upper-division elective. Good ": [
      3455.4,
      3488.6,
      106
    ],
    "All right. Well, it wouldn't be the second to last day of class if I didn't have a problem with my laptop. So there we go. so today things are winding down mostly today. I am going to show you a magic trick. In the form of a couple of security issues that can arrive in architectures and they're kind of a little bit mind-blowing and people that know a ": [
      430.1,
      460.6,
      0
    ],
    "At the beginning of my virtual address space and I can just start reading and I can dump the whole thing. Yes. like everything was still like going. Yeah. because because I executed these instructions speculatively. Right. And the thing is that during speculation the processor turns off all of its Security checks because it's doing the texting fitting instructions that you know quote on quote May Never occur. I ": [
      2367.8,
      2404.3,
      73
    ],
    "Define the whole view of the world to suffer. So if you have a bug in your microprocessor, it's really hard to tell what's going wrong in so there's a lot of concern about whether or not malicious people might insert bugs into processors and get built or other kinds of pieces of Hardware. Some companies have been banned from having their networking equipment purchased for kind of sensitive applications ": [
      559.0,
      585.8,
      4
    ],
    "Do I have one more thing I was going to do. Oh. I'll just go to the website. I'm going to make a quick plug for the classroom teaching in the spring. What just happened? Well, he'll torture. Come on. So in the spring spring my teaches class about bullying quadcopters. So all we do is OAC what it is. He wants me to sign in how annoying. That's what ": [
      3194.4,
      3360.8,
      102
    ],
    "I call room buying which means they start of skitter around the ground and run into stuff and then some people like they'll get like, you know, like I will be like this but they will actually take off for a while before they are you know, smash into the wall and then some of them will actually like fly and they can maneuver them. We are always trying to ": [
      3624.5,
      3647.6,
      111
    ],
    "I can go and do my Prime and probe Honore to is that right? Why don't you do that? I know that I would I do. pray to yeah, I do Prime and provender a 2 and now I know I like if there was a for here. So if this happened equal to 4 forget about this 2 + 56 is equal to 4 and I go when I ": [
      2181.7,
      2212.1,
      66
    ],
    "I do a system call. I want to bounce into the colonel till like read something from get my process ID. I don't have to reload the Colonel's page table. It's already there in my address space. I just going to ring zero now I can access everything that's math in my virtual address space. So cheap makes calls a lot less expensive. This is a very common optimization in ": [
      2970.7,
      2993.4,
      93
    ],
    "I guess we're a little bit of information about about key about the Cave of the encryption key. All right, honey questions about this. Yes. Here's what I get. That's a good question, right? So what do I get I get Back here. So I find out what this value is what part of that I got some information about what p0x or k is because that tells me where ": [
      1491.8,
      1535.9,
      43
    ],
    "I look at my example code here? Renoprotective this is not taken. Just cuz I have some assembly of the next side. That's the way it's find out. They're going to convince the branch breaker that that branch is usually not taken and we're going to feed it while we're doing that. We're going to provide have some valid value sorted array one has some size, and it has to ": [
      1799.3,
      1825.9,
      53
    ],
    "P10 I can find K because XR is its own inverse and so you can basically just take the soda do we take the index over here? And we send the K over there and we will get we can compute the value of K if we knew the index because I already know. Brighten, the question is how do we detect that another thread running in a different the ": [
      1036.9,
      1060.0,
      25
    ],
    "People apply I give priority to people who are seniors because then everyone kind of has a chance to get to have a line you need to have reasonably decent grades that it's pretty it's a non-trivial class and hope and some evidence that you've done some project-based stuff. Could you work in pairs but it's there's not a strict set of self-contained. I mean you should know how to ": [
      3526.9,
      3551.3,
      108
    ],
    "Secrets down here. It's all kinds of important critical State. There's like the security system is down here is all kinds of stuff for dr. Carl traffic file system information all kinds of all kinds of different things. This is a huge deal. So Linus Torvalds who runs Linux is not known for being super sympathetic to security concerns. You think some people are really too exciting but he's not ": [
      3048.0,
      3080.5,
      96
    ],
    "The Cash Line that lived at this index. This 256 is to make sure that each bites are in each location and everyone lives in a different Cash Line. Price there's no false positives a different different chunk of a ray and I can go and I can find out what the value of a write 1 ones. So this is not just like some like I control all ready ": [
      2318.9,
      2344.5,
      71
    ],
    "Thursday. No problem. All right. So the other thing is going to happen homework. The last homework is going to come out pretty soon. Probably. Is it already out there now? Yeah. Alright, so it's out early. So you it's basically kind of like last time at start of the study guide for the final and as much as there is one and it's going to be do I believe ": [
      496.2,
      519.8,
      2
    ],
    "a bug. All right, so I'm going to write two different things first thing to talk about these kind of side Channel cash attacks, and we're going to use out of the building block to talk about Spectre and meltdown after the two big bugs that came out early this year. I want to give you a little bit of background first. And so this may seem a little bit ": [
      630.5,
      649.5,
      7
    ],
    "able to reach in and grab data data stored in the trustworthy Tab. And the reason this is a concern is because JavaScript is complicated and code is complicated. There's lots of a kind of bugs that can occur. And so what they do is they put each of the tabs into a Sandbox in a sandbox is a little kind of confined area usually defined by a region of ": [
      741.2,
      760.7,
      12
    ],
    "about in class. Alright, so here is the basic idea. So we have a little piece of code looks very innocuous and we're going to mess with the going to mess with the processor by messing with the branch predictor into thinking of that that this Branch here x is going to be taken a lot. It's going to be it's going to be well, I should be service. Can ": [
      1765.2,
      1799.3,
      52
    ],
    "about what's inside the other tabs memory even though I can't read or write it. Alright, so one thing that you can maybe learn and we'll see how this whole show up in a minute. Maybe I can learn something about the data, but maybe I can learn what memory location they were being the other programmers accessing. So this is a kind of side Channel. That's something that's not ": [
      832.5,
      860.8,
      16
    ],
    "actually information that's going from one program to another in times like this, but it's like the fact that they did something and so one way that this could end up being really useful. Is if you were trying to attack something called a soas dance for the advanced encryption standard. This is what protects all of your web transactions all your encrypted traffic over there in that runs on ": [
      860.8,
      882.9,
      17
    ],
    "all you're going to see you today. I hope is that it's really hard because the things that the security folks are able to pull off is are really amazing and some of these problems have existed for I mean really decades like some of them have been around effectively since probably the late seventies or so and it's only now that we've sort of figured out that there was ": [
      610.1,
      630.5,
      6
    ],
    "am so it doesn't fly anything cuz if it if it gets squash that's not an error. But it does have an effect on the cash higher key. So this is like a this is a hardware bug right witcha memory supposed to protect you. I mean, it's a harder, but I guess it's a hardware Hardware problem. There's no bug here right nothing. The program is behaving the way ": [
      2404.3,
      2433.5,
      74
    ],
    "and see when they respond to me. I thought I had to be very precise about that. I can just grab lots and lots of data with his attack and then I can you just try lots of stuff until one hits. Writer also do this across all your tabs or across all the people in this room that I've gotten to go to cemeteries website and I'll hit you ": [
      2802.3,
      2821.0,
      87
    ],
    "any normal person would and each one of those tabs is basically a little private. It's like a little mini application. Right and some of them were very sophisticated and some of them have access to a lot of your private information, right so that we've got tab may have opened a connection to your bank or someone else or it may just have you know password that all kinds ": [
      701.2,
      721.3,
      10
    ],
    "are a specular out of order processor. And so we will do Israel. Keep fetching down here. We will get to this Branch little say. Hey last time I took this Branch it was last time I got taken so I will soon it's not take it and I will just keep going all the way down here. None of these instructions are they dependent on x? Well so that ": [
      1977.8,
      2004.8,
      59
    ],
    "auntie I read from. And then I can use this math. I know peace because I sent pee pee came from me. And so I just take the XR of that with the index. How do I get K & K is one bite or word of my of the key, but I'm not supposed to know right? So that's essential check. This is the date of the second row ": [
      1535.9,
      1559.9,
      44
    ],
    "be less than that otherwise up and out of bounds exception. So we're going to run a bunch of times with a valid values of X and the branch breaker was going to decide. Okay. I know this Branch always is so I see you in the future. I will not take that branch. I will also make sure that are a size is not in the cash and I ": [
      1825.9,
      1847.0,
      54
    ],
    "branch has been not taken so I'm not going to take it and that's the only way this works on a big out of order, you know processor. So I'm going to start speculating and executing all of these instructions. Why is it important then that acts was not cashed? This is actually interesting. Huh? This car doesn't quite work. So. So ex gets loaded here in 16. Loudred X ": [
      1905.9,
      1952.4,
      57
    ],
    "can do that in a variety of ways I could do the trick. I showed you earlier right where I am. Well, I flush out the associative said that was then and you can actually also just took four years if there's a way of marking Regent the memory is being on kashable on the table so I can make sure that are a size is not cashed anywhere. And ": [
      1847.0,
      1868.2,
      55
    ],
    "can do the second entry of tea and fill them up and then I will sit there and I will wait and I'll do is I'll send something through that encryption channel, right? I'll say hey and then what I will do is I will it run it is going to access tea and it is going to evict one of my cash lines. Right? So now it's just miss ": [
      1442.8,
      1471.6,
      41
    ],
    "can use to fly it. Yes. Yes. Yeah, so what you could do is you could you could wait to do loads speculative loads, you could also kind of shoes on and then you could not put them into the cash. if they didn't commit that'll be hard. You could trust me do. There's a lot of time so that the check that a lot of people are talking about ": [
      3695.0,
      3744.2,
      114
    ],
    "cashing or something. Right? So that would be fair game in those late home works as well. Even though they will cover both early material and light material. No more questions. All right. I will see you on Thursday. How much question? ": [
      3920.9,
      3944.0,
      121
    ],
    "colonel has its own set of virtual memory mapping. So applications of virtual memory mapping with the colonel All-Stars virtual memory mapping is because it's a very complicated piece of software and if it needs to be able to manage memory and sophisticated way, so it has a virtual And one thing that's been going on for a long time is that if you have a program and here's a ": [
      2925.3,
      2946.7,
      91
    ],
    "computer does that are not exactly the computation you're asking them to do. So for instance some operation take longer than other so some floating Point operations take longer than others depending on what values you send them. So if I send it to me if I send some carefully crafted values I might be able to observe that the execution time for my program gets longer and that will ": [
      1087.8,
      1110.6,
      27
    ],
    "computing cash geometry and the brakes sound like they have the index here at the offset. And I have a tag is a herd of it's according to that. That's just a reminder. So let's say that what I wanted to do was I wanted to create a very focused set Focus set of capacity. I guess. It's actually Confidant to create a carefully focused out of capacity of conflict ": [
      1251.7,
      1277.8,
      33
    ],
    "design embedded system programming a little bit of control theory, you know how to solder in a pretty serious way over to wireless. I thought the view been to the Envision maker Studio. It's pretty cool some of them in late winter quarter have to kind of apply because Apply it's not the fun. It's an enormous amount of work. No one ever like Flames out of this class like ": [
      3386.1,
      3434.7,
      104
    ],
    "disconnected because the thing about security of these exploits as they take a lot of pieces from a bunch of different parts of the system and they start of fine like this very circuitous path through all these different components and all these different ideas are always very fine-grained details of how the system works. Define a way to get access to some information that they don't supposed to have ": [
      649.5,
      673.1,
      8
    ],
    "do is see right. I'm declaring an array one that has a size of 10 and I passed it an index that asked for two hundred thousand of them about a re-index 2in to mm. To write this address. It'll perform a load from this address. Now it's going to take that value. Whatever was there will call this k0 right? That's what it read. Turn on autopilot by 10:46 ": [
      2624.2,
      2655.4,
      80
    ],
    "do this, right? You could sit down like one of the graduate student actually Craig that that prepare the slide figure out how to do this on Modern Intel processors. So take some work, but it's not too hard. So do I do what I do is I run my code. And I feel the cash desk and this corresponds to let's say the first entry of tea and I ": [
      1420.3,
      1442.8,
      40
    ],
    "earlier was Spectre. So the colonel was here. It's basically in a sandbox. It happens to be enforced by Hardware from your application, which is harder than a separate sandbox, but I can do the same basically the same trick with that. I do respect against the colonel and now I can read out kernel kernel data like this wholesale read the Colonel's data and there's all sorts of important ": [
      3023.3,
      3048.0,
      95
    ],
    "effects with power or time or something else. So neither Clear Creek review about associativity. how Fancy animation imagine that those blocks stayed there. So we have multiple cash. That's a bunch of if we when we compute the index we can say our supposed to go into this cash set. Then we can decide where we want to put that date inside the cash that has some Choice what ": [
      1173.5,
      1209.9,
      31
    ],
    "end up in the in the instruction Q or the earth goes by different but they're going to sit and wait for all the previous instructions to resolve in particular for this Branch to resolve the branches going to resolve. It's going to turn out to have been taken because ex was out of bounds. And so all these instructions are going to be squashed and so they should have ": [
      2085.9,
      2106.0,
      63
    ],
    "everyone like he's working the whole time. Even if they're quadcopters. Don't fly at the end and everyone thinks it's it's it's a good time to try for that offense in this kind of thing. It's grateful people say they take another quadcopters two job interviews. And then like, oh, I'm going to hire you on the spot and stuff. So it's actually good for your you know, bottom line. ": [
      3434.7,
      3455.4,
      105
    ],
    "fix the Spectre as well. And has a couple of kind of proposal that there are they looking at to do that, but it's also going to cause some sort of degradation for to Performance. So this is really kind of shaking things up and has been a lot of scrutiny of Intel because like why we're not paying attention to this. How could this have been going on for ": [
      3123.9,
      3145.2,
      99
    ],
    "for Spectre for meltdown. It's like in other proposed Solutions going to fix variant one but not very into and I don't know exactly what the variance are actors actually one of the whole the paper that describe it described as a whole bunch of different. Potential attacks that you could basically Girl based around side effects of speculative instructions it gets washed. And so they probably want something that's ": [
      3774.5,
      3800.0,
      116
    ],
    "going to kind of close that hole more broadly. How'd you guys like hotties lecture about accelerators for AI? They're going to learn anything from Holly's lecture about AI little bit 50 podcast. Okay, that's good. Yes. spring Yep. Yes. It is cumulative. I guess probably there will be a little bit more of that cuz we haven't had a chance to ask questions about it at all, but I ": [
      3800.0,
      3860.3,
      117
    ],
    "happened. All right. So the model for the course is to achieve great things two things are needed a plan and not quite enough time, which we totally have an abundance of his class ideas over 10 weeks. We build quadcopters from scratch. So this is one of the quadcopters from an early version of the class. So they're about this big they fly around the remote-controlled. So do PCB ": [
      3360.8,
      3386.1,
      103
    ],
    "he lives and I know the cash geometry. I can make some guesses on it. I know maybe I actually had quite a bit of information about the machine that you're running on from the HTTP headers. I could maybe narrow it down further by running some performance test. I can see how fast it is and maybe I can make some guesses about what the cast geometry has. This ": [
      1356.5,
      1380.1,
      37
    ],
    "he's not but he is there some famous rants of his about how people get too upset about security. But when this happen like everyone knew something was big because all they would because interesting ly there was no traffic about it from the top of tall people in Linux on the Linux mailing list because they were all huddled in some private mailing list trying to figure out what ": [
      3080.5,
      3103.6,
      97
    ],
    "how can I get those possibilities? So I know that the my target is running Chrome, so I'll run, my own machine. I also know what operating system they're running on. I know a lot of stuff about the version of Chrome photo strun that version right and beforehand. I will done this to know when I'm preparing my attack. I'll have this big table and it will say if ": [
      2714.5,
      2737.9,
      83
    ],
    "if I control P, I can have some influence over what part of tea is going to be accessed because if I change P the value of p x r k is going to change and that'll change the address and then the final piece is that this is the index that I'm Computing the whole value if I know this if I happen to find index and I know ": [
      1017.4,
      1036.9,
      24
    ],
    "in a re2 and this will be slow slow slow slow slow fast And now I know the index where I read and it was fast and this. Well with a little bit of math bk0 the index will bk0. directions All right. Yes. How do I know are Kias so? I don't have to know exactly where key is for sure. I could have a couple of possibilities say ": [
      2677.7,
      2714.5,
      82
    ],
    "in the US and other countries because his words about this, but it's really a big deal. If you got a lot of criticism about this since this stuff will happen is really in a really critical spot with respect to the kind of Integrity of all of are in a codon code cyber infrastructure, which includes our laptops in a personal day in all this kind of stuff. That's ": [
      585.8,
      610.1,
      5
    ],
    "in this cash that It is I would take the location of T. Let's say so T. Is that magical table from 80s and how would I know where she lives? So it turns out the one thing I could do is I could run Chrome on my own browser and I are on my machine and so over this is so this is Cody. So how's this going to ": [
      1277.8,
      1307.6,
      34
    ],
    "instructions like a donkey all the caches or I could just go and relax us some other stuff that lives in the same location. I go and I get the I convinced the processor to speculatively read this address which would be an error. It would be access to remember that don't have access to and to take that value and use a tissue and a load to an array ": [
      2271.5,
      2295.6,
      69
    ],
    "is Here is the key. Okay. So here's what I'll do so I can I can run this code as long as axons Within These bounds everything is okay, but I'll do next as I will pass a very large value of x that pushes that address way off the balance of my array one and in Turkey. Write this is clearly against the rules of what you're supposed to ": [
      2595.1,
      2624.2,
      79
    ],
    "is not in 16 x isn't too. This is x in this is going to be a cache, Miss. Because we've arranged it so the cash mess because it makes you a text is not in the cash that's going to be a cash. So the load were just going to sit in our instruction window on a big out of her superscalar and it's going to stall but we ": [
      1952.4,
      1977.8,
      58
    ],
    "is tagging the basically tagging a branch for after which the help. but it may and there's some you know, what what happened is that these the fix is going to be extremely focused. So they try to figure out exactly the middle of the need to do to block them. And so are you can read about on Wikipedia. There's the proposed solution. I think it's either of the ": [
      3744.2,
      3774.5,
      115
    ],
    "it is also in the lower level of the cash so you can think about this and I got the memory I come back. I drop it off until 3, then I drop it off and I'll too and I put it in to L1. And so these caches are all shared inclusive. Not actually necessary. You can have extra, exclusive Cash's there's some reasons you might do that. That ": [
      1670.3,
      1697.0,
      49
    ],
    "it's still pretty important, but he was like, I don't know what the big deal is but he's like but no, but the basic idea is that there's these things called. Protection rings I'm particularly until another systems have similar mechanisms. But basically it's sort of these hierarchical levels of privilege that code can be running with user code 636 incoming call to bring 3, which is the least privilege ": [
      2866.9,
      2895.1,
      89
    ],
    "it's supposed to the processor is speculating the way it's supposed to this is more like how you know, an unintended consequence right of the fact that our systems are really complicated. VMS supposed to protect you like via most never supposed to protect you from this like this is more than VM can resume be expected to do. Santa spektreworks went through this went through all this. Alright, so ": [
      2433.5,
      2475.7,
      75
    ],
    "just look at it. I can watch for the a s code executing and I could say what is it accessing when it when it goes and does encryption it also turns out that there are algorithms for just scanning through dumps of memory and looking for things that look like a s keys. So this is useful. I'm just you know, I find an unencrypted Web Channel. I can ": [
      2763.7,
      2781.3,
      85
    ],
    "just screamed at off and just look for stuff that looks like he's and so maybe I'll have 50 places that are 50 addresses that I usually find the key in Chrome and I'll just run this 50 times or I'll dump the whole thing and just start looking and then I'll try each one. I find I'll try communicating with me with the other partner of the encrypted Channel ": [
      2781.3,
      2802.3,
      86
    ],
    "keep in the homework that we're going to put it to the final. So that means is that enough what I do the midterm, I've already used up some of those questions from the first step of homework. So there are fewer of them for me to draw from and then I get to the end in the file. I look at all. The questions are left over. I pick ": [
      3879.1,
      3897.1,
      119
    ],
    "kind of cash mrs. Does associativity get rid of 00 conflict that's how to reduce is complex because I can have some choices about where to put my data. What kind of Optics compulsory that's true. I'll fix compulsory misses and up the other one won't fix capacity. Remember this mass of this is the capacity to return the block five times. A number of Seth hours are equation for ": [
      1209.9,
      1251.7,
      32
    ],
    "know, even if I had 10% of the time that's still you know, a hundred million credit card numbers. more questions All right, so that is Spectre. Meltdown whoops meltdown the Meltdown play a security violation sandboxing thing. It's sort of like Chrome's business. It's not part of the basic contract between the operating system Hardware in the application right at the little bit outside back for view. I think ": [
      2821.0,
      2866.9,
      88
    ],
    "like Two in the class so that we have more time at the end cuz it's really just a function of time at the end of get them flying. We have very good success with actual width boards that work which means that electrically the motors turn on and then microprocessor work and all that stuff. We have some success getting the control the Control software to work reliably. But ": [
      3647.6,
      3677.9,
      112
    ],
    "look at a ray to the force lot of a ray to if I go and I bring my filled up the the the flash my cash and I can I refill my location and it's fast then I know that this code which never executed access that piece of my IRA. And now I just read part of a ray one, which I was not supposed to be able ": [
      2212.1,
      2234.8,
      67
    ],
    "looks like it's a recent Intel machine. They have cash is it look like this? So tall do is I will take tea. Here's a dress tea and I'll find a bunch of addresses that have the same Index right now. It's pretty easy. I can just very the tag. I'll get a big chunk of memory myself and all very though the tag and also give me a bunch ": [
      1380.1,
      1398.0,
      38
    ],
    "lot more about security and I more about architecture than I were actually also pretty mind-blowing when they came to light backyard. First part of this year before that today is the last lecture Thursday is the review day. So come with questions. Are there any questions right now about the final? or anything else that's on your mind. No questions about the final we can cancel the review. On ": [
      460.6,
      496.2,
      1
    ],
    "machine can do this to each other all of my my Chrome tabs. Can I do get out trying to steal information from one another? All right. So that was Prime and probe and an arms race, but the real news was this thing called Spectre & Associates thing called meltdowns is a spectre Fryman probe we know about speculation and we know something about virtual memory for most talked ": [
      1723.2,
      1765.2,
      51
    ],
    "means of this site ouch. I find side Channel attack works in the L3 as well, which means this one works across the entire core. So I was like 26 Kors. I'm a really high on. So that's a lot of folks sharing this cash and even on my machine. I think I have pink eye for Coors or something. And so there's basically all the threads right in my ": [
      1697.0,
      1723.2,
      50
    ],
    "mode. And basically we've only been talking about Ring 3 stuff in this course, I got to all the user space stuff stuff happens there zero and that's all the more privileged mode and basically in ring zero you can do anything you want button rings 3, you're much more you're much more constrained. I believe ring zero you can access any memory. The protections are much more relaxed. The ": [
      2895.1,
      2925.3,
      90
    ],
    "no effect. But the problem is if they did have an effect. Right and the fact that they had was that they brought. The cash lines at those locations into our caches. and furthermore the other thing that's even scarier that they did is that this arranged this So that a ray one is K. Wright's or rerun is our secret key. And now I have X Array, one is ": [
      2106.0,
      2151.4,
      64
    ],
    "not it's not it's a race. That's right. It's a race size. So this is Where is there a size this is array size. Select isn't too so this load actually goes fine accident erase x's and erase. I was here there would be a load here. for array size that whilst all the brands of your predicted exes are exes fine X has been producing it's there and so ": [
      2029.9,
      2060.1,
      61
    ],
    "of addresses that are all going to map to the same associative set inside my cash and then I will just read them all and that will evict everything from that cash that and I'll just have my betta sitting in there to be a little bit more complicated. The placement policies are really really complicated nowadays are not just a lie you lie. You can figure out how to ": [
      1398.0,
      1420.3,
      39
    ],
    "of drop some of its permissions and there's some way to get back out of the sandbox and regain the permissions, but you know what code you're out you're going to be running. So here is an example. Right. So I have this address space is crumbs address space. I have two tabs if they're on regions and the question is can one tab somehow reach in and learn something ": [
      809.8,
      832.5,
      15
    ],
    "of stuff that mean that you might have in one tab for your bank and then there's other tab Weather like for you know, you decided out of curiosity to go explore the dark web and who knows what you're going to run into over there. And so the idea here is that you don't want somehow the code that's running in you're the sort of untrustworthy tab to be ": [
      721.3,
      741.2,
      11
    ],
    "on Tuesday of finals week or whatever it says the top of the page to get to work? So I think that's it. As far as the district's go. Alright, so there is a lot of hollow blue early early this year about security issues with microprocessors a couple of different ways that this has happened microprocessors are really interesting. Spa they are in an interesting spot because they serve ": [
      519.8,
      559.0,
      3
    ],
    "one of these side shall attack, but I can tell you for instance that I probably 90% of the bits are correct, or I can tell you that, you know, I just know that these four bits, how are these particular values and they can actually that's significantly weakened the cryptosystem to make an accident brake pad with some other techniques so leaking little bits of information through these other ": [
      1152.4,
      1173.5,
      30
    ],
    "operating system on particular. This isn't about protecting the colonel from user space is just about protecting kind of untrusted code running within a process from some trusted code running inside the same process. Sarah like I said all this Rights, are we the way this works is you have? Yeah, so when you enter and leave the sandbox so near the coat whatever thread enters the sandbox it sort ": [
      782.6,
      809.8,
      14
    ],
    "over your channel and it will happily go and run this algorithm then they're going to talk about in a minute on this data using this key in this table. The other thing to note is that we take P&K. This is the thing we know and we use attacks us something and tea. So this is a data dependent address that we're going to access and that means that ": [
      994.4,
      1017.4,
      23
    ],
    "part of this. There's a cemetery next door and imma cashing out of the increase latency from cactuses. Any other questions? Alright, so something that people have done is they are what processor vendors have done is they've actually made it harder to measure time precisely and their processors to make it harder to run these kind of these property tax cuz you need an accurate timer to to do ": [
      1559.9,
      1592.0,
      45
    ],
    "point. I will actually be a fish. I believe it's going to be CSE 176e. It's official name is the design and implementation of Robotics systems. I don't know that sounds cooler or less cooler than the quadcopter class. definitely more complicated Yes. The prereqs that's a good question. So the prereqs are that. You need so there are there no official like prereqs the other than application process where? ": [
      3488.6,
      3524.7,
      107
    ],
    "program. I guess that's probably a prereq. But other than that we teach you everything that you need to know. I should have brought one. They sometimes don't survive the last 2 days of class. So. Are only a k. I'm the only one that seems to get injured by them during the class also, so it's reasonably say are there any questions about computer architecture? Although I really I ": [
      3551.3,
      3589.4,
      109
    ],
    "riding. So maybe I'm not running on the same core as as my victim. But so there's a picture of memory hierarchy. We have her L1 cache L2 cache L3 cache. So one property that cashes have no days is something called inclusivity. And so the key here is that core one in courchevel, share the L3 and inclusivity means that if something is in a higher level of cash, ": [
      1643.8,
      1670.3,
      48
    ],
    "same address space has access to particular part of memory or which how do I figure out what memory is accessed? We are just going to call the cash attack. And this is pretty there's been a bunch of these we're going to talk about one called Prime and probe attack attack. So people have done things like these aside channels are all the things that a prayer that a ": [
      1060.0,
      1087.8,
      26
    ],
    "so do I do after I said I come back and I then issue a load to each of those cash lines and one of them will be slow because one of them will be amazed and all the rest of them will be hits. And now I know that I read something that they that the that the the Chrome read something at map into this cash that So ": [
      1471.6,
      1491.8,
      42
    ],
    "so long and so forth. So this is kind of cool right now. If you're at a dinner party over the party over the holidays unicycle. I understand how Spectre and Meltdown work is also which is that I would imagine that this It's also set of a commentary on what I hope you have learned during the course right for the beauty of the course. If you haven't seen ": [
      3145.2,
      3173.6,
      100
    ],
    "table of contents that are part of the AFL and table seems to be started this address this virtual address and because programs are pretty predictable and things tend off and go roughly the same way. I might find one or a small number of places where team might live and so I could try to do this at multiple places. Translate during my attack. I have some idea where ": [
      1333.8,
      1356.5,
      36
    ],
    "tell me something about the the value that my the the other offer after that operation done power. So you can watch how much power is consumed during something like doing AES encryption and you can tell by the fluctuations because the more the more ones are flipping the zeros and vice-versa the more power consumed and so you can infer Something about the statistics of the bits that come ": [
      1110.6,
      1133.8,
      28
    ],
    "that I do have access to that will call the cash miss the cash will service that Miss and I will bring in that cash line. And now when I'm done with this right after here I can go and I can check the latency for loading each part of a ray two and one of those cash lines will be fast. I'm at Cash Line. It's fast. Corresponds to ": [
      2295.6,
      2318.9,
      70
    ],
    "the address of our secret key. And the key thing here is in the sandbox environment. All the sandbox is live in the same virtual address space with a run with different permissions. So this address the address of the key actually makes sense. It translates in the tlv in some reasonable way. So I read from array one and then I use that to read array to and now ": [
      2151.4,
      2181.7,
      65
    ],
    "the final questions from them. It's not all of them, but Santa's going to work. So the output of a distraction to be waited a little bit towards the second half of the course of the first type. Of course. Certainly, you know I could definitely ask questions. Just like we could in the second half of the course. We could ask questions about the combination of Branch prediction and ": [
      3897.1,
      3920.9,
      120
    ],
    "the of the crones of the applications virtual address space that you have access to and you're not supposed to be able to access anything outside of their so my data is here and my sandbox the other day, there's another sandbox then we should never be able to grab data from one from the other. So this is pretty important for web security have anything to do with the ": [
      760.7,
      782.6,
      13
    ],
    "the old days when we have 32-bit machines this took off like one of your 4 gigabytes of virtual address space was dedicated to the current was kind of a pain if you wanted a bigger programs does a long-standing it's worth it's worth maybe 5 to 15% of performance for the application that you and I normally run and so this is basically the sandboxing situation that we had ": [
      2993.4,
      3023.3,
      94
    ],
    "the other so they respect her and there was meltdown. Meltdown is actually simpler than Spectre actually even more dangerous. So I was talking to security guy last week and he was like, I don't know what the big deal is about Spectre OU Architects got really upset. Yeah. Dentist or an address to array one which is protected data that you're not supposed to be able to read. of ": [
      2475.7,
      2514.8,
      76
    ],
    "the protected data Incorporated now What I do. is I have a ray to Right. That's my right. I take it out of the cash and I'll mark things in a right to their cash does red right and they started 0 and they go to a big number one megabyte or gigabyte or whatever. So what the instructions do so if we imagine that this was? That this code ": [
      2514.8,
      2546.6,
      77
    ],
    "then what I will do is I will run X once with X Out of Bounds. And so let's see what happens. So here is the assembly code mips assembly for that same piece of code so exes and so this is X. Isn't 16. Everyone is in 19. an array to is in 18 So I'm running along I hit this branch. I last thousand times I've taken this ": [
      1868.2,
      1905.9,
      56
    ],
    "they keep running and they're going to keep speculative. Actually, they're going to read stuff for the register file and so forth and they're going to execute these instructions. And if any of those ever committed they would be in there. Especially the loads the load here in the load here because X is out of bounds, but the speculative so We don't know actually. Sorry I got so it's ": [
      2004.8,
      2029.9,
      60
    ],
    "this arms race between the the computer system designers and the entrance I was so until they fix the timer's but they also have this mechanism called transactional memory, which are not going to talk about it basically does is it lets you specifically know what kind of the processor notifies you actually called a function for you. If someone evict something that you've read as part of these transactions ": [
      1592.0,
      1620.5,
      46
    ],
    "this kind of stuff. This is like total nonsense is make any sense. But now like you understand how this really complicated attack works because you understand a lot more about how your computer works had a pretty fine level of detail. So I think I left the path for the entire course as you can rest and Spectre and meltdown. So we have quite a bit of time left. ": [
      3173.6,
      3194.4,
      101
    ],
    "through and with that you can actually do a lot. So one of these people spend a lot of time thinking about cryptography Kris. So one thing that you can do is if if I give you a crypto key and I say, you know, this cryptokey has some flute bits in it because of the noisy right? I had I measured it through some kind of noisy channeling maybe ": [
      1133.8,
      1152.4,
      29
    ],
    "to do about this. And so this optimization is no longer here since Colonel 4.15 which came out early this year. They just found out there's a couple pages that you really need. And the rest of it is unmapped and this is like this is a non-trivial performance hit right? Like I said five to I may be 15 or 20% and Intel and everyone else is going to ": [
      3103.6,
      3123.9,
      98
    ],
    "to figure out what memory locations the AES code was accessing. And what can we do with that? So here is some sample, This is maybe some code for the middle of a yes. The details are not super important, but the key is is that we have a table here and this table is full of kind of magical constant that are part of the AES algorithm. And then ": [
      930.6,
      956.6,
      20
    ],
    "to make sure that any value of this maps onto a different Cash Line array to it's going to take this and it's going to go up here and it's going to perform a load from a razor. All right. And so now this is rad and I mean that in the cash. so that's what I do is I go down here and I start loading every Cash Line ": [
      2655.4,
      2677.7,
      81
    ],
    "to read. I see lots of quizzical looks. Would someone like to put their quizzical look into a question and maybe we'll solve other physical X? Go for it. So what do I do if I have a right to a ray to I have access to I can I kick it the whole I take Oliver a 2 out of the cash. Right? So I there's a cache flush ": [
      2234.8,
      2271.5,
      68
    ],
    "to this is like wholesale reading of remotes protected data. Right. If not, it's not even particularly tricky to make this go. I control all the codes I need to do this. I just need to know where everyone is. And in fact, I could do better than that. I could just read all of memory over there. I can just started AXA to raise at I know I didn't. ": [
      2344.5,
      2366.2,
      72
    ],
    "using and that's the secret. That's the thing that we would like to protect the browser that we would like to steal if we are some kind of attacker. so the key thing here is that we control pee because I can tell the day that I can tell the browser to send whatever dude I want. I can compose a little pack and I can say hey send this ": [
      975.2,
      994.4,
      22
    ],
    "virtual address space your data is down here and blue and this is the stuff that you're supposed to be able to access the Colonel's whole virtual address space. Those mappings were actually also in your virtual address space. They were just marked as inaccessible from ring 3, so they're all there. You just can't access anything that's there. And so with this world why this was nice was that ": [
      2946.7,
      2970.7,
      92
    ],
    "was behaving properly what happened. There was no Branch Branch prediction. I will go and one so here is already one. Already won. So I choose X. Reality has a little bit more here than I guess I could help clarify. So here's my address space. Here is my array one right now. Everyone can be balanced. So he has my region. This is my sandbox 71 lives. Here here ": [
      2546.6,
      2595.1,
      78
    ],
    "we have PT. This is the day that we're trying to send so maybe if I open up an encrypted I open up a channel to my web browser. This is the key that the web browser was going to use to encrypt that channel and this is the date. I'm going to send over that channel and then key K is the key that where that the browser is ": [
      956.6,
      975.2,
      21
    ],
    "what key was being used right I could steal someone else's key. And if I could do that, then I could impersonate them and I can tell your bank to give me all your money or something. I'm so this is it by Design? I mean the whole point of the crypto systems that it's hard to figure out the key is but if we're clever we might be able ": [
      913.4,
      930.6,
      19
    ],
    "which are like little they're waiting on someone tells her to fix one problem and then they gave us the new instructions which gave us another even more effective way of doing the same thing. I totally whack them all with the stuff. All right, so this would work if you were both on the same core that might not be super likely so maybe I bought the car is ": [
      1620.5,
      1643.8,
      47
    ],
    "will go through and you Zack switches into to do all this is Computing the address for A-1. So we had to 19th and we do that load and unload from there. And so that is this cascading nested array access right Construction Dragon execute. They're going to fall for the pipeline. They're going to go to the memory if they're going to go to the caches. They're going to ": [
      2060.1,
      2085.9,
      62
    ],
    "work? So I'm going to reach into another I'm going to try to reach in and steal the AES key from chrome from JavaScript. So I'm a JavaScript program that someone has downloaded into their Tab and I'm going to run and try to steal the the encryption key from chrome itself machine and then I can just scan all of memory for that magic table because it's a magic ": [
      1307.6,
      1333.8,
      35
    ],
    "would like talking about quadcopters actually much more fun. Yes. That's a good question. It's been it's very dull lot over the years. I've had kind of four times so far. I think last time 30% got them. Flying. I have a couple of different standard there is if they if they if they board works and your Motors turn on that's like standard one. Some of them do what ": [
      3589.4,
      3624.5,
      110
    ],
    "wouldn't. So I don't say that I don't like that. I was some like percentage but where's the nearest I build the final so here as soon as I was actually work. So what I do is going to build the homework's I have my t h and a couple of extra questions and then we go through and look at the homework. She liked pic or we're going to ": [
      3860.3,
      3879.1,
      118
    ],
    "you do so the new thing this year is that I hope if I can get this together is that you'll be able to keep the remote controls was turned out not to use to be possible. So people can use them. We bought a new cheap remote control. Something is allowed to have a hundred twenty bucks, but for that you get a quadcopter and a remote that you ": [
      3677.9,
      3695.0,
      113
    ],
    "you so never has a man called sandboxing. So sandboxing is a security techniques. It's gotten a lot of play lately because of browsers. And so the idea is that I have a program like Chrome. Let's say and chrome runs and user space and I have a lot of I have a bunch of tabs open, right? I have like a thousand tabs open on my computer just like ": [
      673.1,
      701.2,
      9
    ],
    "you're running Chrome version 472 on Mac OS X so this version and then it looks like from from work running Chrome myself and just scanning through all of chromes memory, which I can do because I have root on my machine. I can find out where the table that I could find out. Where are the key is stored. Wright Cowboys I could do that one as I could ": [
      2737.9,
      2763.7,
      84
    ]
  },
  "File Name": "Intro_to_Computer_Architecture___A00___Swanson__Steven_James___Fall_2018-lecture_19.flac",
  "Full Transcript": "All right. Well, it wouldn't be the second to last day of class if I didn't have a problem with my laptop. So there we go. so today  things are winding down mostly today. I am going to show you a magic trick.  In the form of a couple of security issues that can arrive in architectures and they're kind of a little bit mind-blowing and people that know a lot more about security and I more about architecture than I were actually also pretty mind-blowing when they came to light backyard.  First part of this year before that today is the last lecture Thursday is the review day. So come with questions. Are there any questions right now about the final?  or  anything else that's on your mind.  No questions about the final we can cancel the review. On Thursday. No problem.  All right. So the other thing is going to happen homework. The last homework is going to come out pretty soon. Probably. Is it already out there now? Yeah. Alright, so it's out early. So you it's basically kind of like last time at start of the study guide for the final and as much as there is one and it's going to be do I believe on Tuesday of finals week or whatever it says the top of the page to get to work?  So I think that's it. As far as the district's go.  Alright, so  there is a lot of hollow blue early early this year about security issues with microprocessors a couple of different ways that this has happened microprocessors are really interesting.  Spa they are in an interesting spot because they serve Define the whole view of the world to suffer. So if you have a bug in your microprocessor, it's really hard to tell what's going wrong in so there's a lot of concern about whether or not malicious people might insert bugs into processors and get built or other kinds of pieces of Hardware. Some companies have been banned from having their networking equipment purchased for kind of sensitive applications in the US and other countries because his words about this, but it's really a big deal. If you got a lot of criticism about this since this stuff will happen is really in a really critical spot with respect to the kind of Integrity of all of are in a codon code cyber infrastructure, which includes our laptops in a personal day in all this kind of stuff.  That's all you're going to see you today. I hope is that it's really hard because the things that the security folks are able to pull off is are really amazing and some of these problems have existed for I mean really decades like some of them have been around effectively since probably the late seventies or so and it's only now that we've sort of figured out that there was a bug. All right, so I'm going to write two different things first thing to talk about these kind of side Channel cash attacks, and we're going to use out of the building block to talk about Spectre and meltdown after the two big bugs that came out early this year. I want to give you a little bit of background first. And so this may seem a little bit disconnected because the thing about security of these exploits as they take a lot of pieces from a bunch of different parts of the system and they start of fine like this very circuitous path through all these different components and all these different ideas are always very fine-grained details of how the system works.  Define a way to get access to some information that they don't supposed to have you so never has a man called sandboxing. So sandboxing is a security techniques. It's gotten a lot of play lately because of browsers. And so the idea is that I have a program like Chrome. Let's say and chrome runs and user space and I have a lot of I have a bunch of tabs open, right? I have like a thousand tabs open on my computer just like any normal person would and each one of those tabs is basically a little private. It's like a little mini application. Right and some of them were very sophisticated and some of them have access to a lot of your private information, right so that we've got tab may have opened a connection to your bank or someone else or it may just have you know password that all kinds of stuff that mean that you might have in one tab for your bank and then there's other tab  Weather like for you know, you decided out of curiosity to go explore the dark web and who knows what you're going to run into over there. And so the idea here is that you don't want somehow the code that's running in you're the sort of untrustworthy tab to be able to reach in and grab data data stored in the trustworthy Tab. And the reason this is a concern is because JavaScript is complicated and code is complicated. There's lots of a kind of bugs that can occur. And so what they do is they put each of the tabs into a Sandbox in a sandbox is a little kind of confined area usually defined by a region of the of the crones of the applications virtual address space that you have access to and you're not supposed to be able to access anything outside of their so my data is here and my sandbox the other day, there's another sandbox then we should never be able to grab data from one from the other.  So this is pretty important for web security have anything to do with the operating system on particular. This isn't about protecting the colonel from user space is just about protecting kind of untrusted code running within a process from some trusted code running inside the same process.  Sarah like I said all this  Rights, are we the way this works is you have?  Yeah, so when you enter and leave the sandbox so near the coat whatever thread enters the sandbox it sort of drop some of its permissions and there's some way to get back out of the sandbox and regain the permissions, but you know what code you're out you're going to be running.  So here is an example.  Right. So I have this address space is crumbs address space. I have two tabs if they're on regions and the question is can one tab somehow reach in and learn something about what's inside the other tabs memory even though I can't read or write it.  Alright, so one thing that you can maybe learn and we'll see how this whole show up in a minute. Maybe I can learn something about the data, but maybe I can learn what memory location they were being the other programmers accessing. So this is a kind of side Channel. That's something that's not actually information that's going from one program to another in times like this, but it's like the fact that they did something and so one way that this could end up being really useful.  Is if you were trying to attack something called a soas dance for the advanced encryption standard. This is what protects all of your web transactions all your encrypted traffic over there in that runs on 80s. And this is a funeral by cryptography. This is a symmetric key crypto system. That means that there's some secret called the key that one of the tabs may have that it's using to communicate with another with the website or maybe that the Chrome's the stuff that's outside. Any sandbox, which is Chrome itself might be used to manage those connections really cool. If I could find out what key was being used right I could steal someone else's key. And if I could do that, then I could impersonate them and I can tell your bank to give me all your money or something.  I'm so this is it by Design? I mean the whole point of the crypto systems that it's hard to figure out the key is but if we're clever we might be able to figure out what memory locations the AES code was accessing.  And what can we do with that?  So here is some sample, This is maybe some code for the middle of a yes. The details are not super important, but the key is is that we have a table here and this table is full of kind of magical constant that are part of the AES algorithm. And then we have PT. This is the day that we're trying to send so maybe if I open up an encrypted I open up a channel to my web browser. This is the key that the web browser was going to use to encrypt that channel and this is the date. I'm going to send over that channel and then key K is the key that where that the browser is using and that's the secret. That's the thing that we would like to protect the browser that we would like to steal if we are some kind of attacker.  so  the key thing here is that we control pee because I can tell the day that I can tell the browser to send whatever dude I want. I can compose a little pack and I can say hey send this over your channel and it will happily go and run this algorithm then they're going to talk about in a minute on this data using this key in this table.  The other thing to note is that we take P&K. This is the thing we know and we use attacks us something and tea. So this is a data dependent address that we're going to access and that means that if I control P, I can have some influence over what part of tea is going to be accessed because if I change P the value of p x r k is going to change and that'll change the address and then the final piece is that this is the index that I'm Computing the whole value if I know this if I happen to find index and I know P10 I can find K because XR is its own inverse and so you can basically just take the soda do we take the index over here? And we send the K over there and we will get we can compute the value of K if we knew the index because I already know.  Brighten, the question is how do we detect that another thread running in a different the same address space has access to particular part of memory or which how do I figure out what memory is accessed?  We are just going to call the cash attack.  And this is pretty there's been a bunch of these we're going to talk about one called Prime and probe attack attack. So people have done things like these aside channels are all the things that a prayer that a computer does that are not exactly the computation you're asking them to do. So for instance some operation take longer than other so some floating Point operations take longer than others depending on what values you send them. So if I send it to me if I send some carefully crafted values I might be able to observe that the execution time for my program gets longer and that will tell me something about the the value that my the the other offer after that operation done power. So you can watch how much power is consumed during something like doing AES encryption and you can tell by the fluctuations because the more the more ones are flipping the zeros and vice-versa the more power consumed and so you can infer  Something about the statistics of the bits that come through and with that you can actually do a lot. So one of these people spend a lot of time thinking about cryptography Kris. So one thing that you can do is if if I give you a crypto key and I say, you know, this cryptokey has some flute bits in it because of the noisy right? I had I measured it through some kind of noisy channeling maybe one of these side shall attack, but I can tell you for instance that I probably 90% of the bits are correct, or I can tell you that, you know, I just know that these four bits, how are these particular values and they can actually that's significantly weakened the cryptosystem to make an accident brake pad with some other techniques so leaking little bits of information through these other effects with power or time or something else.  So neither Clear Creek review about associativity.  how  Fancy animation imagine that those blocks stayed there. So we have multiple cash. That's a bunch of if we when we compute the index we can say our supposed to go into this cash set. Then we can decide where we want to put that date inside the cash that has some Choice what kind of cash mrs. Does associativity get rid of  00 conflict that's how to reduce is complex because I can have some choices about where to put my data. What kind of Optics  compulsory that's true. I'll fix compulsory misses and up the other one won't fix capacity.  Remember this mass of this is the capacity to return the block five times. A number of Seth hours are equation for computing cash geometry and the brakes sound like they have the index here at the offset. And I have a tag is a herd of it's according to that. That's just a reminder. So let's say that what I wanted to do was I wanted to create a very focused set Focus set of capacity. I guess. It's actually Confidant to create a carefully focused out of capacity of conflict in this cash that  It is I would take the location of T. Let's say so T. Is that magical table from 80s and how would I know where she lives?  So it turns out the one thing I could do is I could run Chrome on my own browser and I are on my machine and so over this is so this is Cody. So how's this going to work? So I'm going to reach into another I'm going to try to reach in and steal the AES key from chrome from JavaScript. So I'm a JavaScript program that someone has downloaded into their Tab and I'm going to run and try to steal the the encryption key from chrome itself machine and then I can just scan all of memory for that magic table because it's a magic table of contents that are part of the AFL and table seems to be started this address this virtual address and because programs are pretty predictable and things tend off and go roughly the same way. I might find one or a small number of places where team might live and so I could try to do this at multiple places.  Translate during my attack. I have some idea where he lives and I know the cash geometry. I can make some guesses on it. I know maybe I actually had quite a bit of information about the machine that you're running on from the HTTP headers. I could maybe narrow it down further by running some performance test. I can see how fast it is and maybe I can make some guesses about what the cast geometry has.  This looks like it's a recent Intel machine. They have cash is it look like this? So tall do is I will take tea. Here's a dress tea and I'll find a bunch of addresses that have the same Index right now. It's pretty easy. I can just very the tag. I'll get a big chunk of memory myself and all very though the tag and also give me a bunch of addresses that are all going to map to the same associative set inside my cash and then I will just read them all and that will evict everything from that cash that and I'll just have my betta sitting in there to be a little bit more complicated. The placement policies are really really complicated nowadays are not just a lie you lie. You can figure out how to do this, right? You could sit down like one of the graduate student actually Craig that that prepare the slide figure out how to do this on Modern Intel processors. So take some work, but it's not too hard. So do I do what I do is I run my code.  And I feel the cash desk and this corresponds to let's say the first entry of tea and I can do the second entry of tea and fill them up and then I will sit there and I will wait and I'll do is I'll send something through that encryption channel, right? I'll say hey and then what I will do is I will it run it is going to access tea and it is going to evict one of my cash lines. Right? So now it's just miss so do I do after I said I come back and I then issue a load to each of those cash lines and one of them will be slow because one of them will be amazed and all the rest of them will be hits. And now I know that I read something that they that the that the the Chrome read something at map into this cash that  So I guess we're a little bit of information about about key about the Cave of the encryption key.  All right, honey questions about this.  Yes.  Here's what I get. That's a good question, right? So what do I get I get  Back here. So I find out what this value is what part of that I got some information about what p0x or k is because that tells me where auntie I read from.  And then I can use this math. I know peace because I sent pee pee came from me. And so I just take the XR of that with the index.  How do I get K & K is one bite or word of my of the key, but I'm not supposed to know right? So that's essential check. This is the date of the second row part of this. There's a cemetery next door and imma cashing out of the increase latency from cactuses.  Any other questions?  Alright, so something that people have done is they are what processor vendors have done is they've actually made it harder to measure time precisely and their processors to make it harder to run these kind of these property tax cuz you need an accurate timer to to do this arms race between the the computer system designers and the entrance I was so until they fix the timer's but they also have this mechanism called transactional memory, which are not going to talk about it basically does is it lets you specifically know what kind of the processor notifies you actually called a function for you. If someone evict something that you've read as part of these transactions which are like little they're waiting on someone tells her to fix one problem and then they gave us the new instructions which gave us another even more effective way of doing the same thing.  I totally whack them all with the stuff. All right, so this would work if you were both on the same core that might not be super likely so maybe I bought the car is riding. So maybe I'm not running on the same core as as my victim.  But so there's a picture of memory hierarchy. We have her L1 cache L2 cache L3 cache. So one property that cashes have no days is something called inclusivity. And so the key here is that core one in courchevel, share the L3 and inclusivity means that if something is in a higher level of cash, it is also in the lower level of the cash so you can think about this and I got the memory I come back. I drop it off until 3, then I drop it off and I'll too and I put it in to L1. And so these caches are all shared inclusive.  Not actually necessary. You can have extra, exclusive Cash's there's some reasons you might do that. That means of this site ouch. I find side Channel attack works in the L3 as well, which means this one works across the entire core. So I was like 26 Kors. I'm a really high on. So that's a lot of folks sharing this cash and even on my machine. I think I have pink eye for Coors or something. And so there's basically all the threads right in my machine can do this to each other all of my my Chrome tabs. Can I do get out trying to steal information from one another?  All right.  So that was Prime and probe and an arms race, but the real news was this thing called Spectre & Associates thing called meltdowns is a spectre Fryman probe we know about speculation and we know something about virtual memory for most talked about in class.  Alright, so here is the basic idea.  So we have a little piece of code looks very innocuous and we're going to mess with the going to mess with the processor by messing with the branch predictor into thinking of that that this Branch here x is going to be taken a lot.  It's going to be it's going to be well, I should be service.  Can I look at my example code here?  Renoprotective this is not taken.  Just cuz I have some assembly of the next side. That's the way it's find out. They're going to convince the branch breaker that that branch is usually not taken and we're going to feed it while we're doing that. We're going to provide have some valid value sorted array one has some size, and it has to be less than that otherwise up and out of bounds exception. So we're going to run a bunch of times with a valid values of X and the branch breaker was going to decide. Okay. I know this Branch always is so I see you in the future. I will not take that branch.  I will also make sure that are a size is not in the cash and I can do that in a variety of ways I could do the trick. I showed you earlier right where I am.  Well, I flush out the associative said that was then and you can actually also just took four years if there's a way of marking Regent the memory is being on kashable on the table so I can make sure that are a size is not cashed anywhere. And then what I will do is I will run X once with X Out of Bounds.  And so let's see what happens.  So here is the assembly code mips assembly for that same piece of code so exes and so this is X.  Isn't 16.  Everyone is in 19.  an array to is in 18  So I'm running along I hit this branch.  I last thousand times I've taken this branch has been not taken so I'm not going to take it and that's the only way this works on a big out of order, you know processor. So I'm going to start speculating and executing all of these instructions.  Why is it important then that acts was not cashed?  This is actually interesting.  Huh? This car doesn't quite work. So.  So ex gets loaded here in 16.  Loudred  X is not in 16 x isn't too.  This is x in this is going to be a cache, Miss.  Because we've arranged it so the cash mess because it makes you a text is not in the cash that's going to be a cash. So the load were just going to sit in our instruction window on a big out of her superscalar and it's going to stall but we are a specular out of order processor. And so we will do Israel. Keep fetching down here. We will get to this Branch little say. Hey last time I took this Branch it was last time I got taken so I will soon it's not take it and I will just keep going all the way down here.  None of these instructions are they dependent on x?  Well so that they keep running and they're going to keep speculative. Actually, they're going to read stuff for the register file and so forth and they're going to execute these instructions. And if any of those ever committed they would be in there. Especially the loads the load here in the load here because X is out of bounds, but the speculative  so  We don't know actually. Sorry I got so it's not it's not it's a race. That's right. It's a race size. So this is  Where is there a size this is array size.  Select isn't too so this load actually goes fine accident erase x's and erase. I was here there would be a load here.  for array size  that whilst all the brands of your predicted exes are exes fine X has been producing it's there and so will go through and you Zack switches into to do all this is Computing the address for A-1. So we had to 19th and we do that load and unload from there. And so that is this cascading nested array access right Construction Dragon execute. They're going to fall for the pipeline. They're going to go to the memory if they're going to go to the caches. They're going to end up in the in the instruction Q or the earth goes by different but they're going to sit and wait for all the previous instructions to resolve in particular for this Branch to resolve the branches going to resolve. It's going to turn out to have been taken because ex was out of bounds. And so all these instructions are going to be squashed and so they should have no effect.  But the problem is if they did have an effect.  Right and the fact that they had was that they brought.  The cash lines at those locations into our caches.  and furthermore the other thing that's even scarier that they did is that  this arranged this  So that a ray one is K.  Wright's or rerun is our secret key.  And now I have X  Array, one is the address of our secret key.  And the key thing here is in the sandbox environment. All the sandbox is live in the same virtual address space with a run with different permissions. So this address the address of the key actually makes sense. It translates in the tlv in some reasonable way. So I read  from array one  and then I use that to read array to  and now I can go and do my Prime and probe Honore to  is that right?  Why don't you do that? I know that I would I do.  pray to  yeah, I do Prime and provender a 2 and now I know I like if there was a for here. So if this happened equal to 4 forget about this 2 + 56 is equal to 4 and I go when I look at a ray to the force lot of a ray to if I go and I bring my filled up the the the flash my cash and I can I refill my location and it's fast then I know that this code which never executed access that piece of my IRA.  And now I just read part of a ray one, which I was not supposed to be able to read.  I see lots of quizzical looks.  Would someone like to put their quizzical look into a question and maybe we'll solve other physical X?  Go for it.  So what do I do if I have a right to a ray to I have access to I can I kick it the whole I take Oliver a 2 out of the cash. Right? So I there's a cache flush instructions like a donkey all the caches or I could just go and relax us some other stuff that lives in the same location.  I go and I get the I convinced the processor to speculatively read this address which would be an error. It would be access to remember that don't have access to and to take that value and use a tissue and a load to an array that I do have access to that will call the cash miss the cash will service that Miss and I will bring in that cash line. And now when I'm done with this right after here I can go and I can check the latency for loading each part of a ray two and one of those cash lines will be fast.  I'm at Cash Line. It's fast. Corresponds to The Cash Line that lived at this index.  This 256 is to make sure that each bites are in each location and everyone lives in a different Cash Line.  Price there's no false positives a different different chunk of a ray and I can go and I can find out what the value of a write 1 ones.  So this is not just like some like I control all ready to this is like wholesale reading of remotes protected data.  Right. If not, it's not even particularly tricky to make this go. I control all the codes I need to do this. I just need to know where everyone is. And in fact, I could do better than that. I could just read all of memory over there. I can just started AXA to raise at I know I didn't.  At the beginning of my virtual address space and I can just start reading and I can dump the whole thing. Yes.  like everything was still like going.  Yeah.  because  because I executed these instructions speculatively.  Right. And the thing is that during speculation the processor turns off all of its Security checks because it's doing the texting fitting instructions that you know quote on quote May Never occur.  I am so it doesn't fly anything cuz if it if it gets squash that's not an error.  But it does have an effect on the cash higher key.  So this is like a this is a hardware bug right witcha memory supposed to protect you. I mean, it's a harder, but I guess it's a hardware Hardware problem. There's no bug here right nothing.  The program is behaving the way it's supposed to the processor is speculating the way it's supposed to this is more like how you know, an unintended consequence right of the fact that our systems are really complicated.  VMS supposed to protect you like via most never supposed to protect you from this like this is more than VM can resume be expected to do.  Santa spektreworks  went through this went through all this.  Alright, so the other so they respect her and there was meltdown.  Meltdown is actually simpler than Spectre actually even more dangerous. So I was talking to security guy last week and he was like, I don't know what the big deal is about Spectre OU Architects got really upset. Yeah.  Dentist or an address to array one which is protected data that you're not supposed to be able to read.  of the protected data Incorporated  now  What I do.  is I have a ray to  Right. That's my right. I take it out of the cash and I'll mark things in a right to their cash does red right and they started 0 and they go to a big number one megabyte or gigabyte or whatever.  So what the instructions do so if we imagine that this was?  That this code was behaving properly what happened. There was no Branch Branch prediction. I will go and one so here is already one.  Already won.  So I choose X.  Reality has a little bit more here than I guess I could help clarify.  So here's my address space.  Here is my array one right now. Everyone can be balanced. So he has my region. This is my sandbox 71 lives. Here here is  Here is the key.  Okay.  So here's what I'll do so I can I can run this code as long as axons Within These bounds everything is okay, but I'll do next as I will pass a very large value of x that pushes that address way off the balance of my array one and in Turkey.  Write this is clearly against the rules of what you're supposed to do is see right. I'm declaring an array one that has a size of 10 and I passed it an index that asked for two hundred thousand of them about a re-index 2in to mm. To write this address. It'll perform a load from this address.  Now it's going to take that value. Whatever was there will call this k0 right? That's what it read.  Turn on autopilot by 10:46 to make sure that any value of this maps onto a different Cash Line array to it's going to take this and it's going to go up here and it's going to perform a load from a razor.  All right. And so now this is rad and I mean that in the cash.  so that's what I do is I go down here and I start loading every Cash Line in a re2 and this will be  slow slow slow slow slow  fast  And now I know the index where I read and it was fast and this.  Well with a little bit of math bk0 the index will bk0.  directions  All right. Yes.  How do I know are Kias so?  I don't have to know exactly where key is for sure. I could have a couple of possibilities say how can I get those possibilities? So I know that the my target is running Chrome, so I'll run, my own machine. I also know what operating system they're running on. I know a lot of stuff about the version of Chrome photo strun that version right and beforehand. I will done this to know when I'm preparing my attack. I'll have this big table and it will say if you're running Chrome version 472 on Mac OS X so this version and then it looks like from from work running Chrome myself and just scanning through all of chromes memory, which I can do because I have root on my machine. I can find out where the table that I could find out. Where are the key is stored.  Wright Cowboys I could do that one as I could just look at it. I can watch for the a s code executing and I could say what is it accessing when it when it goes and does encryption it also turns out that there are algorithms for just scanning through dumps of memory and looking for things that look like a s keys. So this is useful. I'm just you know, I find an unencrypted Web Channel. I can just screamed at off and just look for stuff that looks like he's and so maybe I'll have 50 places that are 50 addresses that I usually find the key in Chrome and I'll just run this 50 times or I'll dump the whole thing and just start looking and then I'll try each one. I find I'll try communicating with me with the other partner of the encrypted Channel and see when they respond to me.  I thought I had to be very precise about that. I can just grab lots and lots of data with his attack and then I can you just try lots of stuff until one hits.  Writer also do this across all your tabs or across all the people in this room that I've gotten to go to cemeteries website and I'll hit you know, even if I had 10% of the time that's still you know, a hundred million credit card numbers.  more questions  All right, so that is Spectre.  Meltdown whoops meltdown the Meltdown play a security violation sandboxing thing. It's sort of like Chrome's business. It's not part of the basic contract between the operating system Hardware in the application right at the little bit outside back for view. I think it's still pretty important, but he was like, I don't know what the big deal is but he's like but no, but the basic idea is that there's these things called.  Protection rings I'm particularly until another systems have similar mechanisms. But basically it's sort of these hierarchical levels of privilege that code can be running with user code 636 incoming call to bring 3, which is the least privilege mode. And basically we've only been talking about Ring 3 stuff in this course, I got to all the user space stuff stuff happens there zero and that's all the more privileged mode and basically in ring zero you can do anything you want button rings 3, you're much more you're much more constrained. I believe ring zero you can access any memory. The protections are much more relaxed. The colonel has its own set of virtual memory mapping. So applications of virtual memory mapping with the colonel All-Stars virtual memory mapping is because it's a very complicated piece of software and if it needs to be able to manage memory and sophisticated way, so it has a virtual  And one thing that's been going on for a long time is that if you have a program and here's a virtual address space your data is down here and blue and this is the stuff that you're supposed to be able to access the Colonel's whole virtual address space. Those mappings were actually also in your virtual address space. They were just marked as inaccessible from ring 3, so they're all there. You just can't access anything that's there. And so with this world why this was nice was that I do a system call. I want to bounce into the colonel till like read something from get my process ID. I don't have to reload the Colonel's page table. It's already there in my address space. I just going to ring zero now I can access everything that's math in my virtual address space. So cheap makes calls a lot less expensive.  This is a very common optimization in the old days when we have 32-bit machines this took off like one of your 4 gigabytes of virtual address space was dedicated to the current was kind of a pain if you wanted a bigger programs does a long-standing it's worth it's worth maybe 5 to 15% of performance for the application that you and I normally run and so this is basically the sandboxing situation that we had earlier was Spectre. So the colonel was here. It's basically in a sandbox. It happens to be enforced by Hardware from your application, which is harder than a separate sandbox, but I can do the same basically the same trick with that. I do respect against the colonel and now I can read out kernel kernel data like this wholesale read the Colonel's data and there's all sorts of important Secrets down here.  It's all kinds of important critical State. There's like the security system is down here is all kinds of stuff for dr. Carl traffic file system information all kinds of all kinds of different things. This is a huge deal. So Linus Torvalds who runs Linux  is not known for being super sympathetic to security concerns. You think some people are really too exciting but he's not he's not but he is there some famous rants of his about how people get too upset about security. But when this happen like everyone knew something was big because all they would because interesting ly there was no traffic about it from the top of tall people in Linux on the Linux mailing list because they were all huddled in some private mailing list trying to figure out what to do about this. And so this optimization is no longer here since Colonel 4.15 which came out early this year. They just found out there's a couple pages that you really need. And the rest of it is unmapped and this is like this is a non-trivial performance hit right? Like I said five to I may be 15 or 20% and Intel and everyone else is going to fix the Spectre as well.  And has a couple of kind of proposal that there are they looking at to do that, but it's also going to cause some sort of degradation for to Performance. So this is really kind of shaking things up and has been a lot of scrutiny of Intel because like why we're not paying attention to this. How could this have been going on for so long and so forth.  So this is kind of cool right now. If you're at a dinner party over the party over the holidays unicycle. I understand how Spectre and Meltdown work is also which is that I would imagine that this  It's also set of a commentary on what I hope you have learned during the course right for the beauty of the course. If you haven't seen this kind of stuff. This is like total nonsense is make any sense. But now like you understand how this really complicated attack works because you understand a lot more about how your computer works had a pretty fine level of detail.  So I think I left the path for the entire course as you can rest and Spectre and meltdown. So we have quite a bit of time left. Do I have one more thing I was going to do.  Oh.  I'll just go to the website.  I'm going to make a quick plug for the classroom teaching in the spring.  What just happened?  Well, he'll torture.  Come on.  So in the spring spring my teaches class about bullying quadcopters.  So all we do is OAC what it is. He wants me to sign in how annoying.  That's what happened.  All right. So the model for the course is to achieve great things two things are needed a plan and not quite enough time, which we totally have an abundance of his class ideas over 10 weeks. We build quadcopters from scratch. So this is one of the quadcopters from an early version of the class. So they're about this big they fly around the remote-controlled. So do PCB design embedded system programming a little bit of control theory, you know how to solder in a pretty serious way over to wireless. I thought the view been to the Envision maker Studio. It's pretty cool some of them in late winter quarter have to kind of apply because  Apply it's not the fun. It's an enormous amount of work.  No one ever like Flames out of this class like everyone like he's working the whole time. Even if they're quadcopters. Don't fly at the end and everyone thinks it's it's it's a good time to try for that offense in this kind of thing. It's grateful people say they take another quadcopters two job interviews. And then like, oh, I'm going to hire you on the spot and stuff. So it's actually good for your you know, bottom line. All right all the fluff for the rest of the course, which is the rest of today and next week is the final questions questions about the final or the course. Well mostly about the course content preferably so start asking when you stop I'll leave and then I'll come back on Thursday and do it again.  Are there any questions?  No questions.  Yes.  It is an upper-division elective. Good point. I will actually be a fish. I believe it's going to be CSE 176e. It's official name is the design and implementation of Robotics systems.  I don't know that sounds cooler or less cooler than the quadcopter class.  definitely more complicated  Yes.  The prereqs that's a good question. So the prereqs are that.  You need so there are there no official like prereqs the other than application process where?  People apply I give priority to people who are seniors because then everyone kind of has a chance to get to have a line you need to have reasonably decent grades that it's pretty it's a non-trivial class and hope and some evidence that you've done some project-based stuff. Could you work in pairs but it's there's not a strict set of self-contained. I mean you should know how to program. I guess that's probably a prereq. But other than that we teach you everything that you need to know.  I should have brought one. They sometimes don't survive the last 2 days of class. So.  Are only a k. I'm the only one that seems to get injured by them during the class also, so it's reasonably say  are there any questions about computer architecture? Although I really I would like talking about quadcopters actually much more fun.  Yes.  That's a good question.  It's been it's very dull lot over the years. I've had kind of four times so far. I think last time 30% got them.  Flying. I have a couple of different standard there is if they if they if they board works and your Motors turn on that's like standard one. Some of them do what I call room buying which means they start of skitter around the ground and run into stuff and then some people like they'll get like, you know, like I will be like this but they will actually take off for a while before they are you know, smash into the wall and then some of them will actually like fly and they can maneuver them. We are always trying to like  Two in the class so that we have more time at the end cuz it's really just a function of time at the end of get them flying. We have very good success with actual width boards that work which means that electrically the motors turn on and then microprocessor work and all that stuff. We have some success getting the control the Control software to work reliably.  But you do so the new thing this year is that I hope if I can get this together is that you'll be able to keep the remote controls was turned out not to use to be possible. So people can use them. We bought a new cheap remote control. Something is allowed to have a hundred twenty bucks, but for that you get a quadcopter and a remote that you can use to fly it.  Yes.  Yes.  Yeah, so what you could do is you could you could wait to do loads speculative loads, you could also kind of shoes on and then you could not put them into the cash.  if they didn't commit  that'll be hard.  You could trust me do.  There's a lot of time so that the check that a lot of people are talking about is tagging the basically tagging a branch for after which the help.  but it may  and there's some you know, what what happened is that these the fix is going to be extremely focused. So they try to figure out exactly the middle of the need to do to block them. And so are you can read about on Wikipedia. There's the proposed solution. I think it's either of the for Spectre for meltdown. It's like in other proposed Solutions going to fix variant one but not very into and I don't know exactly what the variance are actors actually one of the whole the paper that describe it described as a whole bunch of different.  Potential attacks that you could basically Girl based around side effects of speculative instructions it gets washed. And so they probably want something that's going to kind of close that hole more broadly.  How'd you guys like hotties lecture about accelerators for AI?  They're going to learn anything from Holly's lecture about AI little bit 50 podcast.  Okay, that's good.  Yes.  spring  Yep. Yes.  It is cumulative.  I guess probably there will be a little bit more of that cuz we haven't had a chance to ask questions about it at all, but I wouldn't.  So I don't say that I don't like that. I was some like percentage but  where's the nearest I build the final so here as soon as I was actually work. So what I do is going to build the homework's I have my t h and a couple of extra questions and then we go through and look at the homework. She liked pic or we're going to keep in the homework that we're going to put it to the final. So that means is that enough what I do the midterm, I've already used up some of those questions from the first step of homework. So there are fewer of them for me to draw from and then I get to the end in the file. I look at all. The questions are left over. I pick the final questions from them. It's not all of them, but  Santa's going to work. So the output of a distraction to be waited a little bit towards the second half of the course of the first type. Of course.  Certainly, you know I could definitely ask questions.  Just like we could in the second half of the course. We could ask questions about the combination of Branch prediction and cashing or something. Right? So that would be fair game in those late home works as well. Even though they will cover both early material and light material.  No more questions.  All right. I will see you on Thursday.  How much question? "
}